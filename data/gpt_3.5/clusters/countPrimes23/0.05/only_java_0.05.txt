

****** Cluster 0 ******
public static int func_87ef8f0caaa94322a1be832dc2a0ac17(Integer n){
    // 68
    boolean[] isPrime = new boolean[n];
    for (int i = 2; i < n; i++) {
        // 69
        // 70
        isPrime[i] = true;
    }
    for (int i = 2; i * i < n; i++) {
        // 71
        if (isPrime[i]) {
            // 72
            for (int j = i * i; j < n; j += i) {
                // 73
                // 74
                isPrime[j] = false;
            }
        }
    }
    // 75
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 76
        if (isPrime[i]) {
            // 77
            // 78
            count++;
        }
    }
    return count;
}
public static int func_8ded78ff322f42d5a51c3671a0ba70c1(Integer n){
    // 49
    boolean[] sieve = new boolean[n + 1];
    // 50
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 51
        if (!sieve[i]) {
            // 52
            // 53
            count++;
            for (int j = i + i; j < n; j += i) {
                // 54
                // 55
                sieve[j] = true;
            }
        }
    }
    return count;
}
public static int func_4f8c106501bf48728c57df6929f82aee(Integer n){
    // 1
    boolean[] isPrime = new boolean[n];
    // 2
    Arrays.fill(isPrime, true);
    // 3
    isPrime[0] = false;
    // 4
    isPrime[1] = false;
    for (int i = 2; i * i < n; i++) {
        // 5
        if (isPrime[i]) {
            // 6
            for (int j = i * i; j < n; j += i) {
                // 7
                // 8
                isPrime[j] = false;
            }
        }
    }
    // 9
    int count = 0;
    for (boolean prime : isPrime) {
        // 10
        if (prime) {
            // 11
            // 12
            count++;
        }
    }
    return count;
}
public static int func_358ce39d533d4f9890234faf03e13e35(Integer n){
    // 56
    boolean[] primes = new boolean[n];
    // 57
    Arrays.fill(primes, true);
    // 58
    primes[0] = false;
    // 59
    primes[1] = false;
    for (int i = 2; i * i < n; i++) {
        // 60
        if (primes[i]) {
            // 61
            for (int j = i * i; j < n; j += i) {
                // 62
                // 63
                primes[j] = false;
            }
        }
    }
    // 64
    int count = 0;
    for (int i = 0; i < n; i++) {
        // 65
        if (primes[i]) {
            // 66
            // 67
            count++;
        }
    }
    return count;
}
public static int func_54402a15bcd44834a35cd5cdbe9e76d5(Integer n){
    // 113
    boolean[] isPrime = new boolean[n];
    // 114
    Arrays.fill(isPrime, true);
    // 115
    isPrime[0] = false;
    // 116
    isPrime[1] = false;
    for (int i = 2; i * i < n; i++) {
        // 117
        if (isPrime[i]) {
            // 118
            for (int j = i * i; j < n; j += i) {
                // 119
                // 120
                isPrime[j] = false;
            }
        }
    }
    // 121
    int count = 0;
    for (boolean prime : isPrime) {
        // 122
        if (prime) {
            // 123
            // 124
            count++;
        }
    }
    return count;
}
public static int func_11df810fdf014cf3aba5d694067ded85(Integer n){
    // 89
    boolean[] isPrime = new boolean[n];
    for (int i = 2; i < n; i++) {
        // 90
        // 91
        isPrime[i] = true;
    }
    for (int i = 2; i * i < n; i++) {
        // 92
        if (!isPrime[i]) {
            // 94
            continue;
        }
        for (int j = i * i; j < n; j += i) {
            // 95
            // 96
            isPrime[j] = false;
        }
    }
    // 97
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 98
        if (isPrime[i]) {
            // 99
            // 100
            count++;
        }
    }
    return count;
}
public static int func_c7b36ac3f6e44db29c25315f1dbdf601(Integer n){
    // 79
    boolean[] isPrime = new boolean[n];
    // 80
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 81
        // 82
        isPrime[i] = true;
    }
    for (int i = 2; i * i < n; i++) {
        // 84
        if (!isPrime[i])
            continue;
        for (int j = i * i; j < n; j += i) {
            // 85
            // 86
            isPrime[j] = false;
        }
    }
    for (int i = 2; i < n; i++) {
        // 88
        if (isPrime[i])
            count++;
    }
    return count;
}
public static int func_0d083f6f33044549a573daed71984f7d(Integer n){
    // 101
    int count = 0;
    // 102
    boolean[] primes = new boolean[n];
    for (int i = 0; i < n; i++) {
        // 103
        // 104
        primes[i] = true;
    }
    // 105
    primes[0] = false;
    for (int i = 2; i * i < n; i++) {
        // 106
        if (primes[i]) {
            // 107
            for (int j = i * i; j < n; j += i) {
                // 108
                // 109
                primes[j] = false;
            }
        }
    }
    for (int i = 2; i < n; i++) {
        // 110
        if (primes[i]) {
            // 111
            // 112
            count++;
        }
    }
    return count;
}
public static int func_b6e2d452a7cc4f39a2f0f294b714c25a(Integer n){
    // 133
    boolean[] isPrime = new boolean[n];
    // 134
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 135
        // 136
        isPrime[i] = true;
    }
    for (int i = 2; i * i < n; i++) {
        // 137
        if (!isPrime[i]) {
            // 139
            continue;
        }
        for (int j = i * i; j < n; j += i) {
            // 140
            // 141
            isPrime[j] = false;
        }
    }
    for (int i = 2; i < n; i++) {
        // 142
        if (isPrime[i]) {
            // 143
            // 144
            count++;
        }
    }
    return count;
}
public static int func_d646c7b7e87a458481c46209ad007e2d(Integer n){
    // 178
    boolean[] isPrime = new boolean[n];
    // 179
    Arrays.fill(isPrime, true);
    for (int i = 2; i * i < n; i++) {
        // 180
        if (isPrime[i]) {
            // 181
            for (int j = i * i; j < n; j += i) {
                // 182
                // 183
                isPrime[j] = false;
            }
        }
    }
    // 184
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 185
        if (isPrime[i]) {
            // 186
            // 187
            count++;
        }
    }
    return count;
}
public static int func_0d5cf925af754b9fb2d3b66346198c81(Integer n){
    // 13
    boolean[] isPrime = new boolean[n];
    // 14
    Arrays.fill(isPrime, true);
    for (int i = 2; i * i < n; i++) {
        // 15
        if (isPrime[i]) {
            // 16
            for (int j = i * i; j < n; j += i) {
                // 17
                // 18
                isPrime[j] = false;
            }
        }
    }
    // 19
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 20
        if (isPrime[i]) {
            // 21
            // 22
            count++;
        }
    }
    return count;
}
public static int func_957c73e6a5a74144adf85fad18397735(Integer n){
    // 30
    boolean[] isPrime = new boolean[n];
    for (int i = 2; i < n; i++) {
        // 31
        // 32
        isPrime[i] = true;
    }
    for (int i = 2; i * i < n; i++) {
        // 33
        if (!isPrime[i]) {
            // 35
            continue;
        }
        for (int j = i * i; j < n; j += i) {
            // 36
            // 37
            isPrime[j] = false;
        }
    }
    // 38
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 39
        if (isPrime[i]) {
            // 40
            // 41
            count++;
        }
    }
    return count;
}
public static int func_ca1f78a091824585b84eaa508a571069(Integer n){
    // 23
    boolean[] isPrime = new boolean[n];
    // 24
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 25
        if (!isPrime[i]) {
            // 26
            // 27
            count++;
            for (int j = i; j < n; j += i) {
                // 28
                // 29
                isPrime[j] = true;
            }
        }
    }
    return count;
}
public static int func_b7f67621bad448f5b1e24f40b758fa46(Integer n){
    // 42
    boolean[] primes = new boolean[n];
    // 43
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 44
        if (!primes[i]) {
            // 45
            // 46
            count++;
            for (int j = i * i; j < n; j += i) {
                // 47
                // 48
                primes[j] = true;
            }
        }
    }
    return count;
}


****** Cluster 8 ******
public static int func_28bddb9a44e24e8ba4b088cb540489dc(Integer n){
    if (n <= 2) {
        // 145
        return 0;
    }
    // 146
    boolean[] prime = new boolean[n];
    for (int i = 2; i < n; i++) {
        // 147
        // 148
        prime[i] = true;
    }
    for (int p = 2; p * p < n; p++) {
        // 149
        if (prime[p]) {
            // 150
            for (int i = p * p; i < n; i += p) {
                // 151
                // 152
                prime[i] = false;
            }
        }
    }
    // 153
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 154
        if (prime[i]) {
            // 155
            // 156
            count++;
        }
    }
    return count;
}
public static int func_2d96b26ae9654d6fa149c80e9c2f265f(Integer n){
    if (n < 2) {
        // 125
        return 0;
    }
    // 126
    boolean[] prime = new boolean[n];
    // 127
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 128
        if (!prime[i]) {
            // 129
            // 130
            count++;
            for (int j = i * i; j < n; j += i) {
                // 131
                // 132
                prime[j] = true;
            }
        }
    }
    return count;
}
public static int func_67f7fc18f4c0480f8d66ba348db2bcd3(Integer n){
    if (// 157
    n <= 2)
        return 0;
    // 158
    boolean[] isPrime = new boolean[n];
    // 159
    Arrays.fill(isPrime, true);
    // 160
    isPrime[0] = false;
    // 161
    isPrime[1] = false;
    for (int i = 2; i * i < n; i++) {
        // 162
        if (isPrime[i]) {
            // 163
            for (// 164
            int j = i * i; // 164
            j < n; // 165
            j += i) isPrime[j] = false;
        }
    }
    // 166
    int count = 0;
    for (int i = 0; i < n; i++) {
        // 167
        if (// 168
        isPrime[i])
            // 169
            count++;
    }
    return count;
}
public static int func_3c37b43699974ff78bc7bf3d175f3f39(Integer n){
    if (n <= 2) {
        // 170
        return 0;
    }
    // 171
    boolean[] isComposite = new boolean[n];
    // 172
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 173
        if (!isComposite[i]) {
            // 174
            // 175
            count++;
            for (int j = 2; i * j < n; j++) {
                // 176
                // 177
                isComposite[i * j] = true;
            }
        }
    }
    return count;
}
public static int func_078398df910242538a26976d99f19ed7(Integer n){
    if (n < 2) {
        // 188
        return 0;
    }
    // 189
    boolean[] isComposite = new boolean[n];
    for (int i = 2; i * i < n; i++) {
        // 190
        if (!isComposite[i]) {
            // 191
            for (int j = i * i; j < n; j += i) {
                // 192
                // 193
                isComposite[j] = true;
            }
        }
    }
    // 194
    int count = 0;
    for (int i = 2; i < n; i++) {
        // 195
        if (!isComposite[i]) {
            // 196
            // 197
            count++;
        }
    }
    return count;
}