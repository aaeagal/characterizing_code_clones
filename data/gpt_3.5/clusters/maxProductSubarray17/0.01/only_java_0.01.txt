

****** Cluster 0 ******
public static Integer func_8551c75ad34943639b665e5fa9d8f088(Integer maxProduct, Integer[] nums, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_a23cca6350c54fc399fcf4f74cf18711(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_b49ccd20c22b48bca0419ad99b30c18f(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0d30b6d238814abfaa519e372edcda8b(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_4514a3b7d6324256be01cfba90ccab8d(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8c7fa1a47bb045b9866078d420292bc3(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8add24371ad84d20b3e8056be7259d8a(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_17ba26fd3af14d48b658fa34ef8b6723(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_e205380fd41f416f9af8b275e1e7b871(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_5e2c4000a1a74bd0a9efbb38cccc9825(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 1 ******
public static Integer func_e76e31b728d24ecd8b97b09df384ab82(Integer maxProduct, Integer maxSoFar, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_3b4c4b62d4d5404287060be7edb21026(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_5b8638f2fc8f4a269ab84ecc012e99c1(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_db75099871124eac81c47848664f31b6(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_cbe41ba27cb348c382d3d6e47d3ba430(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_72979f5109834bc1a7a7d7a13ad0ffa6(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e39aecb2537044ab85a0eae81d211b96(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_93583006da7646008c9cd8e4188d17a2(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_d9646b1193454e30a3c1d61eab55bc04(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9cf2e848647340059d63bb925b7bbb5b(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 2 ******
public static Integer func_cae6b94cde1d4b4a9da5de0a20bf6834(Integer maxProduct, Integer maxSoFar, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_021a51e706e3497ea1b4e53f741d08b7(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_0d2885be61a742108db396cef425cc55(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_1d37c1485954444084ca76dc827909db(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_40a9f8902b384015b840d1a349631ae1(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f76adbe4d8194560838bf03e70386078(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e47266eeb5504f35a617ec277549c912(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_07e8d9f8dad0475fa0c6d71305d98c26(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_8877d95494bb40dc8dbe2d4e08ec0adc(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_4ad5ba1c9ca143b1b05674a62cd131c1(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 3 ******
public static Integer func_fc5672f7b8d74e9aa4bb107b7d2b06dd(Integer[] nums, Integer maxProduct, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_7893a2f9e40b44dfb551a959eadaf32e(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_5597639bcbd4478fb62a417281bbfd4c(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f188bf4fd5c248c98a57622ac9c89737(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_449c7ccf0f8c48cd9c922f9e1866a99e(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9b436c632c4843038d612fd683a152a8(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_aad59301f5664e3fb111e6ed5c400488(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_410778ff87ba498a827f1b61a4ccc448(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_df21d97483c6422283b9ac42262cfb64(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_6a45733df2bd42cca5a3e7d148a5fed2(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 4 ******
public static Integer func_af8603c547f64d5fa92a441029ac0e55(Integer maxSoFar, Integer[] nums, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_5d3e8cd76bb14f60936a3e4d513323ee(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_7236e34786b24b94b6ae30840aaf7db1(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_040c5c2bc3044daeb7b641968f931093(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_3ecbede4db8043b7acde86541dd9650d(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3f060ab3ee4341ee808605a2ef461c2b(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3b82089c9a58461e8b04c2eea9fa5111(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_e813c7c334af45de8a79fbb9ee6f9236(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_15c5e114ac7c41a88d0759baeb0a34ff(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_dc2400b31a484454b7d9eb22c92d9220(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 5 ******
public static Integer func_7a54b4c443db48dda56d310c6277fabd(Integer[] nums, Integer maxSoFar, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_f74874e8f09c4549b424b1b89d42a4c7(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_98e7ea3c7fa74d7098d26688361ef67d(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a2db914226fb4a98aafbe34c8a57857c(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_114a9a9c248e43a99caf7f472f72d40f(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_cf56886d71ba46c584f71812b71df6ef(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_00f876e5d45449ea9904ec218c9c4d98(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_4c7249b805e7435b8d18b4c6e327f7f6(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_33e8d040b73d4f86853101ce35acc42f(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ec28e5616ac24e939b20a3189b08b215(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 6 ******
public static Integer func_e9947c3a26084ab78807d83f80c50b1d(Integer maxSoFar, Integer maxProduct, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_1d8bd4822c18444a80cead249080d9ae(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_06d526c2c72a430189e3098712cdff67(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_1212fb4a31c14615896545025034af0b(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_9ef5b79ec6fc41feb50e8acb61818846(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c5100bbb6ce14d49b9eb8ced5663e395(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_6d41dcbf9c1f45ab941756b5bfbdd354(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_4b86aeafbb1e467f8b677462f1726957(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_ff25a866b0ce47748ef61334569f1b10(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_acc5eabb38af430da35d3c3958020af7(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 7 ******
public static Integer func_7511ecc597ee4149be6e0e3097f31fc4(Integer maxSoFar, Integer maxProduct, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_a330a3b4d0fd4f3781aabdb487a7ee57(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_73efb4c38777423fbde28175ae0747fc(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_224b121d17ff477fa37fa2dfdc471245(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_e50dd19d33bf429d8366cc0e9fd2b342(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f3882dce75574a9eb4f2dafc9bfbe00d(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f647c24e17e64f26b3e74567cc39aa1e(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_f8d98a62201a4f7994985c7b584f7cb1(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_7a85ffe5caa041e68dd8eac3872e439a(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_591fdbab29f44dbc9ed21a57f221b83b(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 8 ******
public static Integer func_b03d5a681f934b039bdf805e052400cb(Integer maxSoFar, Integer minSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_a9cef13d28dc4bd986b9e9f54e431e77(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_bc7fb8fba7e842129a04f752bd81d6c0(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_605f1891b0cc49adb64faffea57215e6(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_f57cca2c28414f6d83c3670ac5ad3be8(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3428bfe52ed346ea809ef3ceeaec7510(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3d1573bfc372453c917a2b02025bbb04(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_537f5b87da7444d49344dd1277db7348(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_12f527bfe3d943f28ef36a6f11c677c9(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_98e5e9348ea345fc9ca1af1f36d7355e(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 9 ******
public static Integer func_35ddc9afab1a4e589eb72962a07e5c4b(Integer[] nums, Integer maxSoFar, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_c129ed1473aa4881a25951af1a7fd1d7(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_e848db08134f4b2080ef2a47df5e788e(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c68749fe4a1b4bb08d23f3a620f8ec24(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_60ef932478f049d1a22395005f4c6ada(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_679bb18234aa49fc827d16e1af420164(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2f7fc07270ed4f739b4799c80b1cd67d(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_7e61ddcbbf35479bac23c7f7190c3796(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_26fa081604bb424f98657dad0d11f779(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3ba2f4e0849d4415afb995d9d69a0c39(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 10 ******
public static Integer func_e99eeb97c55b4fcbbae5a641278e15f5(Integer maxSoFar, Integer minSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_78b8c91ec5d448b983c0547f118cf9a9(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_c90ef4f5351e43e49b00a14ac2d81035(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8f22b738ed2b4d5e85bb0047626aa919(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_b6be1019884a4d03bab0853de1cfccb2(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_356c7bcbf50f465498cf46f22d6e113d(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ca0d42a9f8b94359b8c09cf4879a6e92(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_061050baaf3a4eb68b4957d7ba650d14(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_1dc33fd530e54bee821b1174d278677a(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_1ef8429deb2f4aaf8b4ff44881601871(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 11 ******
public static Integer func_14f7a305f09046a4a9817ec0499d816d(Integer maxSoFar, Integer[] nums, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_4353863e31d044afbe80e7517a0b1d5e(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_6d4dd85c171944889afbfca8d74fb666(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a53dd9fc122441e78fea6897acfb6b09(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_aa4fd9ec3e0648a0a5cc848acc5bcb7b(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2d75d8ac01b04aadb6e2ee6cd220502c(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2d35a01225a04bd88a5015ee476bbd57(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_763abbed09ea46858b0d9923cdbc7f4a(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_24c5728195984b9b97009d0bdfb586d1(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_221d4443024d4406bf8459439857df3f(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 12 ******
public static Integer func_39159c1c8a6d4c8fa418f1d2fea8df85(Integer maxProduct, Integer[] nums, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_1ab0e82b38d44371bfcfc37546b7b803(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_8573cb7c7f374cbeb9c2448434867324(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d94befe6f086440893346c7640b28efe(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_75dd1442bfa54a79ae7f8f868d506d75(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e5cc073a95ab4daaa79d5f98579c0647(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c306f7385d5c41efb6575cd019bff6b3(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_dd3480fbf0824acdb42d1057c37f40b1(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_3649a3b873d448b38ccddeca484fdbcf(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2f7a1c5590d248dc8bcf2bb06542741c(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 13 ******
public static Integer func_03bab30b09a542d7b0e3322891abff24(Integer maxProduct, Integer minSoFar, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_3c7d6960b635412b84bf89c85074ce0a(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_209d225960d648c4a90f67f6553ba6c5(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b075798c8e7f47a883b68289b8e53e1a(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_654a4e5c976e4b5492be65c813221327(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2334be431175438fba97297f074253ba(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_906d4423526248efa4119fd71ad4eae3(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_7578e26d8fc64003a8f4be878c5b7195(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_b9b8dbf82e0e44e3b38b541300c30d6d(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_33c1ebaab82d4268b86237bfa67b1c72(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 14 ******
public static Integer func_b64646e0958843d595b7dcf383e3f233(Integer[] nums, Integer maxProduct, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_5c594b8a4a6c4eeeaf933a363d4abd2d(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_997434bb5b7e4320aec4fb73a6519c55(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c289f6424bb24e90b8e46f31860bbb33(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_c24ed529656d48d4aadd5ad3a1123fd4(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ab07a42dae0f47f8b445d0a6bf81adc8(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_98d4b40d581748388797cc8387a4a2fa(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_caacc92f243d4af1ae025afe7ca815e7(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_f99f54d0daa944799e7467dc734f37e2(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_80beda2b106048d6b59f4005e49229c0(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 15 ******
public static Integer func_cb8336b99a454d768f3f59fe72be375e(Integer maxProduct, Integer minSoFar, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_6eb2fb7099374d75a635ddebbf2aac97(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_d97e53fcf3a544c79429bccfe73b80a8(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2488bd702439475aba6375cdaa4928c5(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_ee0fb854a563467eb6eb4aab3bcc94fa(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d17747f14dae4051bb8e113b76805071(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_bb5017683cc645ac8700a1ea32c7254f(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_98beb92567cd443297498f6311548a4b(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_134b0fdaeeed4e519892d6e04926d69a(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f64b0df310c7469bb999fc78c568ed2b(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 16 ******
public static Integer func_2604df671e104b2188f9e12e9b2a4f0a(Integer minSoFar, Integer[] nums, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_0690392069ea4efeac09361e41d6019e(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_b9ced2811e8d45cba952ecc06c298a0e(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9fc632b2a9cb4e4bb18e7ef6e7b2657f(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_2749ae9fd6ae44239a425690571df100(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c626ff7396cf4946882f650b9d50f38a(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e06dc7bc434346b48275faa469c3d485(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_cb6658f0d7ae4188b99a771375ffa6b4(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_dbb78e7d7a7147018c19b7eab44f325f(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c9c288b14e35423f92061a22d4f162bb(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 17 ******
public static Integer func_b0e8cc12233740008b53027d9c7933ab(Integer[] nums, Integer minSoFar, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_e553059efaa841feaf17781d7b5244e4(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_867a697935e14e6e8e95c6cc5240ec6d(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_29d7016795614fee803848cb2cc52612(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_76a7b3478e0a405891a7a5bc2363a9c0(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_035d68d3693e42bab6ecdcf73136374f(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_728be6ba5d4d401387548abc7ad9b930(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_9c926aa2b66d4d60bc24edf88737d0fa(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_01e2501bbfd647cba51570b411d6a16a(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a51c2e4f328a449abb6da660570cc830(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 18 ******
public static Integer func_d210959cf528445a8013ca1bcc1b5ee2(Integer minSoFar, Integer maxProduct, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_264c606b236040bfafc0f3c4230875a5(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_8a96418413ce4022a92061b0f811a6e7(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_6157935eda0a42bd8f018dc442bbb0b5(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_9f6831635a9c49beb65d5cafc04ecdd7(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c439a4666d044fbfabc57adce5e33546(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0a707b6294b44352b646d14e5a8255a2(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_286a152d8c7644018c9395817c20e9e0(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_a5b75c0a36c742c8b024d333c93093c1(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_84d44aea1a87419faa78abbc0f3c0b23(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 19 ******
public static Integer func_78002ccac78d4e5884a62a5486a0be66(Integer minSoFar, Integer maxProduct, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_7e6f0b5dd92945c3875f723946bf7a04(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_3712f6d53f994e08ba2b0a61303ca9b2(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_07d415e50f0c4b5986100665e955d85b(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_693476eca300497995b6034daa5b197b(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8671f610e32f4707854f4d5c0a59b68e(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_5cdbbabae098479db54cdbf3780e78c8(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_a1b86c9311b443dc94c3169c20a39320(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_2946bc627fc944079b69f2566d67cbd0(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_23af5cccc2de428fa525cc5d5223e293(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 20 ******
public static Integer func_3968a8ceb88343a1946c039c052be55b(Integer[] nums, Integer minSoFar, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_566e37efab2144589419980a4d436f41(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_5e20bc6c22e5432891dd6efd5758ba87(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ebb93f0c1fb446e495eb7df9da48fdc1(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_fdbe5d4839634f638cb45d99fd51db73(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_39f84f5514b847178ad8cb75a29b1f64(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_399d52b02dc547a99cd1fbb42c02dee8(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_7611c0cafc34480685b61da6d334e269(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_b59b70b8a8d7408b93dce07c0ee70b53(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_259406613554478fabc83423064db155(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 21 ******
public static Integer func_046e15326e0e4b94979f83e2959cf1f1(Integer minSoFar, Integer[] nums, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_c60cac40eda44da08c40d1adef04660c(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_e4734dda91d44f63af56108f752d5759(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_632eb53b55f348dbab1288064f386538(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_cdfe634b3edf430980fefd9e3fe3210e(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9d9d860ee79c408f8f291ca8059cb70d(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a81172b2940d417faa0ed1223edc76f8(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_fc01b6032fb54caf996513c5addffa0a(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_ba819e91acf043889a2d3d4208164100(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_6d7844767a77478a9cc91563284eacb9(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 22 ******
public static Integer func_82bead96053a4aa5a5ae08436e46b7de(Integer minSoFar, Integer maxSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_7122f9118784427ca1e92cd2a72d06a4(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_ce696f4b3e6b4c4ea71b2c7c49cec7ec(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_01ede935281f42b38b7d1f2e1a88d0a9(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_a75ea99416bd4caa9dc67a35acb6c485(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_847a6d6de5ea44b2b219ceee6762344b(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8c810b58c703418db3e2af69029b2821(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_d4cba4f0204a4d55ac9afcb194fd3595(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_7fbe5c275d69457783811eda0bdf9554(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a4c660489f3e4258b75fa4b2ed60faa7(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 23 ******
public static Integer func_9cc28c9dbbb44d2cb385e815065856bb(Integer minSoFar, Integer maxSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_0391d443a6dc4c82801070945632d616(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_dfa7ace63c6749fd9439da7dd850034c(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_7fb705041396416f9c8a3f23da5aa514(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_71d5868307a94f92948f4049780f50d3(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_eed512580ad9462a8139fe4abb7053a9(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_885b908491194f4e9ce8b014c4d210a4(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_a8b88173f323423689077eb204563817(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_9c5a9277af5e447db0767ad0d0a88cc4(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_870eaf6ad57545ee86a65a122740ad7a(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 96 ******
public static Integer func_f10742233d6d45228ca5e3615df627bc(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_8ac171375fd34479b30fa6717d948e35(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_801902919a564608a01b0dbfe501a14e(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_1d1da8775b8043f983ca8431970b66c1(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8909d2eca7e147e381b131d0860d28a2(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_6530303a1c5045ad9e87cfb2aae64019(Integer[] nums, Integer maxProduct, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_6f58af27e11e4a94947763541c2b9524(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_6326df3ce90a45cb82837c598e0eb85d(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_6088d174282f40b1b31118ac730a2e67(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_ab6486f1834740c3959b7b65e823ff7e(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 97 ******
public static Integer func_650ab93b252b4ddc8bc3c0d45c3fbdb1(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_496cc74792154e0d80015c94c73cb824(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_77fefbfd784146edb2c1a51a8488bd19(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_facf979e4a054adb8e6125506361ff25(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8ecd42b6d799414e9707f76900de74a5(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_23ddc058802f4ff1b6ce7dd58d3d3102(Integer maxProduct, Integer[] nums, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_e1ff6affdb0643e38b2568307e1d1ee4(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_a22fbf5b3f564c529667364ace730a0a(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_e9e0497a23c44cdcab56e62e5ae9dde2(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_5c89c80c35594e468e7b95c63e5958d9(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 98 ******
public static Integer func_dcbb3f91dbd24372b001d644319e4ef5(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_1f5f37bdd1374e44ac322a6a694934a3(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_aeac21268c2d4d97819450627bc2fddc(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_3bed46f107b34636977b6e63f00d9a7e(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_fb4b4e9677e048f1bf0543d8af122bea(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_24604f85349a42b3b00ee3b9f08ec037(Integer maxProduct, Integer maxSoFar, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_2755006b8b0e477fb3ba3d52632ac415(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_1db6a789955e449593f24936675c8de0(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_aced8a391c8e48f5937bcc9b04fee302(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_85d91aa097314eabab82710ad605a6bc(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 99 ******
public static Integer func_c5ef2f8603744bb2b99718f41c0a327d(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_5b424476f67240fa8d1a8b91146808e6(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e8b443bc57c44bbca06184885457c3e2(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_10d4064197964c17ac3efbcb63fc1dbc(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2528094e586a4280b3a666bcf55a84d6(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0d5e23568bc34520bd6af7726f3d46e9(Integer maxProduct, Integer maxSoFar, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_b6e0c69822694127a541c91fdcf81ceb(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_713bca43f049402da3006960c61fbf1a(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_95b76643199247f289593398618ec280(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2253d9c5d44c421d93a5389b6f0b066e(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 100 ******
public static Integer func_06901a49278e43be8ef44274a56b7c12(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_d0ba92d9142544499831974d772d91cc(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_47a9049a402b41069bb89f381ba1142c(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_d574ae0677ef4f59a27043ca984dacd7(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8f324a3693894b68b22f2b9baa39548a(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f77824d91c3045aeba50a0fb4bf0a0ea(Integer[] nums, Integer maxSoFar, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_36b10107c1b44dada9cd2ec1144b150a(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_0c043f1def1a433ea9ce8c3048510bf8(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_92eba870d1a0452e9539d4dbd25b6be1(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_5f0be86923474f5685e312c5afedce71(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 101 ******
public static Integer func_e91da36809c04f719260bd3eefecf176(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_685060b88d694011b3dba88daf2efceb(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_a094d6d29d594cde90fb323c1323cb6e(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_cfd960b6950443acacdd0adfd27dfd12(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_665560490e7547be9c08923a2fe09a88(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_12905ceeee774e13b7486601969d4c3a(Integer maxSoFar, Integer[] nums, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_e97e094767a94f4b8a686b5ffe978c04(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_43654a94ab4943acb9dc6727bad73d27(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a78f5e4000ce46108759b467ecf38dea(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_591d9d490d9842ca8baf2051a3a21f04(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 102 ******
public static Integer func_8ac78727f8ce4738b6d277928fd561aa(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_04025cab9a53407db0dbcef6ce176543(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_4dbaa3f1cd6a4675be3b4d7323c2328c(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_04a565979dcf4a79a6d006613607d7e4(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_45b7cce389144186a5a9a1be4ce066ea(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c6767cfc1fb2477f9322afcedec55b2a(Integer maxSoFar, Integer maxProduct, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_2be66b229136405c83579b613234b57f(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_3924482949e9477b825a67da19844a4d(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_1cd5d66794de4086bf64b969decf7e13(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_ce2681c8b89c4bb7acd7e1b9032e5804(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 103 ******
public static Integer func_dbec82a61ea042309d87ac0aea4d3749(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_a8cb06f8c12e491a9cf2898ba740b75b(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_444660410bb4482ea591b70d3496b3c7(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_0f3122fddcff40b4812b7c8c0ac88b75(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_466ddd882598482a898a1a64196fe561(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0ad953b4ada445fbbf4d4e8cdee9a8e8(Integer maxSoFar, Integer maxProduct, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_f52759ff59b549cfa438d5529f586daf(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_946f54ba3f3d4086b0aa2b79ecd1903e(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_7ac07d209052487192fd34a5f261151e(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_41f8b716f1c841aba58ea2f4140cc4d1(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 104 ******
public static Integer func_c3c3a15c39af44cdaf2d9f3c730242c5(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_3f19ccd34030479fb2155ad91eca505b(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_48410e12019c42c0b0f4bbb8a667d763(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_75b34dafd9b749f58bf215cc7a0fd0c6(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2ae2bceb890b4cbe9ea7d7a21a44442c(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_1b275cf2e1cc49e68dca8f74dc7fface(Integer[] nums, Integer maxSoFar, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_9557f0a8c28446f1971edb060c7cad5a(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_4ad372d4ca574995b13567eaf940c87b(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_4414dce67238428f9be2ede7d9aeb532(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_96a6a5db71dc436e888e7361fd32e1e0(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 105 ******
public static Integer func_8b89c205129b4ab7a3fe7f0bde307b48(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_9381a198d4fe435abe2dae544698fdce(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c1683a28bd35461d8226043a4fcebeb2(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_af4f6958c0554f34926888b011e517bf(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_18eea30258864e43b1f68af21403a05b(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9a345ad916dd44b8829354d1c63c1dd2(Integer maxSoFar, Integer[] nums, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_eefc769cc63e407394b4a1614031774f(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_70c396150a9442df890b34e5c6fe2495(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_30bb52689db1485f9994dab9f59db763(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_92303039f3b3446ea1927cb8751143c3(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 106 ******
public static Integer func_6378a0b00814444181e7761f6e8a09fe(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_dfbcd47edb694c7e8a39529955001918(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_dae2c08435f142faaa354e7c77649eef(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_ed6163db73dd4f8c94d2a3d45a3d16fa(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_dfc2543b703740648c4aa002ac5c99f4(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_04d8a83e91a149489fddad6917ccc017(Integer maxSoFar, Integer minSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_c12bf6752ea14de38fa690cb091406be(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_f6780f22059c4aa0a935655a2285a244(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_74f0830946b04516bc47f22449cc3562(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b8c23d900e124cce9fdb537f694320c2(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 107 ******
public static Integer func_5693642479d74821a023776c09734a45(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_36454f692b214d3fb8e207ba5284511b(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_ecdb7910725e4c88a3ef6ccc300e9a0c(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_506a85d43e0846049b0d8682734d3838(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_d2c93c5c7f9449a4acf110b99830247e(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9d76509dd14b4cf28d4202be3dc466e7(Integer maxSoFar, Integer minSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_8d61e47cd80d436a97d4952a94d011a3(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_28bacf7475a54a05a58f0cb6aa0d05cb(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_3da32448f979413892f9fec1615a1a88(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_5c4a77135ed149ffaa68966247e99acc(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 108 ******
public static Integer func_92bdaaba3b4c43b7ad638b2114c89f6b(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_f3b6c2ea03f842ff85bb2a9b8bc45e50(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0fca923576ac4944ae11b941974cc45c(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_9ae80ab23ef746df84a68d88de1a6606(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9bb9e4ca19c5476282ed273f0333ef2b(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_6849a87e47264d07b3a384ffab5ed087(Integer[] nums, Integer maxProduct, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_b818c82e7cc94987909d89df8787da72(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_1e8bd56d0ed74b218c8ea968891ec7e6(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a566d343483e49619639ef8a09334288(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_a133facc8a624ea7b5c5c0f4523a28b0(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 109 ******
public static Integer func_e9d1ed38b3ed4eafab099809e2544923(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_f3e31e258f0846fb959e767f31c4fc2f(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_401476373ecf4d299908af9d28382d69(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_3f15640d3c984f99b09750633ab7e623(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_995baef6375b40d186f9c23630c79b0f(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_fe33b6ec00ae42b6b937958815eaeb97(Integer maxProduct, Integer[] nums, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_bb765b10e1bc4d8daf1b6beeb2d7e7e5(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_4d73496406044d3cbf39aa43b2f6be76(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_2a7b7f1697b94b86bfb9560b1081d1cf(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_d2960bc875044ddd9045f9c573b5c13a(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 110 ******
public static Integer func_1caaba1ae48e48e29e0068c559819c76(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_1a91e5680f74462e950f5ee20de5e405(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_d7752dd8677c422185b908a97811c566(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_24af7bd31cd543f2af88fe67f3636832(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_1d491e50fa9043009d6ed76975ddbadf(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_a09d352deca5421690874145e53c930a(Integer maxProduct, Integer minSoFar, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_5a73dd3cb4ba47238cc028a1ddedaab1(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_cfc8f2cc659c4056a487ed0843bd53b2(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_7b220b34dcb1419ca7d488357f40f2cd(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_cb2790ada1004d15b13718cc240ad861(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 111 ******
public static Integer func_66bc1a50d11046a99450a639960af169(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_9a6f99a1193148999fad42249d972b1c(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_3e7fb29957214be0bf4db120245b5808(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_2798987e7ef74f0593efab7461968954(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0e07749c5dc043f5b0ed9e689c698616(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b688ae2c7cb94598989c32339f090cd0(Integer maxProduct, Integer minSoFar, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_a6cf4dfe7bc64d85be1b4b5ca9479e16(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_e1d77424f2184bdfbdbd4102f79cdb95(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_71551326938247ee98d0b47f44886335(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_3c35c1c7316c4a0f90be15eb8045b781(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 112 ******
public static Integer func_9ffa1c37a20942099405f40efd049592(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_1ea03ab504ee4c48bce07cb3ba76328c(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_19ce9070079c47728509ad290b2aaaed(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_783b2071e7364128abb3c48e09d0ca46(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_bfdeee8746894344951ba83eacf94256(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0fcf538a1fb74578856871758feb45d8(Integer[] nums, Integer minSoFar, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_14d5fe266b2844839d52022f0e856504(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_6e9e74100c624cb7b32498ed9119414a(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_e4299e766ffe401eb2c447a66b99f9e5(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_95e6c7482ce3434fbe169a06b7866e39(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 113 ******
public static Integer func_04d125b43aaf477da87187b9219a3e73(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_86b6b79e954c4137b867059f9c7a48ea(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0b33e63aa1da4d92aa724ebf58574e70(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_3858797256ee4d72a1b79f99588de6dd(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_43ef11fb326e4c068c2b5ae7d42d9960(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_acbeb87227f6494781fb47a4fd06fd11(Integer minSoFar, Integer[] nums, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_dd5b4ebe5f034d4780ef8489bd3a70e8(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_9a314806eba3497083205c502187cfbe(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_15d064557b8c48b9976aef1eb183eece(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7425c35d73ce43d2b32d333ed55f9e08(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 114 ******
public static Integer func_edaf8007b1cc4d80a9f13793e8118e84(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_e33e559ebfb84ad0be0affa0c74b712c(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2bd11bd3be104bea8cc5f36b6cd308b1(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_0f597147d83c44968c7a7e73eb227638(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7fec68352a6342b68d2125e1fd68a592(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f84b7cdf80f8402d842159659a9e3772(Integer minSoFar, Integer maxProduct, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_9f14f45f1a8045bbb392ae261ec8a0d9(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_4a305f56252f4859810fa85c3343306a(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_7a69bb6728dd48a28513cac3695d38ac(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_da40ce69dd8d48bea9282489ac23ec49(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 115 ******
public static Integer func_b26a18e303b949238a6eada9802187e9(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_a78829abf77c440b9693f7d4d52fd830(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_88668456c67a4b099b37a8805163838c(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_7e832577846840448bcee3f6bf2bb7c6(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8e5a076220c1440ab216ce6730e07789(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7124e1956a0a4c39aa89f2ae7c512c5b(Integer minSoFar, Integer maxProduct, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_6a8a8ef1d5cb4ed4b3ab4e38ce16c660(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_c1fb8a7f5b8c4e2297dbd60eb3a423f5(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_354d653105ae4eedba22e135e26d255f(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9007142488e34da9b14b46872c3026bd(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 116 ******
public static Integer func_b49900a2aa1b4971beca300053a58570(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_bc32085edeea4a65813eb35deb6ef9c5(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_4744a34a25c448ef9ee6a56079ed01fd(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_6bcadbb2c0464608871125eb97274dcd(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_02bc3bb48f814dbca879094d60fd252d(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f7e3824aa086426ea1b5610a0b3bf818(Integer[] nums, Integer minSoFar, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_004200c6bf124c91bde620a57fa01869(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_f117a3372b0f4494944e751be14748c9(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_49a8b39e48914395a61d5139998c9e87(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_d244fecb313d47928b05f92054ceb087(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 117 ******
public static Integer func_484f5faed8014110a1ae12322db1284e(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_dbbadf8aedbd438caa9c1f1b7617d976(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_374e767283624bae84bb8305f398e9cf(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_03b494580a84416eb86c1f3954c0112b(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e682779f59664d40a05c44e8d613595e(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_33365079baed4fb7b6bcee0afff90274(Integer minSoFar, Integer[] nums, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_556ba7c43640445d881849324d544829(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_f4284f28a9f04a358adadc2939477541(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_004c20428e2049c7b05c5b0e2f801d5e(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_a6896227684740ae8ef11abc35f2dd9f(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 118 ******
public static Integer func_97030ce4ae844ee3a0f29dc19138c97b(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_22a62a48f929465b9e29267ab567d1d9(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_32c5d25e5e6347429305db901057029a(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_3effaa4cb09e4f89a405e6996a1c42f3(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2f1b9176aa2d4ad284c9f0cf8c52497d(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_17171beeda7b4aa7ad3fe8b340e05ff4(Integer minSoFar, Integer maxSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_7897011f08a94c3ab5b7e5666e923f2b(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_6f7dff28bc2f4216bdc9432e454a6289(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_46f7f1bbfd3d4022beedc47a86d0cdd3(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_33bfbf37b0f04fbc9f1fc7b614026525(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 119 ******
public static Integer func_b6e1e6ba0d274c6f9343b9942518a112(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_9315013bc8d044739b1594816ae8360a(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8890431685a54f43b9674e0a86776e18(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_7d59c6a8065940bb9eb2ed500183c4fe(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f0ca7696ffce4eebb0b11d3bf494178e(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_91fd713e3e984f28ae77c9bfd5362171(Integer minSoFar, Integer maxSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_23e7573e432d40bc844b8e8a377f2e6b(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_60b17eac63404333bf7c128e68917d5b(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_d6bc7ad2647e42cf91abffa55c8e9af7(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e9da6c943d0a481ab781dce78460176e(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 120 ******
public static Integer func_82202b80405849e787df1256c34318bc(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_37077d0bea6e49259a27d366a94d883f(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_70704d267e1949dfbca519a2d695e6db(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_399a5f2ac4264b6ca4a6f8634aa18106(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_838f6868007349ba992ad2f668fcaca7(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_08b3e5bf2cf646d48b184ad9f9637a35(Integer[] nums, Integer maxProduct, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_04de93e0293142bab2946bcb0128dc1a(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_55c1aafbc3e24be1a0575dd5c067d340(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_b103303e9ff64b9dadbb68f18b70022b(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_85bb1e47383f40cebbf9b481f52916f9(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 121 ******
public static Integer func_e76c5757e2a440c8a0bac537604a5891(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_1e2071d10d93446a9b87d7baec7ae004(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_cfea17671a704fccbf7a65bf88d48a11(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_aa81b34cf13b4b20b7f5ee3097101de5(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_69740c13e8fa4303b901a886ff3248e2(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c7939f148eb34b4283d6a8ffa8a9f5db(Integer maxProduct, Integer[] nums, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_50d6e81f1e12487390dbc6df3d98df27(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_685ce5e7ab344648beb8ff6fd8ba64fe(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_51032d268257401b946752840fefe7da(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c9da778b447f42cd80e15abc63adb33d(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 122 ******
public static Integer func_388756085791497591f5318b385d5bc3(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_eb139b908f6b4e97a99ef5eaa70d6eb3(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_48262a25845940c29810d1aa1e1e6e47(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_24f2d97e2e1b41358946e05f3bc58b01(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_72aa3e61386a458d81164b52e89ced18(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0d1a55d64b59488dbf70bd08cc1bcb30(Integer maxProduct, Integer maxSoFar, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_e5e2d9b4ccd3422c8a726e9817c0a055(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_2fae9f9188c64f2ea11c4b2d2eef055e(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_cd1ca27ffab24bc7b37e587c7ebdfcec(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_564b84013ca143869812f6dba17d2278(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 123 ******
public static Integer func_e3f6bcfe3aa84cc698b6240a723d2abb(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_ef4841edb3234155b6e46cf4bbd40b8a(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a83392f72970466f851a0e0906da3d64(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_3038ac799b2f4f52a2a7666c4638d8cd(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0cea7516c29d4941a7a85b2c56f0fd5d(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_20d6239e2c6b4ef5be88e6c3532a77bc(Integer maxProduct, Integer maxSoFar, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_d1064fe0b126491c8935293afaf6dfaa(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_277d133c01244661946e69c58bf76d43(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_b7d24385a1bd416f9926b0ffb5637c2b(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c6f23b7e1bb14d82b12c4c165a1f0c21(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 124 ******
public static Integer func_bb0641aeabb04f2ea9279cffc5b2fb77(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_9da482470717416ab187aef4c4238a50(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c7aa92677e73478bb087ed8a72afd44f(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_ef2ade2046f247518b5ce6ebc8ccd7c8(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6f01623daf7f49fcb40e4ea6b1daa3f8(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_78421926843f42738f1386820a2d3605(Integer[] nums, Integer maxSoFar, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_499176b5ac824f0c9efd7a8a4b311f21(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_eef8971f31f54ee6ad751962dd4b9a77(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_37707e7853554075ac1b2930ce254ccf(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d825f38bf03a49de94d230796758a657(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 125 ******
public static Integer func_0242cc39594b4520b4e23376a1d3f136(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_98e23163f33a4347af489c0a20d8ab02(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_dd612e480e504354907b230144527afd(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_5e33a8bbca8e468a8182d520bb0dab65(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fd3a22dc95a84edaa2051f0d5aa127ee(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_03fb4e617a89402c83da182678b4f8f7(Integer maxSoFar, Integer[] nums, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_9698afa8204547759da0f71398557d1c(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_a9d08966e5bb4d6394af3bd5950a1dce(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8a7b3673ab1f4e60bb2b61924fee2da9(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6c428dc5c14f46c4ad7c5c80e36d4837(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 126 ******
public static Integer func_712079e356804285a5884a7d3a55d184(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_35dc3df5f7c04c34a458743ff45711fe(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c7db32e6c0ed4a21a520af6e9afc3f83(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_e69382013aa14617b9a72496a67c4432(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_856312d2dccc480e9826893c0944443a(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_59d47ef4eb2a4411bec60272ef26e3b1(Integer maxSoFar, Integer maxProduct, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_98c953991e0a423a8e8d1f61890bb91d(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_b3815c6b639549289100806a69e3fbcb(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_40e618f17dd1426394b4da537f7a3429(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7cdf0839d18c4c05869d953f38d52a66(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 127 ******
public static Integer func_7655243f51b54106a23eb494278fc1ce(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_1590a73a95874d51a5493e9e8845a648(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c3a35afa04114091aad8dc5b201430ff(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_fc2a0f1a319b4665967cceb144db1c14(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fe8fbfc4f0b7467b9676c4909d98d0f1(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_99288eaf623f4eeab98b60798bd55ff2(Integer maxSoFar, Integer maxProduct, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_d76c0acba562413d9cd1acc216971806(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_fb76b00f7ca94156aa3474f7589d93d0(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_1093c2d4ce9c45f39631a6d7cded84b5(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a73d4f6ebe904f3888dc61b5a2167264(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 128 ******
public static Integer func_6fafa59048bf417b9a5e75629e6dd43d(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_a8f1e968fc844462a33787b32d987b2c(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7eaa2ba625964a3ebafda6502efb526e(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_d98a50039c9e450fb1a30299a0f3a02f(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7dda321c856a4060962bcb143f9ee1e1(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7c1930e8d18e43d4942d4155717ab20f(Integer[] nums, Integer maxSoFar, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_3da8eabf0d5b4b9cb2c4abdc292af551(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_606d24fa5c8741aa84df56b17197a570(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_7c33eb947cfe41d7a5f590e55496de56(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_94c606895a8e4ffa985167ebc9298aa7(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 129 ******
public static Integer func_6020474cbee94d07af8e23f8271924b3(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_168532f1923c4c32a11faecb9eeb1b81(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d2c6c927101643a2811467b3ee4b5fd9(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_408265fe910f483bbc2d45782d61128d(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_47d2ad4263034602ae4c2fab5b2babf5(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_9a90d139db5841e388b7334e32fefe26(Integer maxSoFar, Integer[] nums, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_46891cb6d4f6440cacc6396992d62481(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_ad3c4e5e180343368e496eb62274e09d(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_876bf449bce846aa894f077ec47fce67(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_684944bfe8ad4513a98b74dba89fd4b3(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 130 ******
public static Integer func_d5a1159a882441e8b58333fd93781591(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_71e1cc2852314eeab33ba8d35983792c(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_afc1496aa9e34c28bf6b85b06ec6402f(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_f8f751ba1cbd4915b53a3ab2d2d4d3e0(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6dae9e329a2e499e8df09e367da677a3(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_f87c75870dad48b19df1ef3320809341(Integer maxSoFar, Integer minSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_41be751b4b384210b2a841a7443ad6f1(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_83c1bd02844e436bafb67f53574bc96f(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_83cc9e74d90d4807adab628ec32a8987(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_330a12a6b3164f15989598f06bb59d10(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 131 ******
public static Integer func_103afafaae33498f89357c70c4757f87(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_77a70f52771d45a9aff84a025c1dec86(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_200ae7d0f3d84a8780b622bdfbd193a0(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_c8ae0df8c40445059dc31dff495fbc8e(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_70453b2fc7d74e968d1e68fe3772844d(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_01b6e0e5bd6b4d19acd6652bf598be95(Integer[] nums, Integer maxProduct, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_4a344d6fcabb4563b986225a7c3d2c3f(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_1057be299fc943d1a116817960bcb2c7(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_6dd2050cda87479a964f3e20fd925bec(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_43051745aa094ee48f8930f24331759c(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 132 ******
public static Integer func_de8dc228373b4a9d9ba74ebea1f2d0d9(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_287ccab4d5334979845002bc9cad4d20(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a08eca7444884fccb5b783894d012532(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_28e7c63be8da4539a418e5b2d204833c(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_749f9117bbfb4827bdfbf407445f4ee4(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a4ce2d989cdb417e85f5ca9a1bfa0777(Integer maxSoFar, Integer minSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_04be8f5535784b608f61f80e93ddfab9(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_48f3a1650eea43f78d24e7321368e64a(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8e5858c9be67470ba2a1c6953a2ee2b4(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_22f0974ca0d24c14962012ff660adf0e(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 133 ******
public static Integer func_6d4234a3b5b048f381d4cfa925b6a756(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_dc08ea41f1fb41b586c73cf85d91440f(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7d2d5156c67f4d91b04273f630b4db2d(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_eb3dc5669bef4f34bb2520087d95cd97(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_9cfb151b87114cd48ec650629955f134(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2d3d2a124c9046d49dee7ad94560295c(Integer maxProduct, Integer[] nums, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_ba14e93e16a94aa6bba37e289dad3b1b(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_4533b7c3d796463b865d12cdaf3c737a(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_da5e6dce55a44179816928eee75d1a83(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_646cb4ed525c48d2a6a693a20cae2270(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 134 ******
public static Integer func_e739f6eb41a74374a8fcb49016ea197f(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_e84488c547fd495e8e931dc37bc90065(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3545b0a79abf4953ad5e224715526fa1(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_18e568ac304845d5aa51dfed8df1f4c3(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3094d74e46074ba3a420e8c6214ce61d(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b06fb086f06b4baa82f3e08c672e90e5(Integer maxProduct, Integer minSoFar, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_705819e173e84c72a01b5f315cb5b113(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_cb00124d34274c02952a4290392db7c6(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_c6ea4cf44f5646ba8f7e1d485afb01a3(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_bd842d40399f4561a08941dc0fcb52f1(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 135 ******
public static Integer func_5a0833456eaa4fd794d6432cf8eda121(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_df371af2f54d4461adba9e34c710dac8(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7404420a96fe40998b46338ec877b99e(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_0ef28211c309428ba0fb23368b92b022(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b2c7a75a443e45c291bb08789a3fdbd5(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_66bedf04a8c04c5f94a1f7e938f993a0(Integer maxProduct, Integer minSoFar, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_60d565d2662442cd864a689b98c770ec(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_ba0be63989464b5aa2889b1db767eb9b(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_929dab2eacda4c7294439b0cba4029f5(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_04d8ff7aa65e4949a3e4b9ba8d3758f2(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 136 ******
public static Integer func_c03d5a926b444be5a320a26b515ec266(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_d79c04efa6434fee9776ced6bef134f6(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_e60441429467433eaa646099bd5c54a1(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_74a1ec24acb241598f09043b51f0d224(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_e7b102b6a8924d5d93733c0bc8abe4ae(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_83a7785d61b149f08853eced339c0d5f(Integer[] nums, Integer minSoFar, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_fff0b00c5e5f487b9cc9c743cd64d599(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_6fed6e68c2814170b2dcf0a670df7d4f(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8b1d9a6569f743109a813eb3d4935931(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_37a7f8466f044214942f43401455bbd1(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 137 ******
public static Integer func_66a69ea84e734ebda040bdbf11d530ba(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_8bda81f688dc43669a6f7edea7446f0e(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7656a2c895be4be9b7ea65f5016d4a49(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_ab52f2a5301942888585ffed9b23a589(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_44a2765bc7c247fe9c01f8413ef45895(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2511b3e8805645088576c9342f40b501(Integer minSoFar, Integer[] nums, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_66218eb412194fc2ad6c082f1c36cebd(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_0c65286681174e2d8515b9d90ff46227(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_af4bd5ac407f4ac68a24328db7559f6b(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fcf0cc2f0f104718aa06f61d66adba2c(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 138 ******
public static Integer func_92c1850ead0b43cfb99be500ead8755d(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_bc5597a4b7074efcbcd7a2bc64140d68(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_cae321cbd62c4a2684b5e507838b0c38(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_799d7f6b0d0142cc8f92a1d9cf1eb31c(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_68be6ac4841547f8b226ae93a9ecfc9b(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_5968b1d0e0fc428f9145acf91a0a80b9(Integer minSoFar, Integer maxProduct, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_48d067936df14acf8f9f03ea4c1578fa(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_99f02f9ef3f344f7b9c2c7223d2bb9ff(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_b54affacceb2426e8d7ce9b679f3d1b4(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_5facbccdf7e84cca82f25059a2def25d(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 139 ******
public static Integer func_0be391ec5d74464b9edafdc64374ee29(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_94d7f2ce087342b3a1743ac4f76d9b8c(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3e898a95a1524e1c98b1fd299749e94d(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_078c94c2db44439fbf767ba18863b067(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_38356934ea8044b4b5c76cb43a2e3651(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b41eccd78205457d82e9155370bbd58a(Integer minSoFar, Integer maxProduct, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_a39db63086d44c17852d75c26666e239(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_891e7bf8f6894769a16b2a5eb30fbc7b(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_89711892a4b744378f00bb58632497b5(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_530495838f374fe1be4112f80e53ed88(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 140 ******
public static Integer func_d47bbf65199d4defbb9eeefa809939b7(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_20236341a1e448dfbe9bd46a047ebf93(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a182d597470e4c08b391b579b90d936e(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_0ae3720cdb0c47d18979f00ce2bbbdf5(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_4546d2388d444e6c9e48ae1eef32c6f8(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0ace1931508f484d94bf41b8e4da558a(Integer[] nums, Integer minSoFar, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_51445c3e21454e82a86035d11e18b4b0(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_9d4eddd8be284684ae0a8aa249f5f7b8(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_03f9914dfa48478fb6382132dbda27a4(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b68d2b7f3d6a4ba59f2bac47c01e37e0(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 141 ******
public static Integer func_7114d54312dd4a4ab7e98531722542b5(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_341124acc671430090b128f405c6b06c(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_bac4f437b5ba44039b59703d59906db5(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_6c16017fca2341fdb5efec68772dacd8(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_867924f349e94ca1bcd0c052de7a8221(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_1b6e77f14e574d76ac505c8bcca819d7(Integer minSoFar, Integer[] nums, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_55514bfcac4e4b1fb8465e75d21cd208(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_dbf5c8b6f2744f68a0d7fd438a919aff(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_7f2c0c6204b34a3a99460a9517131393(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_46de395ad9a648f5b1f0115e464eea90(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 142 ******
public static Integer func_bb5f370420a446ad94e70cff47c81c12(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_f981ea690dff4d20801f8a3e03a9b1d9(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_65d4e3f39e9c4ffc976234af1da0920b(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_a257edb5a2f04e9c801bd37fa64e834f(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a5816bae2b9f4fdfb0ea9b601dcfbee6(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3869129a49b54a329f8c67e0c7f5d85f(Integer minSoFar, Integer maxSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_7641f08895084dc6b27f23d0bf1e788b(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_f402a43a295847da8689e523824bde01(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_db702a361c4042cd98481c69df077a6b(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_5edbc41660a1496c8a374cfeb928b718(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 143 ******
public static Integer func_822b3f8c86de4ba58bc28dc363b01fbd(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_af43fdba752145128388e948b5803282(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_aa5041b6196045ca8764a4cfab2ef24d(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_f134f6eef9d844fbbe744c569722330a(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fd2c75e7a08e458db878896ab057a141(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_71d5b3985c5e46de9701f3664d63ccaf(Integer minSoFar, Integer maxSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_5927cb69ade14bf884d111904a824a80(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_a1f91cbc0a184c759be5019f163a25ae(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_da8089b37a224ae5b44ba2e7c58b9417(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_903533db6b2649028f63f48911c4c10b(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 144 ******
public static Integer func_e9afc819035242af8d6dd70b97db46c8(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_773aa26a1da947b48c0d761125c63338(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_d0f84e076d80411baeef3caac0dee76c(Integer[] nums, Integer maxProduct, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_5156db40c21b489c89fb17e838e105ef(Integer[] nums, Integer maxProduct, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_e3cc6a065b6647278cf537df94a7105c(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c2c9da82d99b431aa13989027bd76543(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_585af74b8c704fecb883200ae027d728(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_9439a4840d9548608bf8909afcdb9e62(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_d067d09d8ec54b888b1b3250eab03f0f(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_15b19465045f4083b838bfef93ec8e90(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 145 ******
public static Integer func_6a49cc6f8f1a4a64a65a2f3465c01278(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_639805ebf7244b9e81c7120ab3e8f716(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_0f5acb389a98499aaf9ec5904d81c51a(Integer maxProduct, Integer[] nums, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_4342cef1b62a478a986fdf03851edc4b(Integer maxProduct, Integer[] nums, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_830d7122321e464a9750efe0488e34dd(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ebd0910ce7ab42d9a20cfb756fe8bec2(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_615450a2c85c470f82943b36099e66ad(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_9da5fd47822e457abde09a61f04e3d70(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_4adb518460a74e89b67e7b8763308674(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_5e8895f9a67e44fd991b9971d20b1a39(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 146 ******
public static Integer func_ff1305e0131d4649b004ef762e82567a(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_e94dc2273ea24a1194f5297117631917(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_65e50597f82445cb97a3200b66e129d0(Integer maxProduct, Integer minEndingHere, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_bdf4c96307c646768a8c94971271c93d(Integer maxProduct, Integer maxEndingHere, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_c14f63e490264f3ca1cc1ee422ee461b(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_76f0db12fc034e92a7f27ba727989fdd(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_820db743bcf74a44a735f0d3c2141c65(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_53d8c7f7042c44ba9322c08c7b4b5669(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_ee4f8fcbd0b24b829489e10db74cc376(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8a3ce009cc18420aa3761347d8355693(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 147 ******
public static Integer func_e20155074d954170b7bed419f3a4c3c8(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_7d9c617859bd46f080ef8ea948f02297(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_dea11876f46b4cefaffad00a124cb66a(Integer[] nums, Integer maxEndingHere, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_8b37d8429c394ef9b53f61d722f1b8f6(Integer[] nums, Integer minEndingHere, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_083012ae94174ba099c6ca5cdf246b3c(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c4b3d1288cd64aa5b66bd90389be05e7(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2445f066576e4d56bbd240e8404c0077(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_01a4adebca9e49c78e0d993cf4eb4622(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a6140559431e4fb48ef247bf8d14acc5(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_52118cfc9cdd4182935244b66b2dee2c(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 148 ******
public static Integer func_bc4b1953ac0b4716adc99df94baf8b16(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_445d84e737224ebf8706cf73defcc80e(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_4b3ace3e09f84086999841c5dac2c0bd(Integer maxProduct, Integer minEndingHere, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_fcbae3c6a3cb4437abf17c34f9ae740a(Integer maxProduct, Integer maxEndingHere, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_d141298b5f3d40df9d9f6a2bb977bcc2(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_efc35f3aa488463c92b572d70a5d19aa(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_dbc9326f86574cae953ab918c5a7099f(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_ff594c483fc245ea8b80b54424995c64(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a204f7719f0b4c4db2575840ba7502f4(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e0f613a9e2d64282b271b2f508be5028(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 149 ******
public static Integer func_b8abf802b47b473f89978424aeaab951(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_25adfb04a86f4f088a2887354f7ca719(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_7a1752c747564bacad693563712925c0(Integer maxEndingHere, Integer[] nums, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_bdd4a7a469cb446398c738e7f8b7a391(Integer minEndingHere, Integer[] nums, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_492fa9cadeea4359b4a5ba694db31551(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_6d27de719a8243aca6a7c1021bbf88fc(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_1e26795b83b6406fb6dd57c387dcd45b(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_508ee7eaf281443c9a0a3eb908cdbe54(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_75e366e70fad4fee8be5060e231d4a68(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_318dc7e7d1ed45f9974f6f948bc66ad4(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 150 ******
public static Integer func_74a3c2e63f1e43e0866273970f79d4ea(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_86d045637cf54d17bc471a3059601225(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_0edf80f87c194d00ac933497c78927cb(Integer maxEndingHere, Integer maxProduct, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_a79955e1ecf74274bb8d88a9430b305d(Integer minEndingHere, Integer maxProduct, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_05311f588fb6417dacc2ced21ce04c36(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e8ddb33b157e4139b22a03fcdd116382(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_baa2c904bd044aa0beb3c440c5e166bd(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_0e3e6231fcfe4f8d9349775a6d84dd62(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_55f414d2f79a4f4eb83e4a170bd6cae2(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b8f434a95bfb421eb2e6780384ae749c(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 151 ******
public static Integer func_6410419742434cda8ca74519728221ec(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_276c3548c69346139bf64abefb456fe4(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_1481167b839241fa80bbd93c509d76e5(Integer[] nums, Integer minEndingHere, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_b5654f7757854bf1b20470ab2d631010(Integer[] nums, Integer maxEndingHere, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_8d25e694254e47ccae6b96ad54928a00(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e1571afa41e743169ff2d719cf9ade78(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_614e21ef52964b0c8dd9a9d9b50dc65b(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_ee4381d73039439688fae23e951b6073(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_44920b00c37b43978e87d52bf5276bff(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_96a5ee280e754089a2b5298165b18cb7(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 152 ******
public static Integer func_da39be20de6a4305809706693d250c32(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_26b52d12577349c299d186aa3751415a(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_f1f7f9672ffe4996ad84727a39886fca(Integer maxEndingHere, Integer maxProduct, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_f0af54c1f40942d9a009853c1edb700f(Integer minEndingHere, Integer maxProduct, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_8979e0ba5d6b48eea3db17d3b11ce26c(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a0b37a84f6754453b727cbf4f23f79bc(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_4efeffbee8d44c7898ebec4a3b82f430(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_3dc63119eb2b4d9289ab12d8e7624334(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_558bdf68807c4110960d3fffd0de4826(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e9a4641ffbbf4eb38c5adc0c51d0f1d3(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 153 ******
public static Integer func_d98b6f86d4794eceb2f5463a8ee6d49c(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_dcb9f8c7ad2c452d90ccd340f76dadca(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_82ca9aab29d846a9a5455080e6925931(Integer minEndingHere, Integer[] nums, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_156eb2c83ae14809a992f66702909efe(Integer maxEndingHere, Integer[] nums, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_c2738f1dee3948d594cc9da807aec364(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_83608dbf95e341958a260426510ec050(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_4d93e62471594f318aad10d67382ba49(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_93d641aefd8846f097de319ebf84add5(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_e5dfa9d83d124566b7fb40b3613d73e3(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_29560d92cc6945de8a33e4596e7d2dc1(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 154 ******
public static Integer func_c577240d587f4c34a1e9258cb46668c4(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_b099f4a71988417ea1359ce6eee52b12(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_7083c373c1814610a344c98ba7076c24(Integer minEndingHere, Integer maxEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_774de805c6724220bc0ca418ccc71e73(Integer maxEndingHere, Integer minEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_1cdd3c37146b4764a3a090e7895d9802(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8eb93cc2aa4d4ae79dbe29225186549e(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d1c52de31a7f45439f40fd4bcc07f0e8(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_94bbbc08297c4c6992e1f7636ac6136a(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_f99f8654f8134aca9819e19195732098(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_720b966b7d514a10a38f5877af10e1bf(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 155 ******
public static Integer func_a78edf6881614c8e8f8afdbe792665b6(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_44e17a69736c4034b3ef44e64b21c0ad(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_703be84e5d3445b8870d5b4694e2fbd1(Integer minEndingHere, Integer maxEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_c4d2e903f17d4413979cea959511a202(Integer maxEndingHere, Integer minEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_c818e2e969174e1e8010831cbb2a7049(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_205ae3565316404ca1bb35dccf928567(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0ccd6523b60e49898e9f5170b797ac11(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_f42bf07dca3347db8bd0a6f6b5dcd372(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_863ddd4255de435c91a55045e5b1ecac(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_fa0f936f923946cd907646d045ebfc2f(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 1180 ******
public static Integer func_12bd49ecc1cf4baf8ccd898c56e3d78f(Integer minProd, Integer[] nums, Integer maxProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_89659764ae9742bb99919acfce46bda6(Integer minProd, Integer[] nums, Integer ans, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1182 ******
public static Integer func_5b46a165e608493c82e772e6f328a49d(Integer[] nums, Integer n, Integer minProd, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_7dab9d3eeb23495888ad738e907c64ab(Integer[] nums, Integer n, Integer minProd, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1187 ******
public static Integer func_6f604e22c88242729a1826d7f3b49e44(Integer[] nums, Integer n, Integer maxProd, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_04b742e64ced4813967b480376da5ecc(Integer[] nums, Integer n, Integer ans, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 168 ******
public static Integer func_f6f7d1cfc8ba451a9640a9c7ee932513(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_b72611fd5ec647abaa52b9eb969a22fb(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_485fdbffe6f74573936f9590d790c5fd(Integer[] nums, Integer maxProduct, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_8f630a7c7f00411195e2be29d9c2cae0(Integer[] nums, Integer maxProduct, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_058e368ef2004d9a9993d3982d6806c0(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ce92c510e50d4af19fd3d97fad6bb118(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0da90b505c194476bbbecbb89d5ce5e7(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_7f37b6cfb4c349888a5b30be036de303(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_f160c21a19324a358254f4aeca36dc21(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_88bd5146099e4db7ba7ccd9a1a37c2bf(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 169 ******
public static Integer func_eb4b28adaab34e3e8e79fa182601ddbb(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_c76b7d933b3048ed8dbb6d4f5b47ed9e(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_0b1f5f52df384f4a93502473b17252c7(Integer maxProduct, Integer[] nums, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_525c84b8d3b1477aab28d8afff1fa572(Integer maxProduct, Integer[] nums, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_f06ac1ea86504d348f8caaf744d7ced1(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_78c79998c4d84797930f9519fc765bd3(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_295c43ac773e440da3525e5939e48520(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_9b765894bc4641b6a07458cbb646988c(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_551c71832af94c9ea1500b3c361ed603(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d9dc5b31e91149bf955359759fefdc16(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 170 ******
public static Integer func_f981ee103c84479092d4c17d48cfdabd(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_d0784a2d41694239b1e98078aa248069(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_951d9ea1afc94a7cb821c51b4f9983d6(Integer maxProduct, Integer minEndingHere, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_7771fa92fe5744b489d156a6f3a435fe(Integer maxProduct, Integer maxEndingHere, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_c975167507104c969765659cbfa107e9(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6fbcffa85c3d4fcfb387ef74e453d81f(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0a6bff108b3f42949a6d0975f7e3cdbe(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_97897e68f02646a8b78573578a3c96b9(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_fcd4ebc265bd40d48bc9aca01089a149(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_aacc5c5a010d41faa2611561042430ff(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 171 ******
public static Integer func_ffeda3c4bc014968a88698ac4aa6e7e1(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_c5f272c6a4064e2b9d5d00560dc84f8b(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_d3317c3ebd6e4e588864960a2affffdc(Integer[] nums, Integer maxEndingHere, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_c63d76af5c1c4e04a2d5df143e837565(Integer[] nums, Integer minEndingHere, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_c0936b645ee34e7db85af164f654e3f7(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_9ea88d9c3e3a49a3bd69077abe6e37c4(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_84274be70d774570872d8c605ac4bac8(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_1feb6ed1b79e460abe54798a79cfc893(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_31911b8499364854853fa939dd351456(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_bbd2ad2f4c9246d3b323713bcf44804e(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 172 ******
public static Integer func_c1860b5dfc704d61a688fd1c45cbf78f(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_f53f646d72ed44a8ab628b8fbb96887c(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8568030420794238ae2964d461fcffa9(Integer maxProduct, Integer minEndingHere, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_aced4862015e4a199f878424f7dad284(Integer maxProduct, Integer maxEndingHere, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_710c2379ff3f474ab36814687ddedfc4(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_f16d1b33051b42c28f1953685b7ef759(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_1c4ebe69e797453f92e4c13fa811ca1d(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_8de13778819d499c9b0388586f3e0c59(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_aaf995b927fd4cb79c4e6b6d3b44c2c4(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_8923f540be994b8ca8b146640eddc599(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 173 ******
public static Integer func_4fbe7bafe7c04763924784544232df71(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_a314bcdb94b74998adf562511e9141ca(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_e1eddbe627c34e5eb08e28c280eaeb85(Integer maxEndingHere, Integer[] nums, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_db59e4b5467843e287634450ff4133d1(Integer minEndingHere, Integer[] nums, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_31a35414b6bb4d55b38a44bf394d69e6(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_9ca67ab873c84a958c1b55af5d92b778(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_aa3e145c2c214cebafbc71578ad8b373(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_eae6d157c7c74d7683639b6214f7f984(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_961749985c8a473385bc84b471a2b768(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_5555f2f0445246e7bf37b2700b59ef4c(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 174 ******
public static Integer func_e3327637dc3841ee93800ed25137f9bf(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_e7df9832859b44ee8610d32a02a764dc(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_f1c927e8a8984727b8dfb37a42ceaf67(Integer maxEndingHere, Integer maxProduct, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_8275b0ccdfef42038e34f58af4f267b3(Integer minEndingHere, Integer maxProduct, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_82ec6f3d433346c7a5785cb4cb213daf(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0012314a77a2426ab300e66a11a4fdcd(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_be1715ad06bd41619800d3c3550fb725(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_fb678110eec740e2bc24d184861f0586(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_888279c0a83349eeaf26f76ecbea0c1a(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_cb96fadb757b4db08a6e0f8f623810a8(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 175 ******
public static Integer func_b4121765fe3d4109b5f609ec9ae703e7(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_2c7ec8fd57f345b094c888d30789805d(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_a9f784a3e0b84160b6dd02138a16e68b(Integer maxEndingHere, Integer maxProduct, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_0fd9b59b62604d18b3ffe3b05635e20c(Integer minEndingHere, Integer maxProduct, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_81e34f811af046cd9d40ee2c702be7ba(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_1bf398e58bdb49d790585929fc0696a3(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2638822fde734d93964633eae254a395(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_a7a84f9e669747689a3c0f2b07281f26(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_909957882dd6457ab2efe8f62545bef3(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d3b9aa93d66a41a28c2ffde07d1401a0(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 176 ******
public static Integer func_b71c35bf8b534b0d88cc1a048fe12a46(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8caa374d57574e5d8dee1188d86cd3be(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_473de0b10f5c4bde9c73b6aa07077550(Integer[] nums, Integer minEndingHere, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_30fc5506d3234b98a12f19004fa3d343(Integer[] nums, Integer maxEndingHere, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_adfad942796d4f6cbd8c633fcc135ee3(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ccd45776dc184462bcf3c2f3a97e40f4(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7203f8220d0f48f7bec2ea73af4d67f8(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_905d01b640614a14a07f73de4ad4be4e(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_ac6ee257f1ac434883bd07c1b7f07ff7(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3dca016f7fa04aae8f58964113ee5aaa(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 177 ******
public static Integer func_e697addf2b104323857ce9f57622b6ca(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8d3fb9e72207452c95f26d73997ffbbe(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_7d7d011f7a7b40ae90879946c63e0a33(Integer minEndingHere, Integer[] nums, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_1ddef45196844980818a28ab051ff8a7(Integer maxEndingHere, Integer[] nums, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_ee2203c9f5c1488890a457d25b5a8454(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3ef7bf29e35d4fe5af0438376234fa66(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_391757211b84440499a5bb4ea157112e(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_6e2c514b2d5148f2ac4a6f8e8f9abd7c(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_f9bcc3aa0ead4b56be374c66e4cdf4e3(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3459a067bd9946db95e84375bf1a619b(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 178 ******
public static Integer func_65916ea48287491aa02531553ca18591(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_00bd5bfc3b0445458ac8f3f6ced183af(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_fbab6091df8c4a0eb6901fad30c8e5eb(Integer minEndingHere, Integer maxEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_235c02884ba94e9889dc52f990fc5f49(Integer maxEndingHere, Integer minEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_48cf9a9e5cec47928278cadbc6685d2c(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_5d145e8bdb064003a0906d3440ba3234(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_54ba2fef272c4ac4afce1c1fc6ac08a1(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_5a4fd9a646bd4ab89780b416315fd586(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_aac1a552a5204e5190b89422c7f73856(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6fdeaf48312e4a2fb3605cbaa1ea38d8(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 179 ******
public static Integer func_553a762ce0dc410dab0525b996e41f8d(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_01cb5aadeddc46d88327eb593163aa77(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_21d2761cf3184f149ff3ada2d150fd3a(Integer minEndingHere, Integer maxEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_4d1a40b0680746aea558816fa5b3e0ed(Integer maxEndingHere, Integer minEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_212f0d38af1845d49c83d9c41531524f(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_8fd12247a8ca40cfa6caad5f2785e589(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ed3d19c8d5c5450db888e2996659cfaf(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_a7dc826d520245f289205d82b0943102(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_cd6e7bf4e85d42b0882d4747aab01446(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_f71090b421f4403aa9bccf5862cb615d(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 1209 ******
public static Integer func_acccf54908e74e0791ac2f6121ca418e(Integer maxProd, Integer[] nums, Integer minProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_0ff2c96eec1e403abbf180ce6d36975d(Integer ans, Integer[] nums, Integer minProd, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1210 ******
public static Integer func_5e9df3177b0e4a66971d79b802ee20f7(Integer maxProd, Integer[] nums, Integer minProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_145812b5d3734d70b0cd916cbb3fb3fb(Integer ans, Integer[] nums, Integer minProd, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 191 ******
public static Integer func_9518203a70a8429e961a5a96745e155b(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_4e637a8f6a9e4488be1040abb1584dc0(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_bac0a27f715a4c15b25cdded8fb1b0de(Integer[] nums, Integer maxProduct, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_f5bd1715d78843f38b98fe8930c49a18(Integer[] nums, Integer maxProduct, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_c4e6b091a09b4206a4183968fc2b5b29(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c2a1b480a27d4a1c8de137d065b929dc(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7706079234a24164a1c6d69b2bed41cb(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_695973d6927d4f34bdff13204d272fc4(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_d48caaa679a64f63a334df25a801fc2f(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_a838cb5a14384673a9f8a8c8c82fc55b(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 193 ******
public static Integer func_812da006009a4fbd8e2dd4ddb2caa108(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_9758596ceee8423595379d6d10b08c36(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_c3b8f71eb8b340ce8c1026b7cce8de14(Integer maxProduct, Integer[] nums, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_ff9cc07e085a46b59e1d7b3a9646d841(Integer maxProduct, Integer[] nums, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_5d0dc1592d3e4adc85d4b8e1bdbfaea1(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e6ba81f6050e44b2959f74051749ba23(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0b7b3969399e46dc9a23eeeb93c0bfc0(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_832133b389764758bce0973f788af48c(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_8d4051a086e04090955d69ec9bb139cb(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c1329c6286ec4e44baed5d8c21b5ef30(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 194 ******
public static Integer func_f5e7a1a697f24cefb8b10cac94658a66(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_5103a841370e4ae9aeccb5612ef03b4f(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_92661050adf34d6f82693353349abcf8(Integer maxProduct, Integer minEndingHere, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_8dd28298392d483ea5d7870c79675444(Integer maxProduct, Integer maxEndingHere, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_d536b7c4d99d4301a2c6f1e2495ae6a7(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_119c0cf03cb247dda74d2964e0627ff5(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_fc514375bf4f4083834611957d69bc39(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_9ec47b50c67e4b4297a8625b9227b861(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_375017404a4e45bd908d500b63d4f2be(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0a1c99bc4a324be1b011860a4a209b8b(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 195 ******
public static Integer func_63464e0eb00543c4962adef5018bd1f7(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_2cee0757ca464486856ce22aff8ede47(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_3caaa102f5bd4815888fa62167dd1c12(Integer maxEndingHere, Integer[] nums, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_09d6a2fbc6f148a69f879db2993078e0(Integer minEndingHere, Integer[] nums, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_d67497fb70bb47f4b7509c202eabdcfc(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_bbc00d795200408e94a5e9ce2b32de2e(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_105019e0b3ad4105911919a65e9e3b54(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_f89b1e9d704446e8ba9751f659516868(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_2eb2e20cbf6b4d2a9d024e592d6779b0(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_41f850a7ff6c463f9d41ee2577fd5916(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 196 ******
public static Integer func_06526c1d09644e3a80c0c3c1b95d61b4(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_f9c1cc7daaad4fd690ffd417d45693e6(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_5834f497dc7748618c49aca4edb6c1d5(Integer maxProduct, Integer minEndingHere, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_ea5a80f29f4f4768ab3006c2716c5ca3(Integer maxProduct, Integer maxEndingHere, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_976f407a05644c65ae5f24553796a5e5(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_64dde9022f484954b2dd3210165f3b8b(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f4e1517ce4f64e0580383c201a075799(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_87264586717e468292b31b446f22a5d7(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_3a873e2ac4fa48d08f9fc919957fee63(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_324b882b9cb94a6fb3204f518fdace7a(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 197 ******
public static Integer func_11bdb93bb56a40478fd5f1dc11624182(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_63144a9f54b04250b2cb4c01b99e07eb(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_bf4754531e4f478f918e3212b38d76a6(Integer[] nums, Integer maxEndingHere, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_b1e91f21a6614b4a8f76fb5f23f40991(Integer[] nums, Integer minEndingHere, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_f9ec56a663254597a04b7a36eeec5ad3(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7babad007a4a4f5d9dc49e093052d2bf(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_cebed60048774de48d546ceb9ebf0ea5(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_1d0be78a609f468eae59fd786d4ed607(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_7eb39f6cf7b94033881dbd90c1f73321(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_46abd5ea2043479799e6d230846862f8(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 198 ******
public static Integer func_5ebe2d219ff9413fb701f574fde2b9b6(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_ad1465c1841848a98f5890f191fe8d85(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a560f4f6d3854794919d508a970df7b0(Integer maxEndingHere, Integer maxProduct, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_e3bf17cb5cf542e996358d2b2f9820a8(Integer minEndingHere, Integer maxProduct, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_ef93e653cefe48c189bfc96cf06f945d(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_dde9b52e1a394ae4a172af22c64381a6(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_116b119123fd4821bf927571f6dc8552(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_e42fa9b1479a4763ade70fb4000161c9(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_377217c8fed44ac19c2d18dc30a7597f(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f5b310622d994febae817df1a8e9badd(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 199 ******
public static Integer func_c52679451c634ce29e6b34aa851c6579(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_0ee717d85035448d8b314123f9071486(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_2b4005717e3545ae814b9a42440b1cde(Integer maxEndingHere, Integer maxProduct, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_14c1c8fb5ba642f7b86b08f28b7f76f2(Integer minEndingHere, Integer maxProduct, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_2b3bc6b230d747529bad3fd7b37c456c(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_216d54ec2caa44a489f5d08142b8eb91(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b8c9bb070b2444158ece85d89b5f926a(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_11ef6bf5a0d34e18a1b68a7fd4f5b052(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_7184c3b0589b45d7b1a599cbd0ef4230(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_91f38b973f614e28aad50431339b331f(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 200 ******
public static Integer func_b8f204fa91674b1bb6ccd50fada17de9(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_18fe475e06c74a5bacccacd749ea2862(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_61b31dfaaffe4aca92ff73b8572255e6(Integer[] nums, Integer minEndingHere, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_b85bd508cc7a4ad79bb81a1bd2008250(Integer[] nums, Integer maxEndingHere, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_6ae4ef0e37b740b7ac02cf2eafc39db3(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b4b60450d0af4ff192459f82f77ca68b(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_4317396954474c3a8099f03db27c357c(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_76fa4fd26fdb47eaa3de257971eb0d64(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_92f9cc10e168420a844ae449c6eef25a(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_617b65423afe4f52b7d9a86449e15490(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 201 ******
public static Integer func_482cb024beae474bb682923f5e0073e8(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_84eebf8e90a540f1b0cfe382e09a0f63(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_fa861cb34f1145f6a2a440100bf0efa9(Integer minEndingHere, Integer[] nums, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_83d3c8698e964b3cafcbaa932fa0330b(Integer maxEndingHere, Integer[] nums, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_b4b7212284e4401fa13ac7a29bfff5ad(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_02d2591877f24e68837098d59ae9b733(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_ea10d34e9dc3420588e28c5bcd5bfe0a(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_d989e8cdf76d4ec29cb76b69869e802e(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_169d7cf5ca55433aaf614dc9c6cc1392(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f5227c41914c4acf89695674af2c177d(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 202 ******
public static Integer func_79b50869846d430e94866fc95fdd7ce5(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_c782767f5aba4fb9a25710ce1d86d162(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_996ced3e869f4f2e8709eabfcec6b8f7(Integer minEndingHere, Integer maxEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_434c053a559f4ce897476da099566945(Integer maxEndingHere, Integer minEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_5074b12dd365444289eaa5928e12fbb6(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_fd8fddeb3b6f407fa68baef74535ca40(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_80d00eafc25040fda39a86d5ae9d0e35(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_3271cb20ec0f49878513e6d38601d1b4(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_a969738bc39e40368e4f894b5076aad8(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_86a11497fd9a49e99949e6641e5eca6c(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 203 ******
public static Integer func_1f6f329fed16453593551b37ed8c5fa5(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_7c1db2f9ed6e4fbc928395fa385194a6(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_977b8b479bdc450eb49d61509af4978d(Integer minEndingHere, Integer maxEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_54fab9567c164c0cbf443ebeba49556c(Integer maxEndingHere, Integer minEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_afeaaffee7d34d5b84439e3aa4222f93(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b77b0a5ac4714597abb4d93f4e6a32f3(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_19ceb3593ddd4da2adc47c8009deea45(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_5106468ef6e345c9b257d04531d020f2(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_6f53d53cb50e478990132afbb30c1bb1(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9410b87524a74970bace850efc5cb45f(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 1299 ******
public static Integer func_ca5297bc522549d58249002e6c86c8d6(Integer minProd, Integer[] nums, Integer maxProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_b81f163eb61c48b3bca2f39a578ec314(Integer ans, Integer[] nums, Integer maxProd, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}


****** Cluster 1323 ******
public static Integer func_3fb1a1b578af4f5db46db07366421f86(Integer maxProd, Integer n, Integer minProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_4bea8fa55d4e4f5892b737ad1fd39fb5(Integer maxProd, Integer n, Integer ans, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}


****** Cluster 1330 ******
public static Integer func_364fb9a7893843469056872cd066d49e(Integer maxProd, Integer[] nums, Integer minProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_1bbfdeef3c33408fac904ee439971aac(Integer maxProd, Integer[] nums, Integer ans, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}


****** Cluster 1345 ******
public static Integer func_28fb67027d064238bb8c12e0032ebafa(Integer maxProd, Integer minProd, Integer ans, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_945e10e7625d48b4a8c5832e41b28118(Integer maxProd, Integer ans, Integer minProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}


****** Cluster 1360 ******
public static Integer func_0f358cc07e334be0aca9ddf0cc2a9fc9(Integer minProd, Integer[] nums, Integer ans, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_fd21e17e03c14576bfd98846701be111(Integer ans, Integer[] nums, Integer minProd, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}


****** Cluster 1377 ******
public static Integer func_900874c7713f405db773ec1d7b023555(Integer minProd, Integer n, Integer ans, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_60253f162ad64b85b2ddadf75244be69(Integer ans, Integer n, Integer minProd, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}


****** Cluster 1176 ******
public static Integer func_111dd812351e495ab3d451e1e7306e77(Integer n, Integer minProd, Integer[] nums, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_859474532137485794616e4dc99fb536(Integer n, Integer minProd, Integer[] nums, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 432 ******
public static Integer func_964eb5efeca641d184e22339090f57c2(Integer maxProd, Integer currProd, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_d739e46fa162416d86a2b0e4ceb527dc(Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 433 ******
public static Integer func_839d600c398c420c83f6c24d0a5d3ab5(Integer currProd, Integer maxProd, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_87893f158aca48918633fedc5af6491f(Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 434 ******
public static Integer func_3af8c9a756a0454881330a7f4c504153(Integer currProd, Integer[] nums, Integer maxProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_47eb677cf3c7450ebc86867c07462528(Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 435 ******
public static Integer func_0f57f6b215de46998e99263ee4130bc9(Integer[] nums, Integer maxProd, Integer currProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_68935bdfe26a494bbe2864ab1f01791d(Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 436 ******
public static Integer func_b73e42cf5aca42ac97adefb10d124f3a(Integer maxProd, Integer[] nums, Integer currProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_ae75fd23d2d144519082b80ffc42aa4a(Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 437 ******
public static Integer func_b3a5488113674f7e9321c0dced727db7(Integer[] nums, Integer currProd, Integer maxProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_ce98ac78648a4705beaedcbb10430cb0(Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 438 ******
public static Integer func_f5e65092e6f54f919944f189a13f248b(Integer maxProd, Integer currProd, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_42f720c467de4d22a33feb07e9573f45(Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 439 ******
public static Integer func_485db74507e24ed283ba071fa3ce9b7a(Integer currProd, Integer maxProd, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_ba18c26ff08f4ce1a7712073520d6659(Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 440 ******
public static Integer func_eefbeef685774dc281a53b08ac7395e2(Integer currProd, Integer[] nums, Integer maxProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_4882dad40dd04bae8c5be9fba42dc587(Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 441 ******
public static Integer func_61ad3ee999f8411398fa573342e34711(Integer[] nums, Integer maxProd, Integer currProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_ed75b03551884f93bdf9d80d21c0c596(Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 442 ******
public static Integer func_e71cdf6d2ca742ef88c8119faa4df82c(Integer maxProd, Integer[] nums, Integer currProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_0ac05a381cf341c6bc10b7d0e74e7c9b(Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 443 ******
public static Integer func_ea9dcb1592ac41d884b549c34b3da331(Integer[] nums, Integer currProd, Integer maxProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_d20aa79588ff43e4af9696bee6239ad3(Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 444 ******
public static Integer func_2bf771bb80a048a4b49dba1a2747e4a4(Integer maxProd, Integer currProd, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_57976edd54544b1d89765c328cf01fc6(Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 445 ******
public static Integer func_a56a834553f94184a093ce7dcae4c8f7(Integer currProd, Integer maxProd, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_cc626297adc343b9a8f92d487b134bd4(Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 446 ******
public static Integer func_7fa16f23dd6d47058658c1614b170f99(Integer currProd, Integer[] nums, Integer maxProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_4f163daceef64f0f9dd87806a0e8ecc9(Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 447 ******
public static Integer func_a0076f152dcc4cba8250db2ee779558d(Integer maxProd, Integer[] nums, Integer currProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_9173247916604f82b3360bc9c809008b(Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 448 ******
public static Integer func_ba394cca73b94f6d9863627a81b9be2a(Integer[] nums, Integer maxProd, Integer currProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_a2284f18d5f044169d016435498c5ed7(Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 449 ******
public static Integer func_0e96e9a84c0144359eb8f9e50dcd781d(Integer[] nums, Integer currProd, Integer maxProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_1372db44ccd843d8b7825b1464f17349(Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 450 ******
public static Integer func_1372ee45526440f7a2775dc22f7dd0c9(Integer maxProd, Integer currProd, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_4dea6119db914fa58f2de72e531e0884(Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 451 ******
public static Integer func_021c41772dd649239a7927ddaeb6c706(Integer currProd, Integer maxProd, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_9f2fd7009e6249e0b760f9cfd9440f3b(Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 452 ******
public static Integer func_9aec7dfb0ce64f0c96155916ac7e4096(Integer currProd, Integer[] nums, Integer maxProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_9b149962559f4d1ba60f1512f27d4b5e(Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 453 ******
public static Integer func_3fa5aca1544747ada00be55e99fc4131(Integer maxProd, Integer[] nums, Integer currProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_c0430fa7ab42403394bf7052639d90ad(Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 454 ******
public static Integer func_85eecf80958f4e569c76edf0b48d7838(Integer[] nums, Integer currProd, Integer maxProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_21ce6f21fdd44b5b82b25fb7334509da(Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 455 ******
public static Integer func_1fa63067dca64b93b291a0341b47704f(Integer[] nums, Integer maxProd, Integer currProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_e4f4ecee28684c30bb23269f3660e746(Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1215 ******
public static Integer func_d802dd21bb2847d5ba01f95c6567b8c2(Integer maxProd, Integer[] nums, Integer ans, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_86395474128d40f09fc0b2289dcc96e3(Integer ans, Integer[] nums, Integer maxProd, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1192 ******
public static Integer func_64d928f82f8a46d581c96a182cd8c453(Integer[] nums, Integer n, Integer maxProd, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_cbeb8493f88048a494cb0e204f6c6912(Integer[] nums, Integer n, Integer ans, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1193 ******
public static Integer func_afeb8c02f12b439dad147bcfbec676fe(Integer[] nums, Integer maxProd, Integer n, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_6fd2a1e5af384f75938290b6d33ae8a3(Integer[] nums, Integer ans, Integer n, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}