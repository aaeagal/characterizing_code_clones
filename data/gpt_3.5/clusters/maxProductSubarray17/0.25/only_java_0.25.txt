

****** Cluster 0 ******
public static Integer func_c6d6bef7ac1c4c20ae021bb7bb9141ad(Integer minSoFar, Integer maxProduct, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_c4e24ceda7c04194bdf3cf67a398dab1(Integer maxProduct, Integer minSoFar, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_e61986af93084bffb4ee0a83a3792f08(Integer maxProduct, Integer maxSoFar, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_04d57b7121b44200b64f33dd5e013abe(Integer minSoFar, Integer maxSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_29b205ad9c7e4c9ca0e844699b27fd2b(Integer maxSoFar, Integer minSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_c344ee13525342128b1d6540b9f04e64(Integer maxSoFar, Integer maxProduct, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_149a708b6bfb4b03942c383f2c562c8d(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_60723491de7a4792a7d05d2e05ab22e4(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_0048cc2d244541f292edbdf6611ffc04(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_9dd4d23248444a8c91d1269868fb0818(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_d18433857f9b4f36b25d60612cf3189f(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_b3ab809bd1ea4062ac06f329767c1f91(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_75297d987ee842898624a82ec15403d9(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_331b74b320a44ffbaa6859cb43e89379(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_03fd9e8a16824d73972469fcae7a8c1d(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_de0b918b76bc40efa26777709dbc7d95(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b0005a38d81b4a3f9946448b32426d6c(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_05fd72f9b90d41058eb058bef6b22b9f(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_90f69b6ed58242c4900d79fe9f8a3647(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_1c5754d95d83486d8944ed65fd6712e1(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_344143af73a34093aa91d901545fc58f(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_bfaeca3f916146749b4c19e7ad34eccf(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_f28fad3c1d4e46499f97409ad0fc1d6b(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_ece0f0e19f46409b946bb807a53b9787(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_6d7afa4702a242b390741635ab370ae0(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d86be18d1806430da755c9eedfc6931a(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_51456451302d4bed86f130705da4fd99(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_bf068fa7d3af4d70b8fafb248ee6b7d2(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_23a27b42f5cf47c096ffd5234e552ef3(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_01aeb6d29fce49f395457643cf278c70(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6b9e67235e59414481444db6519d4945(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_e12266c617004f6cbc4365741437f8a5(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_4c5b151092604ba4a977678da00d06fd(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0721e024ec97439990dadcd236c9354a(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_e6a4546b404542f29b0b7b1af675164f(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7e7bf8c68bf84a2d94a55fbc4276505c(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_90e182beba6c4cccac5568759faa8a16(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_1d16f09d80e64ffda379e30abd418ba0(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_b8199c9b36f34fefac96df80f96dc2cf(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_e74b60051ad14b699ea011dcbc36cdc7(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_dd7ea2cc9d78416089b019695da2141e(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_90fb9463942d491da9a168d39fcdb9f7(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_e2c90c8efa0449a3ba6a9354abe20a45(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_f8ac11199a434f6786e1ca36d721865d(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_6b28739d884b4cf0970162cff177ec44(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_6b9dad1df1304ddbae1d2bd1ec42b683(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_2607fb7edef9450199ab405640b29821(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_741b9c2740c94a8a8c7a9d9cc82c699c(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_adae3ced408b42578535ff65e48d1cc1(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_55994a5af3454b61ae3842d6fedcba6f(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0860b59341f6493b9975afbd3c9b95bd(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_81dfd6da9b4446488b489c8b61c8a332(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c36ce4465b3541e5965757ec98c0d265(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fd02f21d87704e9b8a7e31a7ce49fb0e(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_93e5e0124a6b4e778a291289ace93a1f(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a3b68de69b064720b940fcd6d36c0288(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_f4f05473413f448faa923f147a8a58a9(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_61f0529b9d0f4bbc8fd2329ed3878e10(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a32c0a92129c4c728a4a0a1c9e2a8fb6(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6370817666ee4814a629de64d467efab(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 1 ******
public static Integer func_91fe4da3beec4e6881a04abc8700520f(Integer[] nums, Integer minSoFar, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_a2e006f3d6ae497eb017b7ba56bbc6e2(Integer[] nums, Integer maxProduct, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_9165b9f1d56a42079a9f1fd0685f1490(Integer[] nums, Integer maxProduct, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_e1119d0904874662bfb65bdfdf359f47(Integer[] nums, Integer minSoFar, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_cc94adf71ae14dd8bc885bd838dd3857(Integer[] nums, Integer maxSoFar, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_cba88f12018643c2bbaf455bb284ef3c(Integer[] nums, Integer maxSoFar, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_0e2169a247dd41e98210156bfe2a7b33(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_54d9d9836a704d4fa2aa9fe651145833(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_b7aaca915cba494c8102b0f4951691b9(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_e01687f84aae4cc3ab659b60c3150f59(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_ede826b555f9416a9961b384e6230c8c(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_6d26af1dbca1482093442641881c7cb7(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_431ddf96d6f244efb640a2e2f4530886(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_46378f051d824ecbbf2867f1d07ca7cb(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d95b706fa558464d959a4cefd9e957ab(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3a69d210c9114801a24cdcffaabc38c4(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0e1f13cf00be410ba0786e7f1ff9496d(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_52a86458ffdb4a2e869e13fc39dda6d8(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ef6eae248605497bb040bbb17831eb3b(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_7a0a52e934de4d7390fbafcf964a76c9(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_93e63d54107d4a8e9654a98c40249f93(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_92befac906af4fb28999d9abbe290101(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_130fff2646cb4c73a0f888bb59fa7192(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_61fb0ac7ee2f4a109e09b79d994a4cde(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_074adc7466e14bfda186cb8bb170d71d(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_1ab4ed39ea8c498e97411696af05278e(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_dfdc8b0aad044ee5a08806e11ee64f2f(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7db34ac7de8d4a57a1c4577dbff14994(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_046d3dbe8643447384af2cfc19fdd130(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_f5ae1ca8f65b4cd6aa5c6a4f1b3eaa80(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_485af948b846400ba8884b80cb94866b(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fc9758896373459eb9b4fabb17a7bde6(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7fff253d03124a2a9281a676d4dd2a28(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_83ff4f03b35944c1886e0d4eac130d39(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a1c0169c19074e2db060befc6a86d0c5(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_9b50844b75fe4b8f93ab12b04df3596f(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0ba3b45b7a0c4c798e428f9389126a74(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_93c8a21220884e3caab15ad8fe0393b7(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_962c6c6aafb44566b29d948b8a4c780c(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_6a3625d2adda4b718c031e049ceeb3d1(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_f0e51b660fdb4f4e865b992b2ec6a3a9(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_d2d128020abe42dd9569d416c129e279(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_a64cb9ec34b34cb6a163a4f6b0d71a78(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_12a5d9b6d9344ad68be2ae52455711b8(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_42f75510d9a84aabaff32abd3c54952a(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_c95c6220b7404ca7809e6607433db6d8(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_f74f10f15f2840c3811338ef81c50b3c(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_d2b609708ffc4d1288c7021ae43a0ea6(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_c3b7a423dd6a457cb2ee25402b5a66e4(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ae4ee02a46074f8abe39e5e600fbbc51(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_e075964d14984c30ab25c5d2f00e121d(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_097f2e46461c4bc1b4d49151ba0d1301(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d97f0be2a00f451da372c5f7d205ffcd(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6c7539a165594415ae4cdb2fef07cd96(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d8a439e0137c48d2bf82667fa2fe01b2(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d2bc13948f5c44d2829e056a9b2634a7(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_3d50cf0e9cd84a52a9c5a869c0ee7ee0(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_238e4c8634fe4c80b6a59adb78c85c1a(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_44908769200d4d809fe6e84ded87c5ca(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ace66a07be5a430e984219e7f50ec86a(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 2 ******
public static Integer func_850d706418514e94be54ccbf069c97d2(Integer minSoFar, Integer maxProduct, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_b9275c4ac6004fa4950936186fcfe603(Integer maxProduct, Integer minSoFar, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_f2e48b8995bc4ea1bec9817c8ae95a28(Integer maxProduct, Integer maxSoFar, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_a78b9c40bbe143f79b81d5a143424171(Integer minSoFar, Integer maxSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_f60310930d514fe4ac821e3468871ade(Integer maxSoFar, Integer minSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_d6a48ac47b54468dbd52e01fbdadb368(Integer maxSoFar, Integer maxProduct, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_d08388e92d4d45a3bb9999d373f0acca(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_58a5f9c522974fae8e26a5af98dbbcd7(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_090a768394df4ab285e2b4a2330cf178(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_5be5094faa5a406e8a169e163b60deb9(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_5b4666acfdac4bb9b87ec416cd666eb0(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_6177b7852d6f471e86fc27b78305e9ed(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_0c0630958cba4dd4b5690eb0807fedff(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0b407fd8978d4c3d8ee709c0c448c6bd(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_4a1142ef5e4d414699c397f6bd466b0e(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2e8f0557f013422c996f95345b54fd4f(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ae79e6d623ac41eea1b3bc5a99a82f8b(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_aadb11ac05f84b889bd84b3f161addfc(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d9875d8cd3fd47f69aa728a7ddbc94a3(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_cc2c69141ac94d078b17b05af969b812(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_004dde85b30c495db4a9305a8e1caab5(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_4e780ed64ebc400788cf14c5e8c23c19(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_9f00d973d520424a8df5ffba6b8047f2(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_4251bf037ee04684a7276f4974d30f7d(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_adbebe32552c4e8b94612535a4ce09f6(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_4ff1eb00e60e4168a30001d6056c7b9b(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_02647f8387f04974b7e7cd43328b1134(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_50d0f9cdb751440592a255e1f1ec5314(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b2b9daef1041457e99e1db365d2dc12e(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_1e0dc9eba7364b709a11f94bab35dabc(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c481fb6b768842e28525699150f97350(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_bc169a60421b4f0bb26532e80db3ce60(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_1f580cec9e56485cb82ce4329cf74e27(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_45327527146e47e0b2e708e8151b7dce(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2ef80abcf8a345ac8fe8705ea989d401(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_8c5bb6d97c984988aeb37274def9b9d7(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_854d1988763c40ae82365d2c466d0c1e(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_866a8aebd374402890bdc74a608cccd0(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_998e8dfce852413fad3aefa60b118552(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_eb0fa7c8849c4980b7baf298c06582c8(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_763db3b9ab75408bbe2721d50adfd770(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_5700c3c575284002a2cbd54df01d2800(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_677cf9c7bb014aecbad775c6f64ced5d(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_1a814787974744949d007c96911e56f9(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_afa1049cabe64eea99d5496f251c0a58(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_2a5e00b741514a8f8db39bf48a03fd74(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_b29d53a9dcb94ef59d1b8f494293b926(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_12bf7df5c14e4f47b60d1189119cdd41(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8c875a275c5b403bbe2f6fcfab6aa8c2(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ae29450e749d474bba21d8d855614d68(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_4936f816f14b4972b0c36debf7170d5b(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_633a57cc60d04c3eae35d5eefe086493(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_48c92430050e46abba5e0f941d9f709c(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_99edd7a053114966bc8192ff3cd559cf(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_4ba5a0ace44f4bccb1b0b65f095b5a05(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d0b196aeed45459b8cf7af6d3224760d(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_05ac301a5d3b495c99ffafc79e3de4c2(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_911372c3ee54492787c49a2266a3141b(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_e49c32f7b9b745afbbbd9288bca7d03d(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_52357622aef341c1b1ba8be1e44e29ff(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 3 ******
public static Integer func_bd6db77ec01d435a93cd0013d730c48c(Integer minSoFar, Integer[] nums, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_dd53a369faf84d2786f23501fc6eb7ba(Integer maxProduct, Integer[] nums, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_ff447b8ea7ba4b1e8d994f6c381fe3c7(Integer maxProduct, Integer[] nums, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_73552cee06ba44779bf06a4dcaaf87b9(Integer minSoFar, Integer[] nums, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_127c70d380b944ebb560db2c54173504(Integer maxSoFar, Integer[] nums, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_e807dfb752dc4fdaae7f79bfa4f76329(Integer maxSoFar, Integer[] nums, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return minSoFar;
}
public static Integer func_a9270c9091554ccd904f8bd4a370a154(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_5481dea062af4b5ba27827287778c131(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_e7d235a1a741444cbcafab25f962be42(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_490669d9f4ce4167b53c7667d95d807d(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_510728d9b8e1433c84d86cec047bdeab(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_2c7a5e372fc044f4903305a5e3fbd6d5(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMin;
}
public static Integer func_ef2f508d5e1b44f29d67a04491eb8d82(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2a62049ef3a145d988d2271c498efa61(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fafc3714ed8b4ee1b38fbc859d039f2c(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fd2c75e6f39a4acb937b334eeff08695(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d95abc40a5cc45ce974b4425a391ad65(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0e22c086be03440790baf1ec6500651c(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_fa9dc6a147fd48158740c5c6e114629a(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_fb5ed545929541a9a6878254f2bf3f28(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_45617dbd85824b3e870bd56bce3beaf1(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_a6bfa067fec3466187be7a3b5fb2e40c(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_04a654d18327410bace50e4d786e331e(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_c33909871aca4153b30b6b59fc7f5488(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_fb464bd7462846ab9f310849ca294532(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a6e06fcb09514fc2a213e1900f61406c(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_baaf871a08df4a48aaff83d20d5c358a(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_cccc53d7265c4879b006b8c38f825808(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_93958b82415e49b79f241c9d76883cfb(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a1c76a529eb0405b8053a9fa051eba5c(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a1a64a467f0a4cada58f2db6f23081b8(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_35322f32820d45b1a158c8e43dc35f30(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2b8494aee1624bd38aa9ff64833e608a(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_acbda1e3b3954da9b92f94732d11d790(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6bf6726e07464811b67a2e2bb014d96a(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_45c54d9f489342c68ae2e21daae634fa(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7376b96b3fd24923ab17a61dfc74cd3b(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_292a152faa5d4010a8f22ead1612e601(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_b7baefcbac7c47f1854174551a5df9a5(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_d60cb33aaa5a4267825f406b3ecc856e(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_af5cec5bf01342f5aa83ab7d24145238(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_9c7e96dc0b1344a5b31c258a22b005a9(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return min;
}
public static Integer func_e63c98e6dcd541cb8da7648e27e73ef9(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_eff25bfc96bf4b409aa32151918efa7b(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_f2f65e113a73435cb2bcf1c5f131916a(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_1e977da1ebc4497a98a3d1b2a8d6de0f(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_a6625bb556c3482e864f7f9e41ea9b9f(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_226380678c8245c6b1f828b1ae55b21c(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_443ad91b32b54dfeaed3f55ca7eae4bf(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7cfc25428d054a9fa0b6778c69e4ea10(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_4324d09834ca486f8122264753f7e54c(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_cc0c89e08bc243c684aff93864c1f75f(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_98fdc54e9c3e475b9fad07b2b7442d1c(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_38f123aaec6b4676807976e83e322a70(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6f77577bd13d47b48bf29a64ddf9bf8e(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_4a4ecca1c93d4364afd81e07bfd7793c(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_6537622076ba4ba4afada76bbc0b09c1(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a59f34bf308447fdb53973c864dab9cb(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_e4fb735f74d448ccab45789cd07b468b(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0b398e6040464befb71657f24c2107f8(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 172 ******
public static Integer func_3b36a3174d5c4e148626b019f9d4a85c(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_e2fcb320ccb14523982c3ccbf3d4cf46(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_0239e186bb674a38af692fe742ebbf79(Integer maxEndingHere, Integer minEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_87b17f8ad0ac420980fcd0b2e6aa3197(Integer minEndingHere, Integer maxEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_96eafe756dc84e8e90daa5c8e9aa7a45(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_dcee0c8d397c4501871e589492b8d50a(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_24a6c1418dfe4ca08dc3341ddc30fe21(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_925a6bc73b624ebeaec1082d29b1d672(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_c15533f068d542808e3d98e26971d07c(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_79a5a66f6d35493bba823e688f118370(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 24 ******
public static Integer func_5cc08ece1ccc4b75b96cc5b57984a255(Integer[] nums, Integer maxProduct, Integer currentProduct, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_b1bca7e742c64f18bb3d61d581806883(Integer[] nums, Integer currentProduct, Integer maxProduct, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 25 ******
public static Integer func_ada94d548b0243988dda00bae006dff1(Integer maxProduct, Integer[] nums, Integer currentProduct, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_33cc979d7396434a8524bcae749dd707(Integer currentProduct, Integer[] nums, Integer maxProduct, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 26 ******
public static Integer func_83f2c48ec4f946bea104dd2eb32a4feb(Integer maxProduct, Integer currentProduct, Integer[] nums, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_b35ba480881f4fea80b9a139e371ee1e(Integer currentProduct, Integer maxProduct, Integer[] nums, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 27 ******
public static Integer func_260c7d422a2749d681ce9109c57c8d9e(Integer maxProduct, Integer currentProduct, Integer n, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_e92737c68b92457fbe7f140f41222b92(Integer currentProduct, Integer maxProduct, Integer n, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 28 ******
public static Integer func_38bda1a92a594119b4f4b7a98129c600(Integer[] nums, Integer currentProduct, Integer maxProduct, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_0f4d6c2fe1b74e7c993495ca3db3ec30(Integer[] nums, Integer maxProduct, Integer currentProduct, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 29 ******
public static Integer func_c3746d55bc0e4aea8f2c456844cf2728(Integer currentProduct, Integer[] nums, Integer maxProduct, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_206a8c4bb84c493bbf1dfbe507cb7a4a(Integer maxProduct, Integer[] nums, Integer currentProduct, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 30 ******
public static Integer func_bacedd7557b9416b821e770d29cd3c03(Integer currentProduct, Integer maxProduct, Integer[] nums, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_3b683b32a8514a73b4ab1009b9c36aa0(Integer maxProduct, Integer currentProduct, Integer[] nums, Integer n){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 31 ******
public static Integer func_f51bfaeb7e584166851a30c4525540a8(Integer currentProduct, Integer maxProduct, Integer n, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_600e8d397d814cebbee4cbf4b2787b6e(Integer maxProduct, Integer currentProduct, Integer n, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 32 ******
public static Integer func_9779ed634f6a46ae88f62d9dc5ac124a(Integer[] nums, Integer currentProduct, Integer n, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_5b05115535884bd29fcdb563a4ca0450(Integer[] nums, Integer maxProduct, Integer n, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 33 ******
public static Integer func_15fc8d5863f044aea66752a1e42a97c5(Integer currentProduct, Integer[] nums, Integer n, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_20d020b531a94dc68f2ab2d12fb75838(Integer maxProduct, Integer[] nums, Integer n, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 34 ******
public static Integer func_9474bdddff56425382bedfa06bdce0f6(Integer currentProduct, Integer n, Integer[] nums, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_00688ab13fce4bfdb81138b74a0e0400(Integer maxProduct, Integer n, Integer[] nums, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 35 ******
public static Integer func_82f32803ea7641ca90ca2227c00c4343(Integer currentProduct, Integer n, Integer maxProduct, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_823ce16a65bd4e5aa967b628d867cacd(Integer maxProduct, Integer n, Integer currentProduct, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 36 ******
public static Integer func_a4e56e9ce5584421a1138af68bab875a(Integer[] nums, Integer maxProduct, Integer n, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_f1ffba175f6c43fd81498c24321e069c(Integer[] nums, Integer currentProduct, Integer n, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 37 ******
public static Integer func_e922adc6486943b48f7193ef088a564e(Integer maxProduct, Integer[] nums, Integer n, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_08c2fd08c51841b79ba090910ef339b6(Integer currentProduct, Integer[] nums, Integer n, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 38 ******
public static Integer func_fb073afda853483eb4a8c07cd9d0dfde(Integer maxProduct, Integer n, Integer[] nums, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_e69740f925a94979942dd3f4b631e356(Integer currentProduct, Integer n, Integer[] nums, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 39 ******
public static Integer func_82deed38c2ba466ca33b9409cc416ad6(Integer maxProduct, Integer n, Integer currentProduct, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_4f39a9bec3fa46b1b7a043a10f013df1(Integer currentProduct, Integer n, Integer maxProduct, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 40 ******
public static Integer func_0f977032551c4837ae147a9927d019bf(Integer[] nums, Integer n, Integer maxProduct, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_098d57f6d56f47219e9e0fff41396bc1(Integer[] nums, Integer n, Integer currentProduct, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 41 ******
public static Integer func_d3be162f4bfe466fb3b49b59d1ed5f14(Integer n, Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_a25fd6df7cef4653911c22ae34c8981e(Integer n, Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 42 ******
public static Integer func_a6b70febe67d4840a1c14d2f231bc7a4(Integer n, Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_7d3072af71754c4592c5bba1de8afc91(Integer n, Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 43 ******
public static Integer func_80ec60f35a7846209e641e57709d0eee(Integer n, Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_e916b8e7098f447fbf51800d84b974f7(Integer n, Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 44 ******
public static Integer func_1f24495d6bb64e13b8fc42f5123a3a10(Integer[] nums, Integer n, Integer currentProduct, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_a187fd9ce9444ada9bd869688230bbfe(Integer[] nums, Integer n, Integer maxProduct, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 45 ******
public static Integer func_a4bc37d5e6f84f3e8e7ef510167deaf2(Integer n, Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_313aa44f9cbe4190ac1a7d928c8b9301(Integer n, Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 46 ******
public static Integer func_95867e7051c54e4f8098933dec0e2e77(Integer n, Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_b273d382824442759339b72862843f9e(Integer n, Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 47 ******
public static Integer func_8ecf1c6c89cc4fe58fa88a093453a7f4(Integer n, Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_c9be3da94e0e4fae97bd2065df826ece(Integer n, Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = n - 1; i >= 0; i--) {
        // 98
        // 99
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 100
            // 101
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 102
            // 103
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 48 ******
public static Integer func_b380366e48384d7283ab36812a105126(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_c712074bd28b425b87a7dbfe4b8dcf2b(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0095e01ecd2a4ddcb18510bffdd7eb60(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_c4524f756e624b9cac4bd118d0fcb034(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_7aa6bb93bde84f80b9325992138ccbd8(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d2b4f5ea55034c31866ade52b922c76e(Integer[] nums, Integer maxProduct, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_98f718d5b51f4695838d302fa05600d8(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_35cbd41268944c088bbac00bc16a5bfe(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_052f250728bb489fb7c9b536fd6dae02(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ec254049cff64d378e489f54c17f44c7(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 49 ******
public static Integer func_15fa7370ec794eed9e7b48dd11883022(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_13a157eaeb5a44588ecea8e3753474a0(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_6d19bf9879f8447d815b4acd87732aec(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_397b5ea6f2a04cf4891e72905ee4ea37(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c0e4ad915b504cdca1ff8cc845d67e72(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_930ea55380134b94974bde15e75315e2(Integer maxProduct, Integer[] nums, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_6f3e030166c34ca39406de2fdec1a659(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_6f7af7be119b4e99b06edbe1486b12a7(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_f235d16bf93f49e3a8a970b284e75234(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_cef90183042b445fb4b917ffcdfc9d71(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 50 ******
public static Integer func_9e2fbb01490440458385cb3beb089ed1(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_4c35066b62654a82896a22ec76c510bc(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e11a8319eadc49578841cfccbeb8a766(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_435c4e5d44c64b288f0833eaa963cb76(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d9c54f9cf3e5493ab3e9917973a43638(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8a773795386d4e75abf069f424d1e5ce(Integer maxProduct, Integer minSoFar, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_d2dc331d6c7141088a4271dcb230fe5e(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_c6006f7cb0eb43128966afb8ce8e2404(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_2b9d1218500d4caa9fb0b2553b3cb097(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_dd9006fb45f344a89fc9999a60f0e700(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 51 ******
public static Integer func_16f325de199a4b3bb69d0aa48bc8d8dc(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_e5589c76d572427985eda56310f2d304(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_536c3ee52831482389c5b482067ce990(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_915fe85469bc42a7b0bf6e2017e785f7(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_04784027159b4465bba8575470458ca9(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_657e882eadb74278948eba9fc034d5e3(Integer maxProduct, Integer minSoFar, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_bf63681acaad419fa693478599defa49(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_531b7336b5044ae5ab0a7ccc3b880fdf(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_5a96d6aa3e6b44679e0b100d0a0ccaf5(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_1d128e570eb84ee2bcf57d55995241e0(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 52 ******
public static Integer func_fe9663eed09f427e8c00cc503b94e26e(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_bfc1d9b3dcf44d58ad0bccb5c4ee1dd3(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8daa78e01c8843888f4a0c04ade50365(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_c592d07edc504e09bb55a608f2aba43b(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b07026c59f69466aab5e11c6d09f25a1(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9410938e579044c7990fab23b67f73ea(Integer[] nums, Integer minSoFar, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_70f6a47d456947eb80280cfff0934a06(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_6dcb68049c814975b646621dfc9d9959(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_cbb97ac002574007a1a8c2cfe40de3bb(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0400ce3770e7475fbf29f5b9ebb0a3be(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 53 ******
public static Integer func_536de577c371420280595b6b17f48843(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_cda3e266b5ea47b4a72e165f7d8d1bab(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a535d2f1a05a4057b9c81c2f311df943(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_fd8f0edabf2a4cf3ab077eb4a5569fc5(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9098668febbf4e7e95c80dccf26ae9bf(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f633d76413b948868bb71582bb7fea67(Integer minSoFar, Integer[] nums, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_aa758b3a6fe04e6190c923cc70d319f2(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_6f1f50babd1e4ea79021a47ff0565654(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_f63819dde1ea4eebb7842a60ca4129aa(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d5ceaedc0b7648f3bb968966bb6da53d(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 54 ******
public static Integer func_ad70783d75fe4efd806bc0f8d545ac18(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_4057157e08594342bb58c68d7a2cb2c7(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_edc7907e123441bd8faec29e2f1f1f60(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_12b6189228d44392bde64c92b2ac6fa3(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3d35189055f444cc9d6c95505f426cba(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_7f4db1b379ed4664b3d8123baccb2910(Integer minSoFar, Integer maxProduct, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_0adca4de4d7b403393c578e427b54ce7(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_e41dabd8261b4dc5832d2b8f30ea0123(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_9858ea1dd93448f092fcc8068aa630e7(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ad241f0d011b4aa6a83a99bb53c40904(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 55 ******
public static Integer func_658d7a25b5ef40e4a31df7c5033a9ff3(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_f938fef3cc8e48e7aeffeab48cae632e(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3eedb352756144b9b2bdf2dc7b4034e1(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_ace4d764a6e14ff5aa09ff2e47b42fef(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_39800e9079b04dbfb687346ec1fc4199(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b5bb18b42eec44519d5cba7ab6c9884a(Integer minSoFar, Integer maxProduct, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_5784cd612aec47e4acb5ccf87943ded6(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_9253b4930d9b4cc3817d30d2f43780a1(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_bc2765fe49434601833bcee47fd3ea34(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ef8fdb69df3e49f681996464a58f7334(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 56 ******
public static Integer func_f4173a7760a243979f4f0e65c2c60b50(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_58d85683cfd94e35b0d92639d9bee879(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_28223f5d0af84bf9af346c91d35d9d3d(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_081d3fa105e14f68941b8b8cbd032a70(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d15655837e344e62ba027fee4f8c4d72(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0eaa4e2b89074797a265e70242f60a36(Integer minSoFar, Integer[] nums, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_b8a0c56259c646ed94e90d7f97feee02(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_6e5771b4c4414b09ab4f250f4819172f(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_602b70ca1a2f47b0b73cf7bbbaa9f844(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_51f1aa3cd0324fa78d145d06dcb5a631(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 57 ******
public static Integer func_2725c595337940d4a2d334d2457c4eae(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_ca64acec756c4aea9c5805543a3ab81b(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3dd20aeb4b764a5096846d4a9a19b7f9(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_05d91a42bf7b40bba515606dfe49f5da(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c593636954624416a2b4582b9d288635(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d14dd4278157405a84ee2480b4ef6bd8(Integer[] nums, Integer minSoFar, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_b8e4e3b0bfd44d89bedf92839de4dfd8(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_057cdcfce8184657add5f970722e2fcb(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_08188b8828fa46d7a952c0eaf2cb2d89(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3df00dd022534f14b1b8e68aa307eeeb(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 58 ******
public static Integer func_739ebb0e52c2407cbd554fcd8f2f24c8(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_e23fa89c7c9641a585b2fffd3132989a(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b08fbba143e14f84b9bdb2cc1d5adbdb(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_3822370aecfe4392b3257fbd7171d21a(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_15eba89fd74c4d56ac8a3c0ae639797b(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f392449d10e349fe9859ba499aa11c12(Integer minSoFar, Integer maxSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_8d995d6750b94fcab62a20da6067628c(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_297bcac3ca7241b38d678b72c643fbe2(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_4a1ba16cd29b4a959d165d36c351433f(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9b12d26ee3904f9c8aa4d7b07cef6072(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 59 ******
public static Integer func_a9f8841d50f94e7d9868b4f866d33065(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_b750b9e182634daebd0bef4458573987(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_657ca4117001438dbe6dfcf0e4bc702a(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_5852642c031c42a6842b8096e0df675c(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c30f4834989640caa30f5ce27a3d8ecc(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_cacf007d53434d3f9337fe4c187880a1(Integer minSoFar, Integer maxSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_d87e3e149dcf4d67ada1eb262c046d0a(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_9aac7a2b751549338f38a0f84b527e40(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_9e70fb5def52496db5a1450147758b38(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c5f43c3c52dd4909adba09ef882d6738(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 60 ******
public static Integer func_c55562c2bee54457845ce47aca0864f3(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_0c8f197756cf4e19b8f14fa21b7b5461(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_bf5a84681fa8474e9f098b1e6771566e(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_be5ffc60b5f745908db9ee19cce22bee(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c04542645ddb465aa5cf48419471d291(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_059703ae026048f4aab0b061661478d8(Integer[] nums, Integer maxProduct, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_53cbdf2b42de4d029afd8593e5a85663(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_ef6a5bb9fe0e412a809c81475a372733(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_9bed29f009b34d3eab01a50783271e78(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d8a82216dc514825a67f2d334ebae561(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 61 ******
public static Integer func_433e45b4278b4f3ea8def20973c312f5(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_ff1bff118cac47fa9500bb1fe379ba4a(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_50abd74baa4d4a6db5af6e3d9493d36d(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_339f2c53a4a642febc8d808a66215f42(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_82f7903059f74aa7a509a94bd88fdeed(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2b4306ce18984feeaba9e10247ab63e5(Integer maxProduct, Integer[] nums, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_a6b6e5dc151a460785397d2a1ea97d41(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_4267596b02dd4b2aa96e7acdaed01994(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_3183a2f47def4ffb865d611f07b985e9(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_16eaf017d62245ce99f57302952e77ec(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 62 ******
public static Integer func_2ec59a873209451890a660ded83305ce(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_ac4422598c264b92a3070d0598bf627a(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0423b78dd9e34ef597e7eeaf03a8a85f(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_343e2846fe1c48199479a464e4cffb01(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_5f7fd7de69fb4a48afe45d5e2457c99b(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_40406bce1c56497cb033f679ec50e258(Integer maxProduct, Integer maxSoFar, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_45268f6f6e144ac48ba32ba0c2e2d585(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_613c85cc93ca408794bbcad5fd1d8cff(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_71e675dd02f74222b572af041c21e1d9(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_410144e3c4b142bc954e7df2876d4f01(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 63 ******
public static Integer func_3053ae566e7d424c99e992b88d319bfd(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_ea517064125f409a9697bd23b5b8d305(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0ce5e43d29714a02abb3a36189d18e68(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_edd7ed56d5954b98b25d1de20d83a836(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e560a5e125c74c0abd14f5dc8de53c78(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_52739b8b04744ec49c0693525d801b0a(Integer maxProduct, Integer maxSoFar, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_9e07410646d5464e850ded683de717c1(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_11af7f75ab7d4adbbef9fa5e8f9e5bcb(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_bfd9e8698be04c26ab9879356f7c9942(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_22810efd5aab45a49bce03e48883515b(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 64 ******
public static Integer func_5bd118b6ce484597a6fe0076a940d0e3(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_a82bafc204d743b29f3b4de70d5da0c9(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_caa1afbade844aab809acfa4bab78244(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_338feae6611744da9171e69573be3f89(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ab13be9c633540e6b41ffcfef8000542(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ddaf0af7cdc743718b8593c8ee10f41f(Integer[] nums, Integer maxSoFar, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_dc88567d95184d638c545d2ffbc81933(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_1d5e00451e1e45288b718173b4c9d917(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_42e37cae0b4849a0894d0f0cfa67d2d7(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9bbbdf3e6d5e45eba8d54154469153a5(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 65 ******
public static Integer func_a72d1ec033c44d37860d2a72824a54f0(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_c05e348897a44494abc2aa671a1a5be6(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b07d6263b8384a7a9f1fa543c08bf3fb(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_ba6f6193f27c42f6bb1d56793b0966a7(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_4b4f980152c04e8f826b95b3376a78ad(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3f96f9d7e7b643d39fdb7605661223b5(Integer maxSoFar, Integer[] nums, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_a142cccad6b14f999cb998b7ee77ef44(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_e0686bd357cc4986ac9316c4691e30fa(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_6d2d2abe4fc94522984304a838ef8381(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_df9ac862b15b479cacbe89c030144e02(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 66 ******
public static Integer func_a7c781dc6286436ca6459aa8a7fb22ae(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_7d546e9b9930451eaa227945e9d71af8(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ed9ea9563e3b4135a9d18b0c8f592cd4(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_8085ebd519db49aca499668b5e5891cb(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a81f0fbcf1e74dc5ba993f9a38259d58(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_11c8a39f889c4318ae1536c689b92abe(Integer maxSoFar, Integer maxProduct, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_b8b816259c474fc1ab77ef78b0b4e22a(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_062db92fd2d149fc910613e1b266ad58(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_cd3fb9325f91494099f290542424783b(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8318c75e66c846ef9498d4d7f794677f(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 67 ******
public static Integer func_d68ca9d1c4114c2fb6ca672d9633588b(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_6fea222c1c7448259ffe7cd889ac0d50(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_05920bfaffa341d1a8443542066edb8a(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_df954518cf0b4514b6037189bd8b0bf7(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9ca2894605be4fb8b2ecdb45072a9ee2(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_3561eb96dd054b738c831a2f516ebacb(Integer maxSoFar, Integer maxProduct, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_4b059925d6ed458481f1a93b1ba00229(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_02a8941c4fbe409e8883663905d43806(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_633ee1cc79fb4d43b8a4ccb13bc25551(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2b238e8e66514e16a86d5c215cc94e75(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 68 ******
public static Integer func_b4ca5bf9bb78403fb88542973c0c2671(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_e05610d01ac4467a92955f86f3320de6(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_7dba0aa6682b47dbbd14cd0e3b910be7(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_2e3ac2a6797a4d028499ed3fc658a4a2(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_7a782c5f84f54642b7383ec8ff154204(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c0fa7316e1954fcf9ab202b66ccd5b75(Integer[] nums, Integer maxSoFar, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_eb51f51020af4f028bcb83eb5a5b9acb(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_e9f0a10dc0104ea6907a7aa9aa960436(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_241ae2693b114b78bfe782c437a90e3f(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f1ef3c26dc36443696f787a53c978ba0(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 69 ******
public static Integer func_a0a17a66db6f425ebe277574cf2701a8(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_626cb28dfde6476587ce7dd947fcb4af(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a709860510174091a89e47e257a376eb(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_e1f10c86f2d343f0a0a97e3be410bc29(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a2ec504b5adf48818e151649254da0cc(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_4b281620543647dc881475a2a0b06371(Integer maxSoFar, Integer[] nums, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_a9ff881e64dc49d393fdeef81f87038b(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_067767c8b75646b9bc49a1b8a4ef1bb1(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_fa533531d6e843998dcaa30d69ee5484(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_5017a7d745014de78f22c16ea334d063(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 70 ******
public static Integer func_fba963fac6924e57bb5133c23528c89d(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_60bb914edf204105bc3b4406982ff298(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_001906e755d5404fbb64941edd056aae(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_149addd334684218861e06de59d7e35b(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_7e6584c04d8f4d50b17255c02a40998b(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e1309ce255154ec1b258f76ff8fbad48(Integer maxSoFar, Integer minSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_e61a6fc5bd254de1be39f14257f68705(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_330b73414d01480ab35d8ff2f7603f11(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_3b234d81945b46b39da0232a31d53d24(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_71b6d21b50314f57baa546812128ef34(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 71 ******
public static Integer func_e15f754b55054e7db5a6945423c5e6c1(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return maxProduct;
}
public static Integer func_45306ab0f684409c9968d72fa5fc53c3(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_2c95842c54be49b8ab3eb317c35789d5(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_aff728de5f91496bb76edcc5c18a6f65(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_09c6de1775fb410998be1819a6e7aca9(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b78cc78c1bf6444caaac6e2f647aa907(Integer maxSoFar, Integer minSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxProduct;
}
public static Integer func_770dd38f0bb848c1ae920d6480ad3e94(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return result;
}
public static Integer func_00ea85020287414bb4180c037ab6db78(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_ff8591ab60834603861a6c2e1eb21d81(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a2788cf9de6e4f838993686869efe548(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 427 ******
public static Integer func_3ad951b8fdb442148e9c063f28060d8a(Integer maxProd, Integer currProd, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_fb566c59670d4284a310a32fb6e13fb1(Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 1605 ******
public static Integer func_aa78e3503abb494db6394a81d4ddefe9(Integer n, Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_b0ae6400e3bc420494dbd53a8f95cd0f(Integer n, Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 184 ******
public static Integer func_858ef491889347cf8fe7a4c0d4277e4e(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_1750c17de5754251b75574e75d3b850a(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_bd0e24667f1b488b8466c7d2154c2874(Integer maxProduct, Integer minEndingHere, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_e213036bfe1847279f543c8518dde170(Integer maxProduct, Integer maxEndingHere, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_87bee577ecf043cfb17a1898718634ae(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_1c01d0b641714621bbf697326fb78643(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_d4b7a20b7e6d4f00a8948046ef3f4bbd(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_106048a5c2f54a558ee7270c5c0778f3(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_561f7c884f0c43cebec28c2e89d01fcc(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_999f74429fe641eabc17284219953584(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 186 ******
public static Integer func_b27ec08a9b4540f1ac1bcbb95d0edbea(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_307dd630d1524102a98e273b5e03f803(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_ed26f819b7944d27a9dda30846b543f7(Integer maxProduct, Integer[] nums, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_3c22d7f42c3f42f4a68ad324f4fa5d50(Integer maxProduct, Integer[] nums, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_beffd9f9559240299efd9f278eea4406(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_9d369738a65f4038ba74a01a58bb2d0c(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ef6918608f614eeea35b08e78ed644d2(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_2ae9f9f0701e4d06846e5af50e8d3c30(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_417af8dd12ed4e30aecc90351f3dc9d3(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_40d22ceb172f4b4982a9ba7266770db0(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 96 ******
public static Integer func_c522714a274b432c961b0e4a220255e5(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_ee7cfefbbc1e487e83171a94ee43001f(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_861a0c3a953441e1960354818a2b4af1(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_754379294e77435eb02a8e5106832f94(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_da1b6552570f407bbb0797396f158ae3(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_f64f6891f6eb48f582f395dfd8aa551a(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_365bf5f2fe4349219c35af1753654a08(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_381d0346cabd4021a11d83c7d64dea35(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_81e08180941c4744893a4c75a534c16f(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c6412e3c1ae54dd9b222901491dcffdd(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_46f7668ee6274565af0e6ce0639456f4(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_63f64fc400834befbbef88f9ef8e2caf(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_51ed8bdc0d7c435cb99b786e5ab37857(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_a62af5c2f87742399fce4318aba32572(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_e23fc88dc7454d0dbbd0e894b7876738(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_8286c072c7824d90a9b839203b747894(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_1d443191fcad42a49ee2554caa95ee15(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_3e78386bad434331abb94d79ee18cff7(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_b388c4fcd6694c3c8cf7de834542f4b3(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2d23136a786d48d2b618fe022cd163bf(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e61dc72c884f455380fd6e3b3064a9a0(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2e1a40c99f3e4030bc7f4f38206a96c5(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_6a921d06fc0549e5a7ab7b47ef7195a7(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e9cfd1a8d56d46d68fa24acf737b5d10(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_744324246ac842e490deb2a00fef4365(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_acdb8f44299545b88ad1a77019284e50(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_bc325da2e9674de7a09b9f6280cf156b(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_3a3ed6ccb6da48db888bba0b003eebc0(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8ed5da444dbb423a9de6a4b2e483cff8(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f3469d9a374545eb9bf4561d0f7f565e(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_decec2b836cc4b12b5177ce4abdd4348(Integer[] nums, Integer minSoFar, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_8d6afee450d84eafab5fba6d6dc6d02f(Integer[] nums, Integer maxProduct, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_63c2f0293aaa41ec8fc03573c2f80f1a(Integer[] nums, Integer maxProduct, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_caf6d1c26ffb4843bb3f4c5d51d31e16(Integer[] nums, Integer minSoFar, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_7ebd2022e92d4bb3b20604fa43e1027d(Integer[] nums, Integer maxSoFar, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_352f0b6109994fb48dff766222650617(Integer[] nums, Integer maxSoFar, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_d8482db550c74e5db7cd86e05725a351(Integer[] nums, Integer result, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_ec5b34bb2afd4abf9df00ca07202f90e(Integer[] nums, Integer max, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_6c8bf069e2954d8cbbe6f925918543f3(Integer[] nums, Integer max, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_b3ca3119d84c48079e26cf29b70ec3fa(Integer[] nums, Integer result, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_853e20c5e5be479e890a30d78044a289(Integer[] nums, Integer min, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_78c2380f4a21499993f90a56e2fad8ac(Integer[] nums, Integer min, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_42a7ef84da4940d4ba5564055b17719e(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_444933ca123d4a9f91d5773f3434ec27(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_50a8d80f747d4569a39845b8449d8acf(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_6dd41c6b5230418e9bedf1935995ce68(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_d05cc793b7064f95a58bb1af20d928ab(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_d5eef040b4e743608350dffd960cda6f(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_d8c6114941344659987cd6e9ac1cb482(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c0e971debf4448b89bdcc3209c549312(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c678411ff6c647b3b24f00305b24a7b3(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_1395d680c3f54a2c8e680d429f2a8957(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_baac1e368d934a6eb37405f16e58afd8(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_beef9519f3d04585b74a2bce94558945(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_456ed81e630b4565a5f6528f87613193(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_bde1f52de91a49d18a03f79933576452(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e95255e386994d3a886708130ace8ea9(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_087f891bdec04c0f99b2864ceb4d7b16(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_495347e3374849888276eac75a39f9c3(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_102639bb4d7a4d4ca192d3e24c7b1fb8(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 97 ******
public static Integer func_2b50dd6aa91f42ef8c0ee28347f3c2c8(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_b9f41117634a495f8a5df14843edf579(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_6128ca3eab864093b3f1d106a472158a(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_e1897fdc253f4b8aae0cc33c4c511d65(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_fd5a1367f4114eb9be3449c7e1a3f73c(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_c50e6f6fc9d24bebacb9cb9df89166c5(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_f24bfbefa1464506868b39350a3747c8(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8756cffd7426430db476aa0f02600bdb(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e94707567d1e418ebae9726ec7a81a11(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b9447693768c4d658386ec4f90006c85(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2af5bd07334f4fc98301409fe75ace20(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2b4c4faf5fa4424289081fd6ceadf19a(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_54fd2c0006274a3a91791184cf3fc528(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_ade777186da94b2c95290ad3da4acf56(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_d15dd598d37d4a31861a1176c4196448(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_c4b5be85621d4181ad6e18ca1f4351e7(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_70660726c1754217bebf4d86700caa08(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_1bfe8b11ee634f6a84971db597aec8fd(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_fb975e442d594f6b83e5707339ff0cb1(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_cbbc00f4479140f7b776df51fead7a59(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c729abd013d94d2ba23c86b5b49ed633(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7b8f8949ee00481cb93457a22f58b5af(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7609401f2b3d4ec58d66c663babd9321(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_32252c1e39eb4b74b34281ae771eadf2(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_bfec4aa0719041f18d3208806aa7c84d(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9389ee8937b04c908397fdb074bfeec0(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_48e25db85d854d448ddee701bc52558c(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_80b45ba5a6644b8e8cec4fd73c05fcb7(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_eba38715a81342059198e0406e0e841b(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9ffa9f6e7cbd41c1b1316f02d39efa16(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_93f240f3f86b455baf70a54503141396(Integer minSoFar, Integer[] nums, Integer maxProduct, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_baf857db987841b4ab8fccc7a061aff8(Integer maxProduct, Integer[] nums, Integer minSoFar, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_513828c40a5f4feb9ba610685c665246(Integer maxProduct, Integer[] nums, Integer maxSoFar, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_8529993270d240549458198801635939(Integer minSoFar, Integer[] nums, Integer maxSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_e5b7c362fb3b48a084c8134e75f3550c(Integer maxSoFar, Integer[] nums, Integer minSoFar, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_87280d92ed7c48c59b8b33ff32d8e385(Integer maxSoFar, Integer[] nums, Integer maxProduct, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_982671bff98d46c79a2aca3830df8815(Integer min, Integer[] nums, Integer result, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_dcac9f8458344d4aa6281ff5db6cb719(Integer min, Integer[] nums, Integer max, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_ceefab13e67c4e1da519825c87bf355a(Integer max, Integer[] nums, Integer result, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_a25ab59dcdd645fc84acd122879f973f(Integer max, Integer[] nums, Integer min, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_f59118ee36624f7ba7441837dd6a1efc(Integer result, Integer[] nums, Integer max, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_40fb9d4a89224735ac624ec9b47164c5(Integer result, Integer[] nums, Integer min, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_f8a8834caa234934959300a26ee5923a(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_5dee582b51434a1899aa498b5cb6d5f2(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_207977d478694af8b5ecb7a4745dd2c9(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_743876080f324c40ac000711cc15e869(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_c0bfffc6f7e94fbb9d4c1da112a93904(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_954c9dc05f70465c8ca8490aa2cb91d1(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_e456515fa4b348c9ae84fd781ddd4654(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_1072d531daa24358b8b10ea3b05569ba(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2eae33bb820b4b35b4f0255d10164a32(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c483c4fd432742e2a3e47ff1f923a0db(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_64b781548c894d679e67d5ca299049d7(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_da26cde1e93c43abb9ad01d0c34308f4(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e3e599e46f17445f88f819841ef1eb89(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_6dbc559b2a1347cc92e30eaa737dc97a(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_6aa91cf9d40741edb5f7a4809570e341(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e83a456918644464be22fdbc79547204(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_950fd95a3c9a4e46a7ff08432c13fae5(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_934db0e7f1134d1c88bb88873a653745(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 98 ******
public static Integer func_ba3c6b26e60a4919a25f2d622997a81e(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_0856152ef47d4da6bbcaf5e788c2eaba(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_5277725f7e8a404f86c2313f8714c751(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_c6537fcc9cce4a85bb3d0dac3ba4ef53(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_27b90c3724ba456d963f01ff1efb2399(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_6aee32af72c448e0beb5b71029cca252(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_d865842d206b470faaf8114df3f9ae34(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_1585668563774768bb2e5d1f79825ba0(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_30c0e6b7ae1546acb77a0329bff5366d(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_786ab32adea94f649910b62cd891c601(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_be78075560424cedb5ebb27889f92bb8(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_446e1f20a65c475f8601541deb9c48e0(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e74bc82544934c9d876cd42af1c82aeb(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_a521ce9542d04e5d89aa8c4c1ca480d4(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_f30877cda3aa4108ad2eb1ad24d3f18e(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_c49becea264a4074a5e04395c0df00cc(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_f0bca3b7d64c4f84851eef86bd2ea162(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_bfb7327bd6074f72bf101200ae4a2ea4(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_15cd7e978ba54c2797c0191102df6213(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_26149bb0383c430ba80ff8058c0c41e5(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0766ad8a34614efa8fd24cee0224aadb(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_a23468efdf1f41b5896725ffceeb4b6f(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_d9aef2ed5da149f68b9924c3a0fcb64c(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_33a7f834f1fd41ca8054a0a057a8c38a(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_bd5ef6596d044bdbb4cefaf49b6ec635(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c6db4eaf1afe4811a1877ba84a13ae16(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_54d939da745e494f81d92db329d309e7(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_4953f3095ab64b638aedbca087815dc0(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2808aa5dbe2948dd8925f6d46faefb0a(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9fddbe9b2c3a465aa5b7c8220942961d(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_604879c99f87422c946550cfdf870e02(Integer minSoFar, Integer maxProduct, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_6febacf83d4c4267b9612b90ac20869e(Integer maxProduct, Integer minSoFar, Integer[] nums, Integer maxSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_67cdb5fe45d14430840ea2764bce3fb1(Integer maxProduct, Integer maxSoFar, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_01761f4d1b9e430da91ed25d077460fd(Integer minSoFar, Integer maxSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_a637010f07084b82bfe234c57f19fb3c(Integer maxSoFar, Integer minSoFar, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_9ceab33497d54ab6be0179bc2aece67d(Integer maxSoFar, Integer maxProduct, Integer[] nums, Integer minSoFar){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_4ecbac41bde8414884fb072e3e2a7fd1(Integer max, Integer min, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_4d20bf0886ac49c6a9c02f75bf4839d2(Integer min, Integer max, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_07dcc1aad37e48e1adc0a80e0c5748c4(Integer result, Integer min, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_dcd683e00da94c81adf0a0eea00c3594(Integer min, Integer result, Integer[] nums, Integer max){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_a5b3dc945d3e4f028ee70f5a25b51ba8(Integer result, Integer max, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_247355b4357d4581b07712847de2df56(Integer max, Integer result, Integer[] nums, Integer min){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_d1d2c0e0f0f0426b943fba7345941d70(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_995bf6113e424696ba166ff9d721bad3(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_95ba6e49de3c4b7f821b5c5d0d3e89cc(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_fb1a0c26b1494d33a6d2835015639fb7(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_0678d77c25bb4f49a1238c7644e890aa(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_3e94704f2dd5426e916e5b3780e58180(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_ee9e045bdb26430c977cdde9a24fc803(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8305e3871f5146deaa94b34789d8d7f7(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_29f0419322304016a6dc1a40ca4e6ec3(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0b3fb1727a22441eb3515109f8b5be49(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_3b248b02ac5946b1b31f3763f29b1a50(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_35b299b8747749e4b13de19180ff9ab5(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_3e6dc4d9cc044731800173b663721001(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_bb43135966304b71bc8def7d0c6b9323(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c0f4760d21fd408887812ca9f2a035dd(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_878128bcc4ab4e7683357a355c2706c6(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_73f725173e71425eba8850b3bc344d1c(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_201e0c0311a24f22bd4814f26f31e577(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 99 ******
public static Integer func_75da346acae5449597ab0235191f3ad5(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_710bd63ede994bfd8ffd4d002ec7e9f0(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_44aadd53c2d042ca8dadca216802dbca(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_9a68ede6eedd43f8aaa9ab0cb43dbf8f(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_710f38fcde914121a459d303cfd9f56f(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_516a535052ad4c37bab587673ab50597(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 107
        if (nums[i] < 0) {
            // 108
            // 109
            int temp = currMax;
            // 110
            currMax = currMin;
            // 111
            currMin = temp;
        }
        // 112
        currMax = Math.max(nums[i], currMax * nums[i]);
        // 113
        currMin = Math.min(nums[i], currMin * nums[i]);
        // 114
        maxProduct = Math.max(maxProduct, currMax);
    }
    return currMax;
}
public static Integer func_c99f87ff05c34cd197fa34d55b6586c9(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_78750b154b3f49c09657197e2c0c72b1(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_25f3f1fe9b1240bb9882c82f8dcede9a(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_859edaecf9ab41ac89cea9744639af2f(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_4c295cc14ee7407b943f4bee7a8b9d0f(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_2781912005e3408b923c8170520bde5a(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 148
        if (nums[i] < 0) {
            // 149
            // 150
            int temp = currentMax;
            // 151
            currentMax = currentMin;
            // 152
            currentMin = temp;
        }
        // 153
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 154
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 155
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b316ec24cc264cafb767dc0203c54516(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_9eb8484078514379834aa41ed0bc6fc8(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_4ba2b99151134b1ab6e17764afd4e523(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_109855305e404d168bea5eec2aae9a00(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_bb2ca0c7be4340a5922a3ac128f0001f(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_ee7d84af69764cd48b559b680d378f59(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 172
        if (nums[i] < 0) {
            // 173
            // 174
            int temp = max;
            // 175
            max = min;
            // 176
            min = temp;
        }
        // 177
        max = Math.max(nums[i], max * nums[i]);
        // 178
        min = Math.min(nums[i], min * nums[i]);
        // 179
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_eb9ff227b00b4ef789ad8481f9193a4e(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_76960bbbe85842d1b347836f32a786bf(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_3ea384c45b2c40d7b5f707bc2eb803d7(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8765b1b266424adaab95d9bbd14020b2(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_fe38a9587cb848ca92e0a64325b423f1(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_995b424134bc47468c0dc32fb7a6d524(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 183
        if (nums[i] < 0) {
            // 184
            // 185
            int temp = currentMax;
            // 186
            currentMax = currentMin;
            // 187
            currentMin = temp;
        }
        // 188
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 189
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 190
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_d1ffab8415634aee8ac532dede706086(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_293f334f091149cfa209c59b5ff4a198(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_01f05cd2951e45c8923a1c866dbef14c(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7e4200726bdd4385848f1b052bcb005b(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0f318cfedc76485780dc078d6e493649(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_a0effd5a3df8495ca132d5bc42b6ecee(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 210
        if (nums[i] < 0) {
            // 211
            // 212
            int temp = currentMax;
            // 213
            currentMax = currentMin;
            // 214
            currentMin = temp;
        }
        // 215
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 216
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 217
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_865cb4be81e942f3a295ca828c272d0e(Integer minSoFar, Integer maxProduct, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_e372ed3b50024e56a99836e53810710e(Integer maxProduct, Integer minSoFar, Integer maxSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_4126c9d03c6b4af8bf00f440c0e326dc(Integer maxProduct, Integer maxSoFar, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_3aab42901cd845f3b3f48f36f71f0e10(Integer minSoFar, Integer maxSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_b62a27c613da4189a2f205603aee79c2(Integer maxSoFar, Integer minSoFar, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_441797fc8618477fb11317809745e362(Integer maxSoFar, Integer maxProduct, Integer minSoFar, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 4
        if (nums[i] < 0) {
            // 5
            // 6
            int temp = maxSoFar;
            // 7
            maxSoFar = minSoFar;
            // 8
            minSoFar = temp;
        }
        // 9
        maxSoFar = Math.max(nums[i], maxSoFar * nums[i]);
        // 10
        minSoFar = Math.min(nums[i], minSoFar * nums[i]);
        // 11
        maxProduct = Math.max(maxProduct, maxSoFar);
    }
    return maxSoFar;
}
public static Integer func_dbb4e3f302014fab81300433e483f214(Integer result, Integer max, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_faca82457af94270a003d6708734012c(Integer max, Integer result, Integer min, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_c5d24e96d3d646a88a6203027409458a(Integer max, Integer min, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_1007ee71cb084ec897465e0514af5f6b(Integer result, Integer min, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_f5a66c4e411d47dbb1dbaa3862538e52(Integer min, Integer result, Integer max, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_43285f5836374ade8b23a0ae5cc6e998(Integer min, Integer max, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 13
        if (nums[i] < 0) {
            // 14
            // 15
            int temp = max;
            // 16
            max = min;
            // 17
            min = temp;
        }
        // 18
        max = Math.max(nums[i], max * nums[i]);
        // 19
        min = Math.min(nums[i], min * nums[i]);
        // 20
        result = Math.max(result, max);
    }
    return max;
}
public static Integer func_027cbae97c4d49bd902ff49c3126e21e(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_b819dd45f29d4285bca2fa3ccb80f1ac(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_924328975ac84f74b0d2f73ebc8a4ec0(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_f046d453636b485c80ef49f9d7458b6d(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_0acddf23ef4b464ca2e80e6dfa2ecf31(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_2292f52fda844b3ba1f5f6734a0e4f1b(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 24
        if (nums[i] < 0) {
            // 25
            // 26
            int temp = maxProduct;
            // 27
            maxProduct = minProduct;
            // 28
            minProduct = temp;
        }
        // 29
        maxProduct = Math.max(nums[i], maxProduct * nums[i]);
        // 30
        minProduct = Math.min(nums[i], minProduct * nums[i]);
        // 31
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_0e695ba4f3bf48fa8696abf33c1c94fd(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_eba682ce37ba4f7a8a8d0fb949e578bf(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9ff97bbde0dc4918bbd1403e5090d471(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_c2c05a6ae13041588087e9a66f0c8bb7(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0abf2ba815ec46219e374703a88e28d7(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0c38035ea2af4bac8cbe32dad0a9e3e3(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 57
        if (nums[i] < 0) {
            // 58
            // 59
            int temp = currentMax;
            // 60
            currentMax = currentMin;
            // 61
            currentMin = temp;
        }
        // 62
        currentMax = Math.max(nums[i], currentMax * nums[i]);
        // 63
        currentMin = Math.min(nums[i], currentMin * nums[i]);
        // 64
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_71a5fc6e2ac743aa98b1f3f2eb68391c(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_6e5fe7a042a542a4b29ba88d312dd6b7(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_38d5151d685a49c59cf4a6ca3938dea6(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_918498394dd94d899a6099801a461422(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_901ccc87674b424cba484732e0197e9b(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_db2f18f0c49e4a2ebc86e066a38d1dbd(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 80
        if (nums[i] < 0) {
            // 81
            // 82
            int temp = currentMax;
            // 83
            currentMax = currentMin;
            // 84
            currentMin = temp;
        }
        // 85
        currentMax = Math.max(nums[i], nums[i] * currentMax);
        // 86
        currentMin = Math.min(nums[i], nums[i] * currentMin);
        // 87
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 120 ******
public static Integer func_4d2f662be7724369ab9a4635155d6db8(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_226d7da80cbf402a8ef67de1ffacbc6e(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_1721d888da5e49fca7f26a5ef35da7e6(Integer minEndingHere, Integer[] nums, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_f76c738acfcf4a3cb66891aa79fd2e3b(Integer maxEndingHere, Integer[] nums, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_2d246922c68f464bacf05acfb9b0196c(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2a10e001079c4097805991264f95fcad(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_8719f99b1dfe4d96ae6a22aa0d8dab8a(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_bc5d2089c5594804a8ad0b00254803d1(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_d9e6e2f5581e4bcd906e6b46bd03e387(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b5e4e89fb808445385d5d22a4cbb593f(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 121 ******
public static Integer func_2334ca4ebbe84fb7b7a176c92a5112d3(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_9fe8ff929f29464182959f11359caa20(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_6b8bded0cdba4097810f22369e685d98(Integer[] nums, Integer maxEndingHere, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_8197a70a5bea43afb756167692ea1d40(Integer[] nums, Integer minEndingHere, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_0e81e36469934dac844630f7f1ac8cf0(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a4655aba755440f7b0b37f535277a659(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_1c5797ff63bd45fdbb4e738152a4d332(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_43cb6f5a4f1d4c10a000b629ae9d1bef(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_f24374438aa24cee8393836d89d68743(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ba908c6b1ba140c6a4ea6e64b08a4e8d(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 123 ******
public static Integer func_58eaeabde7c940059d40af9d27e90345(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_c285427e74404f9bb08efae9583caa55(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_ccf15e4cd8f34b75b4732d2173a97a05(Integer[] nums, Integer minEndingHere, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_d7af84bcb2e944049aa34faec9ea4ec8(Integer[] nums, Integer maxEndingHere, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_00a9ba38b3dd4b1a8a7d1dafd063344d(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_346c64ef8b864dd98afc493609e85701(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0a9beaba203e4e8f83db1879a5925e64(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_95a6210ed4914255a9684beb1b33f7d1(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_0fefe36577154638a2287c6d3d55e679(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_a4af09ef89de4d3484c089e1b9ebe42e(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 124 ******
public static Integer func_a14b9da9cda44884b325ce79361fa66e(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_34455c481b4640f7bf9406f41d82a031(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_f3f04c08c02544f993736ace2cd9c9cd(Integer maxEndingHere, Integer minEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_77133273ecf24403b36c0789d94c3042(Integer minEndingHere, Integer maxEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_f2f4affbf8ef48c7b7d0b5bb18f43334(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_5450dba045aa4854a29aed23ec567f45(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b9eae2342a3b4af2a787705ff3403e2c(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_9f7c5c43d14b4873a7817909f22999d5(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_b7f8f3cc97634bcc8d653e1880ba166b(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_44e0537b8af3430695e5eba34506b78f(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 127 ******
public static Integer func_b6271682eae0458b984cb7c38024d15f(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_3dd144fd0b18478e9eb69067f3e001d8(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_9331ce2fd64449aaa3072d2779094978(Integer minEndingHere, Integer[] nums, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_c882e67c2262490488bc019344640095(Integer maxEndingHere, Integer[] nums, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_57c13a2caed444d6afb45c9fc0ebac48(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2758bc420ee84b88bd1b502a66f4646b(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_cb8647f1489745a787fe3112b72a813c(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_7418dfcf77644db8a08a8bf468dff593(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_50264044405547a294e9c4cfdc8d3fc3(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_52111649f7b740df86f183fb1bac75e4(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 128 ******
public static Integer func_de0e4041fd334e6dae113ea7faf682a0(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_873da27b5dd34142a9adf3260a84c8e3(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8d56f1a373fc4528b8e4444423f3236d(Integer minEndingHere, Integer maxEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_e339419e04244b978c5bfa2d01ba1cbb(Integer maxEndingHere, Integer minEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_50dde8f4b2044f29b7a7517166c955e7(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_81acd943e1c4412a8475790420d10f23(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_2506b658dc3340dda43af338a05ec3a5(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_b366845d2e41484c9f434afc9cad738a(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_94c62da632b8404fabeaa529ae28c0de(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_01e18eb4359f4ca9a2b70b933c43afb9(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 1153 ******
public static Integer func_3910c10213b147e4a5b9756b0bbc5457(Integer ans, Integer n, Integer maxProd, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_b1489206a0f34372bb271b7ef1816da8(Integer ans, Integer n, Integer minProd, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_b2fbb4c1423f447983bae9ca71804ac9(Integer maxProd, Integer n, Integer ans, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_fc4b8491daf14ada9adbd8d7ed8749f0(Integer maxProd, Integer n, Integer minProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_4d3c5f9d647d4f02bc43f9a567b3c9cd(Integer minProd, Integer n, Integer ans, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_ab8924f27cd3453b85acde4f49fdb449(Integer minProd, Integer n, Integer maxProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 130 ******
public static Integer func_8805aaadb0f6457c831c5d7ba5bb0530(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_c5621cd34c2a47eeb78ff7938957df44(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_9ffcd430ffe04b69bcda6ff769f196bf(Integer minEndingHere, Integer maxProduct, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_970ce1e3da62411cae232d87a4ac3e19(Integer maxEndingHere, Integer maxProduct, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_72693dfb31684a79b660139353e68143(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b03efcaa740d4b2c8fe66c6e8225ebd1(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c688d7873cd34e42ba71760a5e02d694(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_84c85489fa174d7d9f382fafd0905784(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_45cebbe3465f464a895d1ae6d8858d03(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_14e99d4ab0ff44819f5cd30870b75cfe(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 131 ******
public static Integer func_80872242000040c09a2d3ebb3db8af0e(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_56cac04e767b40ce8a7eea33ba19edd3(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_1a9ddf41bb9b4dd5a0bbd36c8d53cf5c(Integer minEndingHere, Integer maxProduct, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_b41136a08341493f9cfe4aa8f406c1dc(Integer maxEndingHere, Integer maxProduct, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_b34f79c2775e44c0a5f53da378c88f1b(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c2ec771bd1e14617b268e0f075430579(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b2ac2b9bc14b413aa66ea1187ebb5f86(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_1c3ac6092a4c40fa97b3d24d354a358e(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_32e58738f5bc467f9938c4317881c078(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_7f2bf2a59d374cf08214f36cfaa3e7cd(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 1156 ******
public static Integer func_191463713dcd48b2a75930f3e5bdafc8(Integer ans, Integer maxProd, Integer minProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_af759e2832ef40c9ac1b5dd1bfc291ac(Integer ans, Integer minProd, Integer maxProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_adf8ec63c789458e9e55dd07f2d11ea5(Integer maxProd, Integer ans, Integer minProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9b22ca1a1d404da28e2b8f706f3b177b(Integer maxProd, Integer minProd, Integer ans, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d75747104e5f4da9950f81310104913d(Integer minProd, Integer ans, Integer maxProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_aa9d175aed6a48c699aaa9d2d5f61a27(Integer minProd, Integer maxProd, Integer ans, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1157 ******
public static Integer func_3b6ee0e03f794fb5b809b5fbb5dabe76(Integer n, Integer maxProd, Integer ans, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_b32dcc06bb69449789574fe563860281(Integer n, Integer minProd, Integer ans, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_0cfba1405e714dc1b66b7ce1cc88c416(Integer n, Integer ans, Integer maxProd, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_0c489743bb3f4f9ca3b69b55ff694189(Integer n, Integer minProd, Integer maxProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_cb9a99c12ea344f5b672d89ea583e2d2(Integer n, Integer maxProd, Integer minProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_7b1a3896d5464bdaaaf77f0361825296(Integer n, Integer ans, Integer minProd, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 134 ******
public static Integer func_75db9c979680439c8bd858fad1c70d2d(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_f2ce121d9f6945e8894a1ad9bb648d47(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_8662dd4eba29491ca806b24daf0c0a3c(Integer[] nums, Integer maxProduct, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_c737beb1e39d43c8a5cb68757367b984(Integer[] nums, Integer maxProduct, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_01a75d7285e84a769e03ff88fd897fff(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ffe04db82b6044f198a4d10c3afc25f0(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_b592a98f4fab4644bb5d024f60bc5b13(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_a3166371b7b14402b22e7113378841c7(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_a2ac3651884d4be79486f4ca38b771a3(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_c6c88dc6881c4efb8afa26d6e062dff4(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 1159 ******
public static Integer func_ba8d53afc047444e8c0201eb80cd6b64(Integer maxProd, Integer ans, Integer n, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_715562d3b7184673b5def4a5a7a0bf95(Integer minProd, Integer ans, Integer n, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_3604f05500da490b9660b96560e01209(Integer ans, Integer maxProd, Integer n, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d6724b68084a462cbda6ac6aa2390185(Integer minProd, Integer maxProd, Integer n, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_44eb9898338d4ee48464d953546bea86(Integer maxProd, Integer minProd, Integer n, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_a6542aac6ac54e95bd654a5cc7d21725(Integer ans, Integer minProd, Integer n, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1160 ******
public static Integer func_4a0701bb52524d7787881b73a8f5ffe0(Integer maxProd, Integer ans, Integer minProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_0a63596f89b34a9d8c9aa7819f33e635(Integer minProd, Integer ans, Integer maxProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_a898adfb25e64705bb51e9adb29ddfb4(Integer ans, Integer maxProd, Integer minProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_f82f7095c2c4432a898988d10ac9f568(Integer minProd, Integer maxProd, Integer ans, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_726fbacb472a43108a48218f4364a435(Integer maxProd, Integer minProd, Integer ans, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_21176455ffd84ba887f5082fbcb57463(Integer ans, Integer minProd, Integer maxProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 137 ******
public static Integer func_77a3578ec9aa422ead4b693de7a64334(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_b5adca7a82b64d0c885f8eb212597d54(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_4752a4842bdb4e50b93d8259a4e79e2f(Integer maxProduct, Integer minEndingHere, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_3e3f72817de84b358adcc06d0bec3423(Integer maxProduct, Integer maxEndingHere, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_500bc671161a4bffab8533edafb8c136(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_02a74bb9cd7a45ab90fc6e7d486140d0(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_ecfe0bbe4e5e4c819b1acfd66da4a921(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_f4a8eac9ffee40a8b43e33223229d921(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_5bc8d17f4b6a4e5ea493c3d4fa8097ec(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_0ca4b5fb678d4eb8a520060da9e2be34(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 138 ******
public static Integer func_d4210e0df6fe4f24a71539000cd30fe5(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_13199d8121114f6eb716d7af25cd474f(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_d6e72a2475914ea482887336092f85de(Integer maxProduct, Integer[] nums, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_b6318313dab745e4bbb92a84a2661a5d(Integer maxProduct, Integer[] nums, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_c2ddc2056e6d4cd18277a66f4cd46e5e(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_d1fe48498ac8462498fddd9680b57cc8(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_5222f77ef9d5456cba274db39f3af740(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_021e0ca087fc4cbc9d67fa9507809de7(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_8e0355a1178140f98b4432169619e020(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_625707ee3ee646538f068e3115265543(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 1163 ******
public static Integer func_c8b42b6b721c453aad0f542699d40a9d(Integer maxProd, Integer n, Integer minProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_e3ef274cbf704059b61c7ac9141ca407(Integer minProd, Integer n, Integer maxProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_0a734feba9044d05b48ab2338f48ab93(Integer ans, Integer n, Integer minProd, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_78411815f4394158bd3883e58c71391a(Integer minProd, Integer n, Integer ans, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9bef0d1fce6f4e86958cba63fa9622d0(Integer ans, Integer n, Integer maxProd, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_854086d144f643f38fe773890d374ce3(Integer maxProd, Integer n, Integer ans, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1164 ******
public static Integer func_0a97b1e5cf844cb2b99d19db3c2bc0dd(Integer maxProd, Integer minProd, Integer n, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_37e6dd48173d44eab7aa314ae7baa5b9(Integer minProd, Integer maxProd, Integer n, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_d28fbe66dc244f7993dbc11b372d0e07(Integer ans, Integer minProd, Integer n, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_685326b7e099427d9db073c863fd1392(Integer minProd, Integer ans, Integer n, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_c4725c89f49b47df8eaa07d47af234ba(Integer ans, Integer maxProd, Integer n, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_79055dfe056d4091a662a69a1d701612(Integer maxProd, Integer ans, Integer n, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 141 ******
public static Integer func_65cd8fc03ae9425b9105e2d0ea5da471(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_1c566a24eba443e786e609a8a46e070b(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return minProduct;
}
public static Integer func_e5513a1342e549398acbe8f9c1931d1d(Integer maxProduct, Integer maxEndingHere, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_1155fa13124146e993ac25c8dab508ae(Integer maxProduct, Integer minEndingHere, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return minEndingHere;
}
public static Integer func_73b244f2368841f1885d88635ef5d1d4(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_9bd25af5f41040d1bac253536e07e6f0(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_740fb87b91ea4805a8a56f74e0c1e359(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_71c1d3b957ca4b42b194a60cd74e0a24(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMin;
}
public static Integer func_342a14fe6c9f412f826d7b6eabab0670(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}
public static Integer func_29500bb37ec44f799f4a9648a4d6df89(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMin;
}


****** Cluster 1166 ******
public static Integer func_1a4ff66e313c4aac9481d4ba5448232d(Integer n, Integer maxProd, Integer minProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_d6df77e8693246aeb22dc0f7b1a768f4(Integer n, Integer minProd, Integer maxProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_93ace91c231f46a8967b0f364249a4f0(Integer n, Integer ans, Integer minProd, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_28f5aba2b49e450a8a09f9f87e27e0a9(Integer n, Integer minProd, Integer ans, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_a090536fddda40b5b9788b2b4d202320(Integer n, Integer ans, Integer maxProd, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_068e3d6f90c9452881cbcefe32114820(Integer n, Integer maxProd, Integer ans, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 143 ******
public static Integer func_2189513fe3614e19b8dc3b9d722117a5(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_4aff353367124fb5bf14851896bc40ac(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_ab86ffbd2a8c4a488543cc98b20da2b6(Integer minEndingHere, Integer[] nums, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_8a07f63ca4b2405ba4f88c495647bf6e(Integer maxEndingHere, Integer[] nums, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_0f568d161096445b9612aea03842c335(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_516b8f617f204c4b90da3eceb4d1399a(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_332e14540a314092ae1cdbd8301d805e(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_5b944f04d0704ecaad007143cd92b77e(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_878a41bb647b43b39740a61202915e16(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_7d2cea92aaa545cb8b39c7fec18c5f8e(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 1168 ******
public static Integer func_85126ae5282f4e63a5b8001c250b377e(Integer maxProd, Integer minProd, Integer ans, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_498280c6cf8a476a817dc4b6951cdaf8(Integer minProd, Integer maxProd, Integer ans, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_fcf90fd24b034530bc227bfb666eb1aa(Integer ans, Integer minProd, Integer maxProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_3231f96bc55345c88b8eac7dd59163c8(Integer minProd, Integer ans, Integer maxProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_ca09c575d2cd4ab3a261915c403d43e3(Integer ans, Integer maxProd, Integer minProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_7dd7e21be65c438e8b1d10e9142f0e3d(Integer maxProd, Integer ans, Integer minProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 145 ******
public static Integer func_c9c7c79960ec4e31b94105567d127381(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_bc40888a8e044bd8ad298fa6ad15d4be(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_1f2381dec13d43fca70e6b9b6b5a4d54(Integer[] nums, Integer maxEndingHere, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_38ce602933c8456489a4274d1d8ee50d(Integer[] nums, Integer minEndingHere, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_3658ffd052754cbd864824b059066f61(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_5d205bf06d9f4c3c869e7b7a2f80a72e(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_865c8d1d9b204764a69ef4cd0320059b(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_9803490a5ae14501820910e9a92423e0(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_8d8650300c8843f486ec1effa1f5bee3(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_65e7bc736a8143e78e37ac5338e59db9(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 146 ******
public static Integer func_fae1d353ca9b439a9424344c6398b2f8(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a67b839367ca40ae9c56291c26607f23(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_ae08f30d20434a36b3b67da360b2234c(Integer[] nums, Integer minEndingHere, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_ffb65f2810c7497e9ab916572c650155(Integer[] nums, Integer maxEndingHere, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_0d63781c75934608961d4c46f25cf5fb(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_4a2a49b16a154f9482681fb489a08c84(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_67a36797ae3e432f8910d196b93ce4d1(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_1b9c19d79be34806a0f267adad173115(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_a37a61c8940a4252b75a7e6f1cb6d678(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_067fc003f9804a1e8d80cd6b4917f069(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 1171 ******
public static Integer func_40b0da45f7cf47b88ae8c8d3815acea7(Integer maxProd, Integer minProd, Integer[] nums, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_8b96f44316e54b44acb73147aa7e5421(Integer minProd, Integer maxProd, Integer[] nums, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_c793a516716846b89d4ea795403150ee(Integer ans, Integer minProd, Integer[] nums, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d2106404566149cfb7bc732ed815c933(Integer minProd, Integer ans, Integer[] nums, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_ebf22aaa1370461fa4da23f8c1cd836d(Integer ans, Integer maxProd, Integer[] nums, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_4c631d929257496e8ec34d4a48e12a98(Integer maxProd, Integer ans, Integer[] nums, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 148 ******
public static Integer func_30feb439ff9146faab140f87d98a1adc(Integer minProduct, Integer maxProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_30bfd0a7c67948dabd4d187b76465bbc(Integer maxProduct, Integer minProduct, Integer[] nums, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_fb53968879ca4b868b4a420714cfb8c4(Integer maxEndingHere, Integer minEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_67ae23b270b94504b0881a7e9c8c6e60(Integer minEndingHere, Integer maxEndingHere, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_fbc9b4f8e8c8426ea1a6a52454c839c5(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_8ab04ac768a540ebb5081c42d8236fd1(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_72c97d32502c4974901ed2dc0a012e54(Integer currMin, Integer currMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_9c78cf04ffd84c8a85834fa915f2ac3c(Integer currMax, Integer currMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_e05d68693df849c99db9b6e45d8c97b4(Integer currentMin, Integer currentMax, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_bd5e115cb04c4ce2a23a209c790649ca(Integer currentMax, Integer currentMin, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 151 ******
public static Integer func_3365ff6166164cf38969fd99adb296c1(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_6cfa8f9e1ec84fbf8d5d6a52dfb99826(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_b15210e6a3004d999f56d11fbd26f4f6(Integer minEndingHere, Integer[] nums, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_f6fc9c986e7e448c88ae9e80564d28e6(Integer maxEndingHere, Integer[] nums, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_723dd99a661749bb8ca6aae47330629b(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b5966ebdb7904b7d9281df09ccf18f35(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0d20b6ad518f4302a9a0c465a4e65c87(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_638abe57075340e5939580b2f0a74e84(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_39a805e0168f4fffa72610dd75c84496(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_b9d914245ef944128df38be633a9f155(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 152 ******
public static Integer func_cd7e069858b6490886cb104db6bab470(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_91ee4efd85694464be171191d8b8c981(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a9833ea2aeda4a5fbff3cb77bf9fad1a(Integer minEndingHere, Integer maxEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_3cea03c7304f40b28b3150e635522a70(Integer maxEndingHere, Integer minEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_620768605047443e9c743d4a803e665a(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_1b75dc7a056e49a592fce472ea52b766(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9119ccc9a93d43948b7a66ff6ae04c48(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_e9bfa5b48a73429ca931ae589865bb42(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_e392e959bffb487d8702de48ffa578ee(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f54abb6eb2ae44c7a9c2a29c957703db(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 154 ******
public static Integer func_313b7234a87e49108564a36c0ed4bea1(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_87093a87778f4f26b264ce560bca6ec7(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_c68d8c41413b4b999dedc1c0200a5ea0(Integer minEndingHere, Integer maxProduct, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_7e77c92c2a414472945dd02fc5c7dec3(Integer maxEndingHere, Integer maxProduct, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_24504e8bd01c4a9c801538e4bb3b457b(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_299b27dc82b540859ef4a813118dbbb7(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_02de7d80a6084a45a55208e6fe49b491(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_ca92e3a6858241fd9db868838631c5cd(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_289b15240116416e8b8eb5c9c13951ee(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e22ae2c7707a4b65b7492b6f1dae9e74(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 155 ******
public static Integer func_ba4e3a058bac4049865fa8bd2c35e561(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_f7b4dd94236a4d9ab9a955b9f1dcc1e6(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_6f1ca8993c00451eaf3a4d7dfd79ccbc(Integer minEndingHere, Integer maxProduct, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_93b3933cf8c3422ebdcbfd8f2ef00415(Integer maxEndingHere, Integer maxProduct, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_3f0ca66f277848e9936579fd53363188(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_a3ec404adc9840318a3bf2809fdb205c(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_446e0353c375405486050466b7c2dcd5(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_cd514488a4e24205b3e95dba175dfb6b(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_fab1bd49ea8144cda353f6e0606502f3(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0441de032f234a67a68a4c50a801a67d(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 158 ******
public static Integer func_02b25583d94943208afe826891db51f6(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a18d7f032f8e4f60b7083d188db8ad48(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_16fb4bb870c54534928b1dd4cf3fdaea(Integer[] nums, Integer maxProduct, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_9a153313f2064e1db04e52e214a60f5a(Integer[] nums, Integer maxProduct, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_60f879ab77f14aa9a7628f8f531ab7cf(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_f2c85849faf542fc9f9d6a57a4308b44(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_9d7e0ec1010d41a99fcc08ff82342b06(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_7805bb0c055c47e899c59737323f9a6f(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_355261c7b5594076ac1f9444130b19f1(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_be3dc9a5a4654de4909d86f8a5421842(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 161 ******
public static Integer func_3d1cb379748045248246b3f5e7372ada(Integer result, Integer minProduct, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_87a26d1102cf48c99659ac37bf48da5d(Integer result, Integer maxProduct, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_cad3484e1fd4409ab60995921dfdb58b(Integer maxProduct, Integer minEndingHere, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_b03d9a19d3114614bbbb8404b05365f2(Integer maxProduct, Integer maxEndingHere, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_747f5324d5654ebb980e0d526c0cef0f(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_acf783b2a6fe4635b405f9fb3165aa8d(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_ac97b9db28134258aa0657b8db79f3c2(Integer maxProduct, Integer currMin, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_67377850ea7b481781900bd477ec6d11(Integer maxProduct, Integer currMax, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_a317718df53240f79bcfe8b8d1a0852b(Integer maxProduct, Integer currentMin, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e80c243285684fe9952b4a7a07582c32(Integer maxProduct, Integer currentMax, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 162 ******
public static Integer func_35887dbf39a14c658a3087ccbee9b8b0(Integer result, Integer[] nums, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_2a1e81e513a444aab8f1958c0642c929(Integer result, Integer[] nums, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_080694864b204ae2a07dc147f35c911d(Integer maxProduct, Integer[] nums, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_4cb422e7dc684b7f960024562176c25d(Integer maxProduct, Integer[] nums, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_99bba711e35b48e885e70b2ac6284f5d(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_e692817be2c24a4a97770330c79ce50d(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_0b5c92d28a804ee79ca36737dc4fa0b4(Integer maxProduct, Integer[] nums, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_4e75bf5830b546e4b9bf0d8d0daa430d(Integer maxProduct, Integer[] nums, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_4ebcd81abfd94b6a9387af24ba358fd6(Integer maxProduct, Integer[] nums, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_41e0706597ae42888cc62f60e82297c5(Integer maxProduct, Integer[] nums, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 165 ******
public static Integer func_5a6ab0c933d64772a3366d65166aab55(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_da8c465f05094d7fb8bb2c90cd12ffa2(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return maxProduct;
}
public static Integer func_9b012bd518814898ace1303a379091b8(Integer maxProduct, Integer maxEndingHere, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_4da2bc5b450c43afab2f6b7ea54286f7(Integer maxProduct, Integer minEndingHere, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxEndingHere;
}
public static Integer func_8ceb0e98521749d3a2ab2e25b0c37d01(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_640927b583124e5988012aa06b79df80(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_6c2def1b789c428cbce5dcc01d70afa2(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_3f59beb4b76e4e42820b8f94b5e24665(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return currMax;
}
public static Integer func_4403a2f64332460fa11d328e00425188(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}
public static Integer func_542ce654e91b411db4e00d88aae3fdb2(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return currentMax;
}


****** Cluster 168 ******
public static Integer func_4ffe9e1400614a298e5bed2cf31ca2ff(Integer minProduct, Integer[] nums, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_10144598c9b34cd896713ac9754332cb(Integer maxProduct, Integer[] nums, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_1a6de2e1df5f4925830114eaf3f3b016(Integer minEndingHere, Integer[] nums, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_b63202745beb4a2dba73666eecd70761(Integer maxEndingHere, Integer[] nums, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_346b82a52df947a1b34026533bb62222(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_0441437f4bae4a4c85a2fea15cd2b01c(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b84eb43456b742a7ac0c1997d3594ec0(Integer currMin, Integer[] nums, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_b79a9cdd65b14c4fb62830d784141247(Integer currMax, Integer[] nums, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_bbdd423e0a7545eebb4f4048ba6ac23f(Integer currentMin, Integer[] nums, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_5f1f44fc52094bb0a40509058302cd4a(Integer currentMax, Integer[] nums, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 169 ******
public static Integer func_8e9e05d86028453abac16aa6bee8f9a5(Integer[] nums, Integer minProduct, Integer maxProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_ea5005933766428cb13155cb5cd92738(Integer[] nums, Integer maxProduct, Integer minProduct, Integer result){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_5f5fb4809f8c44c1aa330c14c6b6e0fe(Integer[] nums, Integer minEndingHere, Integer maxEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_ee231454ec92400b9524239564456b12(Integer[] nums, Integer maxEndingHere, Integer minEndingHere, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_adaf1e0c11154e6080bda4cdbb00a398(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_5e6435c2badf4a628065d0176b209a14(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_6f3e4950dd6b47d09f6d743af9167066(Integer[] nums, Integer currMax, Integer currMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a48e20d0627d4f86b810d52fbc976198(Integer[] nums, Integer currMin, Integer currMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_a2f3fac7258244c9824285379d4a823c(Integer[] nums, Integer currentMin, Integer currentMax, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b9b59d9e6ebd42a7ab9be4c1021476b2(Integer[] nums, Integer currentMax, Integer currentMin, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 1194 ******
public static Integer func_2de2a2484261418eafc85023703baabd(Integer ans, Integer minProd, Integer n, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_8ddce99fdd504cf192c4f45beae70150(Integer ans, Integer maxProd, Integer n, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_ace26a5dce5f4e62b918c214b9597f5c(Integer maxProd, Integer minProd, Integer n, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9b8bb4130b0c481ca64cbbc5f5075d82(Integer maxProd, Integer ans, Integer n, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d023fcbf17cf458986e55d8924a3799f(Integer minProd, Integer maxProd, Integer n, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_cc92680869124c0b8a47a0a87900342f(Integer minProd, Integer ans, Integer n, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 171 ******
public static Integer func_251094fb65454fc1ac3d68d0139627cc(Integer[] nums, Integer maxProduct, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_928798df0e9642d4a99182f4e1f68610(Integer[] nums, Integer minProduct, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_2bb93cb483e14ec0960b82434de383fe(Integer[] nums, Integer minEndingHere, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_c6001f11ce9440bb900500d6faec2cfb(Integer[] nums, Integer maxEndingHere, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_40264496375e4898af7251ef8bf6b7b2(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_91ad1b9dc82149bf8ea0197e7afa3b9e(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_c7085062f66c4cf4b6a3ea50d037d46f(Integer[] nums, Integer currMin, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_91f2768e194a4bba95c9b4060975d49a(Integer[] nums, Integer currMax, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_bb4afc2b4b7442bca4126f451425a894(Integer[] nums, Integer currentMax, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ec0ee8f91e214ff1a1e9aae15855600a(Integer[] nums, Integer currentMin, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 1196 ******
public static Integer func_dfe65b5f8f854d59ad508746e30d4801(Integer ans, Integer minProd, Integer[] nums, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_81b2c3c436de4c778d4e320a1082e05c(Integer ans, Integer maxProd, Integer[] nums, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_186f285a4bf94085a75d87a92aa52e96(Integer maxProd, Integer minProd, Integer[] nums, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_5b44048cec0248a58e335d9a08e108cf(Integer maxProd, Integer ans, Integer[] nums, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_1ff7eb317bd1483a94d03a3a4d1a4b50(Integer minProd, Integer maxProd, Integer[] nums, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_2d956ea90e3c46329bd69059e57ebb69(Integer minProd, Integer ans, Integer[] nums, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1197 ******
public static Integer func_f7da9281490e4204995487dc2638b745(Integer n, Integer minProd, Integer ans, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_6508f400e3fb44d5b3bb01d3fd603cba(Integer n, Integer maxProd, Integer ans, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_478a3c212d7c4549acb4aaf9a5b803f9(Integer n, Integer minProd, Integer maxProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_c3f6dc1761884ac2a2b0445c2f2092d6(Integer n, Integer ans, Integer maxProd, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_1d3ee52740da47d58b491dd7cc3c7c7e(Integer n, Integer maxProd, Integer minProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_b0f0502eb4a44a2688f12b0cf1309fd7(Integer n, Integer ans, Integer minProd, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1198 ******
public static Integer func_be58e31dc60c44b880ffbba4edc0bc0e(Integer minProd, Integer n, Integer ans, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_29c79165d9a84f02946b0464c4c5cd64(Integer maxProd, Integer n, Integer ans, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_b42c4f2277e94818a213aca12ba0174e(Integer minProd, Integer n, Integer maxProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_54b1444aec4f48e3a58051249556128d(Integer ans, Integer n, Integer maxProd, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_7f7cf42f203b42f98021ce96f4b506f4(Integer maxProd, Integer n, Integer minProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_286ab7d3b950444198c064a7c0e79d85(Integer ans, Integer n, Integer minProd, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 175 ******
public static Integer func_d160522e50164fe2b2d1e4639f1742f1(Integer maxProduct, Integer[] nums, Integer result, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_1a9f5e63937247b28a479c62617edf6a(Integer minProduct, Integer[] nums, Integer result, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_4d089d4b3be5401791779f27dec0c018(Integer minEndingHere, Integer[] nums, Integer maxProduct, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_8bfd59a028a449fa8b890fd9e10d89de(Integer maxEndingHere, Integer[] nums, Integer maxProduct, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_72d7ce179f7a4046ad5d8e88fb4785d5(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_8e748040165b419a8f263917dfbe3e86(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_546dec69d1ba4db38553d5256955c97f(Integer currMin, Integer[] nums, Integer maxProduct, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_7ff36a7a557e4e7d8b88c2c49da82bf1(Integer currMax, Integer[] nums, Integer maxProduct, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_8053708ac6da479c8784278f7f90ac27(Integer currentMax, Integer[] nums, Integer maxProduct, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_45674eeca966456bb309cac37d9012a3(Integer currentMin, Integer[] nums, Integer maxProduct, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 176 ******
public static Integer func_87feb784e2074dd7bb76e0b1770686a7(Integer minProduct, Integer maxProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_4b2184dc138d4afbb2673617839c950b(Integer maxProduct, Integer minProduct, Integer result, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_063551e144be40bf8f2e327ebd810116(Integer maxEndingHere, Integer minEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_dc359068613e4eb4bb04235e2216a021(Integer minEndingHere, Integer maxEndingHere, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_70250a6f9c3242f8bea18d7b8efa354c(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_6c1ead08a09d4285939bda5b80523454(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f26bb2298be843aa96cfed991415b4ce(Integer currMin, Integer currMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_8c12b47c9b3343f1bb0c1e6aecaa3e1a(Integer currMax, Integer currMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_325ad8a15d7a466a9b6b1a0e55e1b393(Integer currentMin, Integer currentMax, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_ac086b644e1e4330a0e4218dbc0d6da8(Integer currentMax, Integer currentMin, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 1201 ******
public static Integer func_cf4778db4e3b41ff9a839886bb786fff(Integer minProd, Integer ans, Integer[] nums, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_840ff5c4ed524bc096862d704508362a(Integer maxProd, Integer ans, Integer[] nums, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_95d9985daa3e479d8ceaf7583e3d4201(Integer minProd, Integer maxProd, Integer[] nums, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_a9d5175b19b34e3c82a4883b86d05151(Integer ans, Integer maxProd, Integer[] nums, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_ea10c6fb0bbe4ac1b3c7d4b8ee1ae5ad(Integer maxProd, Integer minProd, Integer[] nums, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_84f22a4c63a1409fb083e1044f8b09ab(Integer ans, Integer minProd, Integer[] nums, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 178 ******
public static Integer func_5437f4f1e4a74adf8051a0698f20f555(Integer maxProduct, Integer result, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_a9735d264bc4401e89830264eb4e7be3(Integer minProduct, Integer result, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_dfe8fd830ead46da9685e62e5c6eeece(Integer minEndingHere, Integer maxProduct, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_ee0ce482f28c4ab5a24ba74de2b28990(Integer maxEndingHere, Integer maxProduct, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_9a5239b91c9c44f6a66560539ad81721(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_66bf6b8e391e4bee8e01c7a445fa4881(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_83becfd9e4c84320a03b571b74e7f273(Integer currMin, Integer maxProduct, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_ae6baaa7934242d491ae280aa077aabe(Integer currMax, Integer maxProduct, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_f570a08214ad4794bc0d3316b258b8da(Integer currentMax, Integer maxProduct, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_310b96627741473381a632ae7226503f(Integer currentMin, Integer maxProduct, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 179 ******
public static Integer func_fd8557159a504118a42de05f89bdbe7b(Integer maxProduct, Integer result, Integer[] nums, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_3ebc498b249a4d969161f829ca98f4d2(Integer minProduct, Integer result, Integer[] nums, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_5be89579d6c84e5992a4d18206272308(Integer minEndingHere, Integer maxProduct, Integer[] nums, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_1dfda8b9a29646f3b0e0d7aee7dacef6(Integer maxEndingHere, Integer maxProduct, Integer[] nums, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_f88a6d5fabfa4bcb99b1d055cbdae1f4(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_85a77aa29b6c4ce5837478af4da2fafc(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_e6075fc4194f4707b4565bcb0b4c4e38(Integer currMin, Integer maxProduct, Integer[] nums, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_84b5dbf9ad92406a9a1c0771547279c7(Integer currMax, Integer maxProduct, Integer[] nums, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_c119103e758448ea9fe122fe32dbcfa4(Integer currentMax, Integer maxProduct, Integer[] nums, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_f095649f433a46a59b727a4ae562e23c(Integer currentMin, Integer maxProduct, Integer[] nums, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 1204 ******
public static Integer func_fb5a19513c2f4cdd9f03da142bb78c77(Integer minProd, Integer n, Integer[] nums, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_57b24eafe5a549f098d4846d9f407372(Integer maxProd, Integer n, Integer[] nums, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_ae667ad1818942aeaef7c262dc08f921(Integer minProd, Integer n, Integer[] nums, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_66025682156940888a5ccd415fd7064e(Integer ans, Integer n, Integer[] nums, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_bbe86ed3fcd74156950d2f30cefa975e(Integer maxProd, Integer n, Integer[] nums, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_253ade1623904c3da98290a24b481999(Integer ans, Integer n, Integer[] nums, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1205 ******
public static Integer func_097a492b966f47689c8cddf9ae0d9a0b(Integer minProd, Integer[] nums, Integer ans, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_4dc6c9e30ecf4d4594fde5a960b67e2d(Integer maxProd, Integer[] nums, Integer ans, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_08fc284593d244c8a95b65c0d3d9d4ba(Integer minProd, Integer[] nums, Integer maxProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_f9d120f9915040fdbddb51d8f617a227(Integer ans, Integer[] nums, Integer maxProd, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_72a6f48baf9b42fdad61d9f7c7364d2a(Integer maxProd, Integer[] nums, Integer minProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_ea9f0f8882b54671b3c3151b7fdcbf61(Integer ans, Integer[] nums, Integer minProd, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 182 ******
public static Integer func_acc0e03787964b739a080a7acf441a09(Integer[] nums, Integer result, Integer minProduct, Integer maxProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_f263754b85d6427780f31ae0808af051(Integer[] nums, Integer result, Integer maxProduct, Integer minProduct){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_51b85a85fd494bec8291f06030b07367(Integer[] nums, Integer maxProduct, Integer maxEndingHere, Integer minEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_964c67466fcf4e368f157335bf5c16a9(Integer[] nums, Integer maxProduct, Integer minEndingHere, Integer maxEndingHere){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_bbea805a4c3d4ac7a5491a765ec49acd(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_85e461333e7443d6b213b57add848875(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_dc4d92aa6ca44e088ae0dc38502a4ca3(Integer[] nums, Integer maxProduct, Integer currMax, Integer currMin){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_aebb33841ade410fb3ef7145522b4cf4(Integer[] nums, Integer maxProduct, Integer currMin, Integer currMax){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_182792233dd1459d8a6752c0f150ebd6(Integer[] nums, Integer maxProduct, Integer currentMin, Integer currentMax){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_400d330d537d43cfbe9de2950ad8a710(Integer[] nums, Integer maxProduct, Integer currentMax, Integer currentMin){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 1207 ******
public static Integer func_c9173921f837450abb131d1c69b9ba8b(Integer minProd, Integer n, Integer[] nums, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_74089dd24232410b8d372379cbc8b774(Integer maxProd, Integer n, Integer[] nums, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_561c8b65e13b485b8fe60eeb517d68ee(Integer minProd, Integer n, Integer[] nums, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_e97aa7cff6da43c6abb1858a291c8f92(Integer ans, Integer n, Integer[] nums, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_b6e4ed9272dc4971add44dd78fe38c4a(Integer maxProd, Integer n, Integer[] nums, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_85c28f783ba34792a10b055128f6899d(Integer ans, Integer n, Integer[] nums, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1208 ******
public static Integer func_594bf7d58d4e4b72b1599fdc1a52a59a(Integer n, Integer minProd, Integer[] nums, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_576324259e024acba29e5b8c1b2dccac(Integer n, Integer maxProd, Integer[] nums, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_5e3d4f425c5345229a77c25c8d8903c9(Integer n, Integer minProd, Integer[] nums, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d62f4403877c41c08ad03d38e8c97b56(Integer n, Integer ans, Integer[] nums, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_3d279319e2124007972afa4778de7b24(Integer n, Integer maxProd, Integer[] nums, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_4328260b466d479a974266b097c17d1f(Integer n, Integer ans, Integer[] nums, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1209 ******
public static Integer func_19b9a1b10c2742bf81b2a8b90ea4dc5b(Integer minProd, Integer[] nums, Integer n, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_3598b8aee1354fc59cf3d1e41e9fd6d0(Integer maxProd, Integer[] nums, Integer n, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_c8131f293ea8448ab2bb44c2b8854128(Integer minProd, Integer[] nums, Integer n, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_e2a2b5327838472f8f54883be3d522ef(Integer ans, Integer[] nums, Integer n, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_2364554853bc418dae26982c27484627(Integer maxProd, Integer[] nums, Integer n, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_a6d16e6566c744ffaadc01e3e635bdde(Integer ans, Integer[] nums, Integer n, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1210 ******
public static Integer func_47ff66b3266648d590005b9b8913c675(Integer minProd, Integer[] nums, Integer maxProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_2d5824a76e2d48209abae19a4340012a(Integer maxProd, Integer[] nums, Integer minProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_4474259c7876470d8e0aa927d7e0b2d4(Integer minProd, Integer[] nums, Integer ans, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_82b5ce6fd4db4a8ea97ae893af398752(Integer ans, Integer[] nums, Integer minProd, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_0adb394eeb1c45249734b94c47638907(Integer maxProd, Integer[] nums, Integer ans, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_472d170f14b84417a0c7efc6515321de(Integer ans, Integer[] nums, Integer maxProd, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1211 ******
public static Integer func_8507c57bbf3040abace66ca1f5273378(Integer minProd, Integer[] nums, Integer maxProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_375d96411b2f4f49bda08808dc919190(Integer maxProd, Integer[] nums, Integer minProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_970cd4948b9d4d70ac1d48e569b1cea7(Integer minProd, Integer[] nums, Integer ans, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_673dccf8e7c343318f6b3984cb8a0932(Integer ans, Integer[] nums, Integer minProd, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_10050fd1cb9146458764e307d5816b51(Integer maxProd, Integer[] nums, Integer ans, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_916ddd2761c3478487f0b8ccb583fe41(Integer ans, Integer[] nums, Integer maxProd, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 188 ******
public static Integer func_d12e0199399b41d3b5dc9b46a14f5238(Integer result, Integer minProduct, Integer maxProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_c366d3c11b4744cd98801524d1863ba3(Integer result, Integer maxProduct, Integer minProduct, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 119
        // 120
        int tempMax = Math.max(nums[i], Math.max(maxProduct * nums[i], minProduct * nums[i]));
        // 121
        minProduct = Math.min(nums[i], Math.min(maxProduct * nums[i], minProduct * nums[i]));
        // 122
        maxProduct = tempMax;
        // 123
        result = Math.max(result, maxProduct);
    }
    return result;
}
public static Integer func_b3fdf0152bbe4fa79c50cbb28c446b85(Integer maxProduct, Integer maxEndingHere, Integer minEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_11f164e8d16b4ab5bbd48fa951a96f0b(Integer maxProduct, Integer minEndingHere, Integer maxEndingHere, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 139
        // 140
        int tempMax = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 141
        int tempMin = Math.min(nums[i], Math.min(nums[i] * maxEndingHere, nums[i] * minEndingHere));
        // 142
        maxEndingHere = tempMax;
        // 143
        minEndingHere = tempMin;
        // 144
        maxProduct = Math.max(maxProduct, maxEndingHere);
    }
    return maxProduct;
}
public static Integer func_b7f0a82ce1ff4676a1b240e0d913ab47(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_a3a62e4a898747cdbfacf1f59ddc90da(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 194
        // 195
        int temp = currentMax;
        // 196
        currentMax = Math.max(Math.max(nums[i], currentMax * nums[i]), currentMin * nums[i]);
        // 197
        currentMin = Math.min(Math.min(nums[i], temp * nums[i]), currentMin * nums[i]);
        // 198
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_b6a3d2b1ee3b4461964347509676a068(Integer maxProduct, Integer currMin, Integer currMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_b3e22258ce2b4964873ff91a4ab076f2(Integer maxProduct, Integer currMax, Integer currMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 202
        // 203
        int temp = currMax;
        // 204
        currMax = Math.max(Math.max(nums[i], currMax * nums[i]), currMin * nums[i]);
        // 205
        currMin = Math.min(Math.min(nums[i], currMin * nums[i]), temp * nums[i]);
        // 206
        maxProduct = Math.max(currMax, maxProduct);
    }
    return maxProduct;
}
public static Integer func_95c80f9a9462439ca5f57d5354195637(Integer maxProduct, Integer currentMin, Integer currentMax, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}
public static Integer func_38dda58d2cc042ee9e5938cecb361fce(Integer maxProduct, Integer currentMax, Integer currentMin, Integer[] nums){
    for (int i = 1; i < nums.length; i++) {
        // 49
        // 50
        int temp = currentMax;
        // 51
        currentMax = Math.max(Math.max(nums[i] * currentMax, nums[i] * currentMin), nums[i]);
        // 52
        currentMin = Math.min(Math.min(nums[i] * temp, nums[i] * currentMin), nums[i]);
        // 53
        maxProduct = Math.max(maxProduct, currentMax);
    }
    return maxProduct;
}


****** Cluster 192 ******
public static Integer func_efdfb51f08824ca7acefee83f02d4ce8(Integer currentMaxProduct, Integer maxProduct, Integer currentMinProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_691246c515e0457d9038872084ff98bc(Integer maxProduct, Integer currentMaxProduct, Integer currentMinProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_f3d4733c300c42ebb4f978eb8349685c(Integer maxProduct, Integer currentMinProduct, Integer currentMaxProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_65978d89db75402fa16ccff24c046e72(Integer currentMaxProduct, Integer currentMinProduct, Integer maxProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_73d17b29e9c04752b36dd7a77dc03341(Integer currentMinProduct, Integer currentMaxProduct, Integer maxProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_a790d3f6cfa7460bb005ba3399ddef39(Integer currentMinProduct, Integer maxProduct, Integer currentMaxProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}


****** Cluster 195 ******
public static Integer func_970f741e7fc047d38499df4d08484288(Integer maxProduct, Integer currentMinProduct, Integer[] nums, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_0463c6a0413f4aa99ad1eb7db0702600(Integer currentMinProduct, Integer maxProduct, Integer[] nums, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_faca742fd3104277aeb44a88df31bc3a(Integer currentMaxProduct, Integer currentMinProduct, Integer[] nums, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_32de2c7842d049aea875555835771e8b(Integer currentMinProduct, Integer currentMaxProduct, Integer[] nums, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_8a9e1034e3604e68a859f951cbab0b05(Integer currentMaxProduct, Integer maxProduct, Integer[] nums, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_0d3f038a4b56455385a720a6345a9eef(Integer maxProduct, Integer currentMaxProduct, Integer[] nums, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}


****** Cluster 201 ******
public static Integer func_a18650024f0748ff8fff56b99c78deaf(Integer currentMinProduct, Integer[] nums, Integer currentMaxProduct, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_4a881a1785c84724863cbe3a47cb46f4(Integer currentMinProduct, Integer[] nums, Integer maxProduct, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_071f898a4b5c45d48d652088d7cdb0b5(Integer maxProduct, Integer[] nums, Integer currentMaxProduct, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_587d6b5bfbf247e8bdd9e6b0fd9a2d63(Integer maxProduct, Integer[] nums, Integer currentMinProduct, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_ea74489cdb984d3894eeea95faacedc5(Integer currentMaxProduct, Integer[] nums, Integer maxProduct, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_ab946bd4c0c04cb79c91827b4df19612(Integer currentMaxProduct, Integer[] nums, Integer currentMinProduct, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}


****** Cluster 1200 ******
public static Integer func_df60c4a67d8e4976ad4564874cbc18cb(Integer minProd, Integer ans, Integer[] nums, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_f14f6059a84f4e11b9580235ceb44e5e(Integer maxProd, Integer ans, Integer[] nums, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_6e1e1f456bf9405e8bdc04b5b6de4368(Integer minProd, Integer maxProd, Integer[] nums, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_62e0de4878c74e6b997a789bb7b9a42b(Integer ans, Integer maxProd, Integer[] nums, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_1e458d5149724b30834f5ac52b87d168(Integer maxProd, Integer minProd, Integer[] nums, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_952f474a9e2049b79e61563cec1cb35a(Integer ans, Integer minProd, Integer[] nums, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1232 ******
public static Integer func_d861653d0e7a4078a883bb283864b273(Integer n, Integer ans, Integer[] nums, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_2eaa5c312d3e4e40977190bf25b4e884(Integer n, Integer ans, Integer[] nums, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_42761c10f9194b9db48eedfd0456f384(Integer n, Integer maxProd, Integer[] nums, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9006b1004de246b98b748ca422b380ab(Integer n, Integer maxProd, Integer[] nums, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_e70199fc44a64f9d9ee221e767d90bd1(Integer n, Integer minProd, Integer[] nums, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_d5e3927b1b1b42c7b8dd9c43d47a1d0d(Integer n, Integer minProd, Integer[] nums, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 209 ******
public static Integer func_6ae7ea6e598c4bc08bdbfccee7169bef(Integer[] nums, Integer currentMaxProduct, Integer maxProduct, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_f225d28abee54f6892212ce51e0d964b(Integer[] nums, Integer maxProduct, Integer currentMaxProduct, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_fd3838819a6540d1a55e1ebe29a38b37(Integer[] nums, Integer maxProduct, Integer currentMinProduct, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_d8a0fc9114be4dbbbfc29863dabbae0e(Integer[] nums, Integer currentMaxProduct, Integer currentMinProduct, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_86de26f53d944dca9d1dc9e9d19fa015(Integer[] nums, Integer currentMinProduct, Integer currentMaxProduct, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}
public static Integer func_4c726e1b2c93461ba8ddb24b74f95f27(Integer[] nums, Integer currentMinProduct, Integer maxProduct, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMaxProduct;
}


****** Cluster 1234 ******
public static Integer func_56cfc6948d904b03a6851869c2110a42(Integer ans, Integer[] nums, Integer maxProd, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_45448686067d4fe4850e6efbb6809902(Integer ans, Integer[] nums, Integer minProd, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_ee2afe38d4e14d83b71c023e5a801c74(Integer maxProd, Integer[] nums, Integer ans, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_501f39cba65648feb950590ac53fc53e(Integer maxProd, Integer[] nums, Integer minProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_ba7f94df8dfb41f5a6598ae070bf7cc2(Integer minProd, Integer[] nums, Integer ans, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_c19a17daa6614377850a47503e3c64e3(Integer minProd, Integer[] nums, Integer maxProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1235 ******
public static Integer func_688160417151404c9b2ecbcc1dd6f6f7(Integer ans, Integer[] nums, Integer maxProd, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_a4e88faeb1d44ef2b1c1df7145f742b9(Integer ans, Integer[] nums, Integer minProd, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_4fadf8dae7a040df996bcf579d8a2374(Integer maxProd, Integer[] nums, Integer ans, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_85e48d7c112c462b81c117ba8bf31d77(Integer maxProd, Integer[] nums, Integer minProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_7d692942802541c188e6bb195cd5a743(Integer minProd, Integer[] nums, Integer ans, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_e37b215e04af43328d2b67c970c5d9ff(Integer minProd, Integer[] nums, Integer maxProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1236 ******
public static Integer func_edc333d0879749f090549ba643ae0473(Integer ans, Integer[] nums, Integer n, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_94b126ff009c43c394a5fb606210749e(Integer ans, Integer[] nums, Integer n, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_e6c19ab656a54da58f5c63477e75cc4a(Integer maxProd, Integer[] nums, Integer n, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_50e1a20b4bfb40f4947a2cf45d2614fd(Integer maxProd, Integer[] nums, Integer n, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_8f1ef15f07454f05a9fe38cc18ee69f7(Integer minProd, Integer[] nums, Integer n, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_4b06a4ca26354af4ae9a48b54bfd0c3f(Integer minProd, Integer[] nums, Integer n, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1237 ******
public static Integer func_878439b7b2b84b5c8139efabf070e1a3(Integer n, Integer[] nums, Integer ans, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_ec8eae2470024702b7c54f47e8871fb2(Integer n, Integer[] nums, Integer ans, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_a809a0a6ff8f42b0a859ada3a36cdd3c(Integer n, Integer[] nums, Integer maxProd, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_eb8b7fec833e4572ae6f6bee5c911718(Integer n, Integer[] nums, Integer maxProd, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_2e8f917dd4fb4d5480e15fe02d95ad1f(Integer n, Integer[] nums, Integer minProd, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_d7cc625b315d434b93d7ed8271235478(Integer n, Integer[] nums, Integer minProd, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1238 ******
public static Integer func_ff03fe237c4b4c53ac082f310b136f99(Integer[] nums, Integer n, Integer ans, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_81edec38e771484faf431ce7f0fcd175(Integer[] nums, Integer n, Integer ans, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_5429b1c75ee8497da072a5eb4613ae85(Integer[] nums, Integer n, Integer maxProd, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_6c6f3a0ae0814165817557cb1484292d(Integer[] nums, Integer n, Integer maxProd, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9633b47d983b48d4a0f3d3358fa2dbeb(Integer[] nums, Integer n, Integer minProd, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_479e7c745b2c46f39e27eccd5b21b91c(Integer[] nums, Integer n, Integer minProd, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1239 ******
public static Integer func_7ea134a6251d4af8b3559eaf800ac345(Integer[] nums, Integer ans, Integer n, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_a87886d3db514857a8bf195bb0ab371b(Integer[] nums, Integer ans, Integer n, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_fd540a9561d740d08bb4602cbcb6befd(Integer[] nums, Integer maxProd, Integer n, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_0d7ffd0cdd374777a7a4cfd83dc2756b(Integer[] nums, Integer maxProd, Integer n, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_88274b351d7a4eb7b74507c0bfda3d48(Integer[] nums, Integer minProd, Integer n, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_fe4d7fda2af446a9982c405502ac01d7(Integer[] nums, Integer minProd, Integer n, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1240 ******
public static Integer func_de175d2fbb70406d8e7076ce158d85a0(Integer[] nums, Integer ans, Integer maxProd, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_29d8cd6df98b4e6d9eb9f1bff688bd31(Integer[] nums, Integer ans, Integer minProd, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_d21b01b791f446e58eea7b27ad60eabe(Integer[] nums, Integer maxProd, Integer ans, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_1a3dbdffc8d34f20a4cee0e002343027(Integer[] nums, Integer maxProd, Integer minProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_3acedcdc60864497a3bbe0eafa687f8d(Integer[] nums, Integer minProd, Integer ans, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_df3f323049304dd3859b10d11dd848fb(Integer[] nums, Integer minProd, Integer maxProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1241 ******
public static Integer func_d04ce8c8c0d34115aba68464d23eb27c(Integer[] nums, Integer ans, Integer maxProd, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_08eb57f04ca64540bd6537f61b2e6a2a(Integer[] nums, Integer ans, Integer minProd, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_98a8be4405ca45ba943338dd22c33a6f(Integer[] nums, Integer maxProd, Integer ans, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_5f7d352664774dfd8d8b8e59ce6f511f(Integer[] nums, Integer maxProd, Integer minProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_4d67efe29a724b569aa5d3d04f17553b(Integer[] nums, Integer minProd, Integer ans, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_7512506cd999426aad02464d02990cff(Integer[] nums, Integer minProd, Integer maxProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1242 ******
public static Integer func_aa3dd0d021d54b47aec92790a78c6c99(Integer n, Integer[] nums, Integer maxProd, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_107ec8ba3b3e480499fa4dc1a7e33636(Integer n, Integer[] nums, Integer minProd, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_c87c0fa2d1e5482d9b68cf3470239453(Integer n, Integer[] nums, Integer ans, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_1fc9114965b3492ba0a19281d6171ea9(Integer n, Integer[] nums, Integer minProd, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_343b4b67724e4eb0870a27483b6f2490(Integer n, Integer[] nums, Integer maxProd, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_02bc3c320eed4037ac9f230964ecdcd2(Integer n, Integer[] nums, Integer ans, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1243 ******
public static Integer func_3daee37a3b644ef5a41f303b9759978b(Integer[] nums, Integer n, Integer maxProd, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_8287f38325504a1aa388752c27c6835b(Integer[] nums, Integer n, Integer minProd, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_4569fbe7a6af494d809aeec9936b7807(Integer[] nums, Integer n, Integer ans, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9cc08d53411f4927a776251343087a64(Integer[] nums, Integer n, Integer minProd, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d11c22bb55774f749b84d7f931fb657d(Integer[] nums, Integer n, Integer maxProd, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_5d48324fe90c420fbbb0cb898821224a(Integer[] nums, Integer n, Integer ans, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1244 ******
public static Integer func_0f5ae471623c462a983a929745355673(Integer[] nums, Integer maxProd, Integer n, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_3fe20d17d2de4fe0bce7872c8a4ea2bf(Integer[] nums, Integer minProd, Integer n, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_00dae4c81c274256b1545fea7bdd1750(Integer[] nums, Integer ans, Integer n, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_70d24d28a3674970aea8d54960858ac3(Integer[] nums, Integer minProd, Integer n, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_8255ac37d12b44308b9bcb0e21080b9b(Integer[] nums, Integer maxProd, Integer n, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_c6d210c2177646119686c19b52a940e6(Integer[] nums, Integer ans, Integer n, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1245 ******
public static Integer func_50638023791c414f9a596f3603a7e147(Integer[] nums, Integer maxProd, Integer ans, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_6430fe2d7ed54c8197fd80c35223336f(Integer[] nums, Integer minProd, Integer ans, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_7541913192dd4ce9beadb7627932adb9(Integer[] nums, Integer ans, Integer maxProd, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_63da5781400345ec8b0995c2e4ce793d(Integer[] nums, Integer minProd, Integer maxProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_4e8cb2db69514b7bbfa476bdf91d8aa8(Integer[] nums, Integer maxProd, Integer minProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_e24f356a876f4150bfd227a938cd6507(Integer[] nums, Integer ans, Integer minProd, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1246 ******
public static Integer func_ad21d63cc30746b6ae0c65f8db798c0b(Integer[] nums, Integer maxProd, Integer ans, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_8bdffb9cd7324f5cb499800b3b4080b5(Integer[] nums, Integer minProd, Integer ans, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_7d2ef612ef1b4bae9fb312c4fcb4948b(Integer[] nums, Integer ans, Integer maxProd, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_f1e2b1b1a0894cc3bbb70ab1d850eebc(Integer[] nums, Integer minProd, Integer maxProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_e57a28409cff4b42b01533a0fac92971(Integer[] nums, Integer maxProd, Integer minProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_358737c554d1434fa87d2be1c2650a27(Integer[] nums, Integer ans, Integer minProd, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1247 ******
public static Integer func_f5a8c4b780fc4104b6d14881aa6df292(Integer n, Integer[] nums, Integer maxProd, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_82f515f5ce8d40cbb8bc8f9a28e3fb24(Integer n, Integer[] nums, Integer minProd, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_a67106cd2ece4e33a2b766df8aa4640e(Integer n, Integer[] nums, Integer ans, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9adc6b660e1d45c5a7d3f96bec252fec(Integer n, Integer[] nums, Integer minProd, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_5e6c3d0654cb4dce95552a031b5e27fb(Integer n, Integer[] nums, Integer ans, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_0dcf6b183b6c4df899180e7401a5ac95(Integer n, Integer[] nums, Integer maxProd, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1248 ******
public static Integer func_b1ce0f5f127b445787f1c6b48db729be(Integer[] nums, Integer n, Integer maxProd, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_e94cabeba3b34fad9b055149fc4694e0(Integer[] nums, Integer n, Integer minProd, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_ec5e314438cc4ee6b5f9b1427c1e9e21(Integer[] nums, Integer n, Integer ans, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_a68e7450f11d403cb949ffdc5eb23fa2(Integer[] nums, Integer n, Integer minProd, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_472fedc1cd9242c49219e609313f11f6(Integer[] nums, Integer n, Integer ans, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_7d2f78afc8ae4a2ea3e04dd57db6e97b(Integer[] nums, Integer n, Integer maxProd, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1249 ******
public static Integer func_74a42e1d932c4df295f04333c103c7a4(Integer[] nums, Integer maxProd, Integer n, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_64125a02efe54f259470cccbf4d70c2a(Integer[] nums, Integer minProd, Integer n, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_0427217acd3b476aacd4db41e2109354(Integer[] nums, Integer ans, Integer n, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_b4dc215ac2584b38b94003df0b8cb32d(Integer[] nums, Integer minProd, Integer n, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_0e40186a3bba4dd39e2249b15cf6f86a(Integer[] nums, Integer ans, Integer n, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_2d2b4e4489ad44df9bee48807c1fbacb(Integer[] nums, Integer maxProd, Integer n, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1250 ******
public static Integer func_fe8fae96d2d3425bbbf93e643e57b847(Integer[] nums, Integer maxProd, Integer minProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_d64abc21aae948bcb1af2952cf28f0e5(Integer[] nums, Integer minProd, Integer maxProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_0f84e06e56584965b640877e80cd085e(Integer[] nums, Integer ans, Integer minProd, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_259beba9d8f1440399ab46a7ce7bc439(Integer[] nums, Integer minProd, Integer ans, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_eb3d592bf676401c9a0d13ca158589e6(Integer[] nums, Integer ans, Integer maxProd, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_c241799345d34de7af84c3f66163722b(Integer[] nums, Integer maxProd, Integer ans, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1251 ******
public static Integer func_4f6855f99f63464a80b820a420a89961(Integer[] nums, Integer maxProd, Integer minProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_5e65f12899004385bcf03b80b0839705(Integer[] nums, Integer minProd, Integer maxProd, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_8724eacf7f1744078a771b46978ea377(Integer[] nums, Integer ans, Integer minProd, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_6ada0b76bf614423a6914c0229c64295(Integer[] nums, Integer minProd, Integer ans, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_174aecf2db8f40e59d6b32ab783b6cbc(Integer[] nums, Integer ans, Integer maxProd, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_f812e79668ce4348bc23bf406a1cc8f2(Integer[] nums, Integer maxProd, Integer ans, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1233 ******
public static Integer func_fd1ad47bdd564651ab845d49e8f303f6(Integer ans, Integer n, Integer[] nums, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_2d3de797ba854592aa5b6d226ddb45cd(Integer ans, Integer n, Integer[] nums, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_e5f3e63278fd483ea718c7393463ff55(Integer maxProd, Integer n, Integer[] nums, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_da9a9f477ece40e9977c21196beb6dd5(Integer maxProd, Integer n, Integer[] nums, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_ac312696c6bc4a1ea573bbba65e51763(Integer minProd, Integer n, Integer[] nums, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_2de85dd1e5a64930a852b4ba0294569e(Integer minProd, Integer n, Integer[] nums, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 240 ******
public static Integer func_9de5a383b1e94d03a7db0c571e5d2e8e(Integer currentMaxProduct, Integer maxProduct, Integer currentMinProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_beb15ecb000649d4b577db725442b6cc(Integer maxProduct, Integer currentMaxProduct, Integer currentMinProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_0e329addf78447b384edf33aea37878b(Integer maxProduct, Integer currentMinProduct, Integer currentMaxProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_047199bb6e1a4c7eb73ef0e2dae7cc80(Integer currentMaxProduct, Integer currentMinProduct, Integer maxProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_ad0a665a9f8d421d99641d9fe97756ac(Integer currentMinProduct, Integer currentMaxProduct, Integer maxProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_7cd69c89ec0b406ea0e5f436e3c85807(Integer currentMinProduct, Integer maxProduct, Integer currentMaxProduct, Integer[] nums){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}


****** Cluster 243 ******
public static Integer func_ecc17cffe53b4e6cbeda81f2994a1251(Integer maxProduct, Integer currentMinProduct, Integer[] nums, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_288703b488ea4e91b2ac03d14981f15f(Integer currentMinProduct, Integer maxProduct, Integer[] nums, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_16bfa2ff947a4d539db50d5a467c7947(Integer currentMaxProduct, Integer currentMinProduct, Integer[] nums, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_1187920f2e9741f389083a2ae5d8b249(Integer currentMinProduct, Integer currentMaxProduct, Integer[] nums, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_c2225127e41b44f28d046410dbee3f6b(Integer currentMaxProduct, Integer maxProduct, Integer[] nums, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_64e08a4bc17c4429b42e9bc36edd1919(Integer maxProduct, Integer currentMaxProduct, Integer[] nums, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}


****** Cluster 250 ******
public static Integer func_4e73d83a10b545f19b7a634239157223(Integer currentMinProduct, Integer[] nums, Integer currentMaxProduct, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_1bdd26f5ce5e4a668a40e22c7cd86063(Integer currentMinProduct, Integer[] nums, Integer maxProduct, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_7eda11464f5e47d5992c870f45e402a3(Integer maxProduct, Integer[] nums, Integer currentMaxProduct, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_cd7244be276f4a2d8551bbeb012b4bec(Integer maxProduct, Integer[] nums, Integer currentMinProduct, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_14b9b07b147048cb9a3df85289fe7019(Integer currentMaxProduct, Integer[] nums, Integer maxProduct, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_7e88e94017a14465bd2956887b248b39(Integer currentMaxProduct, Integer[] nums, Integer currentMinProduct, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}


****** Cluster 257 ******
public static Integer func_6042d7f8505e4d3eb0be593c15c00205(Integer[] nums, Integer currentMaxProduct, Integer maxProduct, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_22075066f9a14480a88010a9ca1a158f(Integer[] nums, Integer maxProduct, Integer currentMaxProduct, Integer currentMinProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_f622b48df31a40ca999321fc99b98964(Integer[] nums, Integer maxProduct, Integer currentMinProduct, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_e38c93daa80649ff8f61ed3c6ab3cd8f(Integer[] nums, Integer currentMaxProduct, Integer currentMinProduct, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_bc132535e647450da08dd679b246dd6b(Integer[] nums, Integer currentMinProduct, Integer currentMaxProduct, Integer maxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}
public static Integer func_1ed228f76c03427ea6108450c1796493(Integer[] nums, Integer currentMinProduct, Integer maxProduct, Integer currentMaxProduct){
    for (int num : nums) {
        // 127
        if (num < 0) {
            // 128
            // 129
            int temp = currentMaxProduct;
            // 130
            currentMaxProduct = currentMinProduct;
            // 131
            currentMinProduct = temp;
        }
        // 132
        currentMaxProduct = Math.max(currentMaxProduct * num, num);
        // 133
        currentMinProduct = Math.min(currentMinProduct * num, num);
        // 134
        maxProduct = Math.max(currentMaxProduct, maxProduct);
    }
    return currentMinProduct;
}


****** Cluster 1202 ******
public static Integer func_ab6aa38eeb824e798a87fa07b4331531(Integer n, Integer minProd, Integer[] nums, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_abe40cd677654009866f4877e7d50a6c(Integer n, Integer maxProd, Integer[] nums, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_172abda671034954843f9b5c67dd4729(Integer n, Integer minProd, Integer[] nums, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d1f1e0849dc143408e046fbef4762050(Integer n, Integer ans, Integer[] nums, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_73701385ebe34504b3ee6936afa46cae(Integer n, Integer maxProd, Integer[] nums, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_88ecf7f05b8241bb9730632794f3fad7(Integer n, Integer ans, Integer[] nums, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1195 ******
public static Integer func_78c32ed14e6d442f8f5436d676239e51(Integer ans, Integer minProd, Integer[] nums, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_c870c10acb55441899fd05dd2db1d18f(Integer ans, Integer maxProd, Integer[] nums, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_e3d6a135fd1b4a8f9f08fe102a08ccb0(Integer maxProd, Integer minProd, Integer[] nums, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d8c310c7182c4c9b9d73d11101cc5c1b(Integer maxProd, Integer ans, Integer[] nums, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_a90e3c9c36b94adea23a1571b995f6f2(Integer minProd, Integer maxProd, Integer[] nums, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_2481e34b15ef4553bef1eda0d066357b(Integer minProd, Integer ans, Integer[] nums, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1154 ******
public static Integer func_558b88fe7cd845c5858955da969c2f2a(Integer ans, Integer maxProd, Integer n, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_58725a3a7c5e458087b94ffa3cbf6ee8(Integer ans, Integer minProd, Integer n, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_2cee0069dfcb4044a50efb61fb7282f9(Integer maxProd, Integer ans, Integer n, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_dfc806bca35248cdab67382cf48a13fa(Integer maxProd, Integer minProd, Integer n, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_4981cbee1253483296d1274a0a142be5(Integer minProd, Integer ans, Integer n, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_7d17e5a84634481db81a834f0fd6a8ee(Integer minProd, Integer maxProd, Integer n, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1155 ******
public static Integer func_6f356766c53d400eacdefc5e067664e3(Integer ans, Integer maxProd, Integer minProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_ea3589111bfa44d6a3c600f8bf2d8b99(Integer ans, Integer minProd, Integer maxProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_4df90bc16bc74137913708558d2cc1fe(Integer maxProd, Integer ans, Integer minProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_3cbecfd3bc1f4b40a75070b66bd8f244(Integer maxProd, Integer minProd, Integer ans, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9de80b3d31b949e9adaf419cf496f20e(Integer minProd, Integer ans, Integer maxProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_2a247de266c34da287d7f836ed658e1a(Integer minProd, Integer maxProd, Integer ans, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1584 ******
public static Integer func_5fafc87db06747a7af67b38fb3e58689(Integer[] nums, Integer maxProduct, Integer currentProduct, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_b1872a2a03214b6d846d83b28bba4619(Integer[] nums, Integer currentProduct, Integer maxProduct, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1158 ******
public static Integer func_8eef5df768334f0a87d6ddaac6860260(Integer maxProd, Integer n, Integer ans, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_6d4979d103434f3ab0c6f8b79e967e01(Integer minProd, Integer n, Integer ans, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_d44c942868ac48b8ae84962fc4dc2a58(Integer ans, Integer n, Integer maxProd, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_3b2ecccb6dd547f0a8c53028e7cb3e57(Integer minProd, Integer n, Integer maxProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_e5da630796e64271be47306183b002ff(Integer maxProd, Integer n, Integer minProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_c299071b71ed4573b503d4b76ed4543f(Integer ans, Integer n, Integer minProd, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1585 ******
public static Integer func_3c7b10ed59484230b917e92a5daaa3a9(Integer maxProduct, Integer[] nums, Integer currentProduct, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_d789fdff60d74a97b374aba6b9fcb5f7(Integer currentProduct, Integer[] nums, Integer maxProduct, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1152 ******
public static Integer func_b800093084394f1ca715f1b5de37a574(Integer n, Integer ans, Integer maxProd, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_c87442c92929421eaa713f422ecc6421(Integer n, Integer ans, Integer minProd, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_8c7589d5722f43b1bc570110b3003746(Integer n, Integer maxProd, Integer ans, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_41fa141581b040dc990810e5a9f062d4(Integer n, Integer maxProd, Integer minProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_be199fc6658746b7bf2f66886b00d1d6(Integer n, Integer minProd, Integer ans, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_b35286032f404f7d8b81de037d026078(Integer n, Integer minProd, Integer maxProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1586 ******
public static Integer func_b9ca63a5ca0445f3aafad128699788fa(Integer maxProduct, Integer currentProduct, Integer n, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_d3e4f30e37c54e49817369de6166842d(Integer currentProduct, Integer maxProduct, Integer n, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1587 ******
public static Integer func_138a65999bf5425587763fe0194ca581(Integer maxProduct, Integer currentProduct, Integer[] nums, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_3a3a8ac578b048cf9c6b260e15412649(Integer currentProduct, Integer maxProduct, Integer[] nums, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1161 ******
public static Integer func_913ea34f7c584982a5aae4688c3f81ed(Integer maxProd, Integer ans, Integer minProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_b937fdf5c70d4720af87ef71180c4831(Integer minProd, Integer ans, Integer maxProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_279187630235445eb7f03308742ba5b4(Integer ans, Integer maxProd, Integer minProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_e5a3cba9c9d34e188e9cd1f392f1bc56(Integer minProd, Integer maxProd, Integer ans, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_5a44cec1d0a6486997a17624f134684d(Integer maxProd, Integer minProd, Integer ans, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_cbc549a96cc14a7293a00fdecf232e01(Integer ans, Integer minProd, Integer maxProd, Integer[] nums, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1588 ******
public static Integer func_33260a6a852c45e79a0a0d384aa773ec(Integer[] nums, Integer currentProduct, Integer maxProduct, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_8632a0ec46ea4cb482315f8cc7bf51c9(Integer[] nums, Integer maxProduct, Integer currentProduct, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1162 ******
public static Integer func_3272a5e3291c4f3e9aef204a5b2ede45(Integer n, Integer maxProd, Integer minProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_a2d2f7f33fd141af9ab7330c9f7884a2(Integer n, Integer minProd, Integer maxProd, Integer ans, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_7030734a66aa42d9b7abca301c386c40(Integer n, Integer ans, Integer minProd, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_b252172829b343c3a6ae5e0725f46c4c(Integer n, Integer minProd, Integer ans, Integer maxProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_51480d21973e48c194df5b3c0c33ffaa(Integer n, Integer ans, Integer maxProd, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_b25fc24f78c8487aa0152af103bc6835(Integer n, Integer maxProd, Integer ans, Integer minProd, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1589 ******
public static Integer func_52d7e3eaeea14cdc9408ddc5268a4940(Integer currentProduct, Integer[] nums, Integer maxProduct, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_b44a00c3345c426ea22766211bf539dd(Integer maxProduct, Integer[] nums, Integer currentProduct, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1590 ******
public static Integer func_2b47a5d720d349de94ab424e94042215(Integer currentProduct, Integer maxProduct, Integer[] nums, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_1dcad5a4edb142ffb2ea770df4d7ba89(Integer maxProduct, Integer currentProduct, Integer[] nums, Integer n){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1591 ******
public static Integer func_fa2b04b9e5bb41c88b019c918060614e(Integer currentProduct, Integer maxProduct, Integer n, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_885f753e26fd4605b1cf955bf2647294(Integer maxProduct, Integer currentProduct, Integer n, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1165 ******
public static Integer func_6f925fc594044911ad959b7a2089cbe8(Integer maxProd, Integer minProd, Integer ans, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_d9cc2bea3abe401e9ead0a9b6678a487(Integer minProd, Integer maxProd, Integer ans, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_f16c71bddb6744e6b1f1798f948825e6(Integer ans, Integer minProd, Integer maxProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9e06615efd7940c5841ff633726c9fa6(Integer minProd, Integer ans, Integer maxProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_b8284767de0c407c999d88b5abc630ff(Integer ans, Integer maxProd, Integer minProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_7d3debce4b554a07819ed505de84ab08(Integer maxProd, Integer ans, Integer minProd, Integer n, Integer[] nums){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1592 ******
public static Integer func_12468b56d90943a1b8c336d36df62e47(Integer[] nums, Integer currentProduct, Integer n, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_83d8cb78fc6f4d66817d3cbbf200ab6c(Integer[] nums, Integer maxProduct, Integer n, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1593 ******
public static Integer func_25f1e70bb1714047a7da69638360d5a4(Integer currentProduct, Integer[] nums, Integer n, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_308dd79e7c6c44a099eaeefea35fc113(Integer maxProduct, Integer[] nums, Integer n, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1167 ******
public static Integer func_a7789766af8a412a976f171b63d0fb09(Integer maxProd, Integer n, Integer minProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_781ca8d19e8b4a128572393738c555a4(Integer minProd, Integer n, Integer maxProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_2e57b1ac84e5493e8cf634df95ab03de(Integer ans, Integer n, Integer minProd, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_7dc4bb3df5674363bde8a758dd3b32df(Integer minProd, Integer n, Integer ans, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_cd97bba0cedf4a5aa79109c4e0f4b10a(Integer ans, Integer n, Integer maxProd, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_1c368763ebee45bfa05c3985064c5b32(Integer maxProd, Integer n, Integer ans, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1594 ******
public static Integer func_5fc552a90e254c94b7838e0d817a412d(Integer currentProduct, Integer n, Integer[] nums, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_01c10414e0d649ac968042581cdc6615(Integer maxProduct, Integer n, Integer[] nums, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1199 ******
public static Integer func_2a30eba5753c48f19048f537654e1e1b(Integer minProd, Integer ans, Integer n, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_ff8cefe79fb24d5bb1d7847553accf33(Integer maxProd, Integer ans, Integer n, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_16088d6d1f474045adadc8cf04aa4710(Integer minProd, Integer maxProd, Integer n, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_5d04a7a34cd047ceaf2782261981339b(Integer ans, Integer maxProd, Integer n, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_2796a67a08e24b5bbff4133ab614c407(Integer maxProd, Integer minProd, Integer n, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_502f69c210824a0a866383584eb1b924(Integer ans, Integer minProd, Integer n, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1169 ******
public static Integer func_8806a480778641ebb9be1f75688aed0c(Integer maxProd, Integer minProd, Integer n, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_aa7dee0d11f54765b4350d1ecced8d52(Integer minProd, Integer maxProd, Integer n, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_e841a3e2c49943dfabc774649880e157(Integer ans, Integer minProd, Integer n, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_f205c0ee403a42b8947ca9e007dd66db(Integer minProd, Integer ans, Integer n, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_9ef31564b0814ba4be5c44a6bf64a4d6(Integer ans, Integer maxProd, Integer n, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_23abca5d36f64dc5b2273840883e6c8e(Integer maxProd, Integer ans, Integer n, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1596 ******
public static Integer func_486bf303fd09414693ce61a5bcc7766e(Integer[] nums, Integer maxProduct, Integer n, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_4addf2df7c20467492e780a20a985c13(Integer[] nums, Integer currentProduct, Integer n, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1170 ******
public static Integer func_8e03a6a19cc446e8a060156a7a77d941(Integer maxProd, Integer minProd, Integer[] nums, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_75636d62b76d41e588439f993ddd55ca(Integer minProd, Integer maxProd, Integer[] nums, Integer n, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_54dd73ba39364578b092db1c7fa6f8cb(Integer ans, Integer minProd, Integer[] nums, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_b008091d0f5548ceaa8f4b29e9ca5eb9(Integer minProd, Integer ans, Integer[] nums, Integer n, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_6c6663b86114496daa2d43a8d06c1847(Integer ans, Integer maxProd, Integer[] nums, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_60bac076d34f4868b3bdefaab1b48177(Integer maxProd, Integer ans, Integer[] nums, Integer n, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1597 ******
public static Integer func_62d6430add9a44a19f647e0268bc4012(Integer maxProduct, Integer[] nums, Integer n, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_7de91704b6f2402eaca3778250071771(Integer currentProduct, Integer[] nums, Integer n, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1598 ******
public static Integer func_981d7875d94348ea90b9464aba048da9(Integer maxProduct, Integer n, Integer[] nums, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_fe35c7c028d34271be855acb0c98cab1(Integer currentProduct, Integer n, Integer[] nums, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1599 ******
public static Integer func_bf30725d0fae405a84dc8279755a656d(Integer maxProduct, Integer n, Integer currentProduct, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_c0a5d3f8a3334a1baf1d3dbd6fcd2b22(Integer currentProduct, Integer n, Integer maxProduct, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1206 ******
public static Integer func_b3a45c4d1d8c4285abd2753396555b4c(Integer minProd, Integer[] nums, Integer ans, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_df3cebf4e77a460d964ae8d2e46e0761(Integer maxProd, Integer[] nums, Integer ans, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_339b1b6830874b06a48491db7ae4f867(Integer minProd, Integer[] nums, Integer maxProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_a502a6d6e1ff4d1aacd37cb1b90fc975(Integer ans, Integer[] nums, Integer maxProd, Integer minProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_5d4bf907a3cc40d485b0a41a16c6a7cf(Integer maxProd, Integer[] nums, Integer minProd, Integer ans, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_01d2793c178a40229ecbaa69cc36e5bb(Integer ans, Integer[] nums, Integer minProd, Integer maxProd, Integer n){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1600 ******
public static Integer func_92c2d959dfa440acb70ef9377c924078(Integer[] nums, Integer n, Integer maxProduct, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_637f8fbf82ae4b549715c08a0b5c505a(Integer[] nums, Integer n, Integer currentProduct, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1601 ******
public static Integer func_2d3c75a386224e2abcc7f13acbb9a57f(Integer n, Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_7c75c59b4cb64616b14bb63298bfa927(Integer n, Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1602 ******
public static Integer func_c6a9d0d08e0a45ceb384188b064f041e(Integer n, Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_25fab3301bd247119d1d5fd5fc30f203(Integer n, Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1603 ******
public static Integer func_d1f1cf79719440029bfc394a7ea69249(Integer n, Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_92a9f6e2dd204d37a6fbd286dd449e48(Integer n, Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 409 ******
public static Integer func_983bb4dbf7bc44118ef2fa89d8bb68bc(Integer maxProd, Integer[] nums, Integer currProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_4b523805b1ff48f9af51d793e936de08(Integer maxProd, Integer[] nums, Integer currProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_d481da8963b247b1b7121206ee3f6d57(Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_0adc94f081cd45d492ae7e3a307d96bd(Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 408 ******
public static Integer func_d6944867dbe44d228276eaed974c6a3a(Integer currProd, Integer maxProd, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_be8d8fd7dc4d44ccb012542a4da557c8(Integer currProd, Integer maxProd, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_29b46198000643b4ad41aa7dd91a029e(Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_e747a68f7d6443529fb6b622769231a6(Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1604 ******
public static Integer func_a768aa1660db463395068526b5098623(Integer[] nums, Integer n, Integer currentProduct, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_4ef06d4de7544c45a492d75f879bc5a2(Integer[] nums, Integer n, Integer maxProduct, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 410 ******
public static Integer func_bc0c03a800ba48478ea70e15d51d16aa(Integer maxProd, Integer currProd, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_591049dfac3748c8958727e726f97af6(Integer maxProd, Integer currProd, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_ec5bebbb3e6b4ffb965a020dec7370f0(Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_cc9ab5ecdf4d452184441c733081d86b(Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 411 ******
public static Integer func_47f02619d4ff4b92a6fd41c9c8f4a069(Integer[] nums, Integer currProd, Integer maxProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_adea3c48833745eea2919b788120faac(Integer[] nums, Integer currProd, Integer maxProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_f3e9761dc86543779dfbbfd2373eecd3(Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_1a2b66a54da24da4a6ee50a1bc2c27e7(Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 412 ******
public static Integer func_139a36ed01d34d4d819bd30785564275(Integer currProd, Integer[] nums, Integer maxProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_9f774e7236a940bc81e5157be788f8c0(Integer currProd, Integer[] nums, Integer maxProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_6280e8ab151443019c3061c460fa7532(Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_6634916fbdd24bac8bcb70c54d05f87e(Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 413 ******
public static Integer func_578aa31d91644eb9bcecb34bcff21bb5(Integer[] nums, Integer maxProd, Integer currProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_4e6bc0219a974ffa827591e032f65007(Integer[] nums, Integer maxProd, Integer currProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return currProd;
}
public static Integer func_6fa5c32acfb44aa6a7096b8c6a257239(Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return currentProduct;
}
public static Integer func_1c88f77ca6ed452da751946add23fda7(Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 414 ******
public static Integer func_4d43595886eb42b18730735b9c6fe210(Integer currProd, Integer maxProd, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_cc92ca85e2214cde9db3f729f8e8d4b8(Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 415 ******
public static Integer func_46e73c909895495f83d71fa3a15386ab(Integer maxProd, Integer currProd, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_956826cd13bf4f05ba0c6a57024703f8(Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 416 ******
public static Integer func_c82fc71af33e420096658e2b091653ed(Integer maxProd, Integer[] nums, Integer currProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_0fdf0557403a4c079656839d5990c771(Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 417 ******
public static Integer func_688c777f84784602807c1793c63ef702(Integer currProd, Integer[] nums, Integer maxProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_3b3c557aab984704bbf0323994769736(Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 418 ******
public static Integer func_2c437ef4c76944fb9129fd6fd0d814bf(Integer[] nums, Integer currProd, Integer maxProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_7e20612e4ed244b0bcd7ad65fc9b8422(Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 419 ******
public static Integer func_0245988c2302456680f672967c779aa8(Integer[] nums, Integer maxProd, Integer currProd){
    for (int i = 0; i < nums.length; i++) {
        // 158
        // 159
        currProd *= nums[i];
        // 160
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 161
            // 162
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_a278ec35e9b049f492a0fa2f25bb7e27(Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = 0; i < nums.length; i++) {
        // 34
        // 35
        currentProduct *= nums[i];
        // 36
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 37
            // 38
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 1606 ******
public static Integer func_dcce3fe05b924246a8ec0223b2efee55(Integer n, Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_d189762101eb4f6780d8275fa9d9d5cd(Integer n, Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 1595 ******
public static Integer func_9c331dbc81a04a5c9f9ff5312965be35(Integer currentProduct, Integer n, Integer maxProduct, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_96c1e136f13a400ea35c7ecfed80dc32(Integer maxProduct, Integer n, Integer currentProduct, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 426 ******
public static Integer func_953895d64db14b98a8f061ca92533d1b(Integer currProd, Integer maxProd, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_4d4073acad82439f919295f35e5dd150(Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 1607 ******
public static Integer func_dcd439287c674a9593adeec3264f3c6a(Integer n, Integer currentProduct, Integer maxProduct, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return maxProduct;
}
public static Integer func_ff1fb8a87ddb4f3c8f0f745016eab649(Integer n, Integer maxProduct, Integer currentProduct, Integer[] nums){
    for (int i = 0; i < n; i++) {
        // 91
        // 92
        currentProduct = currentProduct * nums[i];
        if (currentProduct > maxProduct) {
            // 93
            // 94
            maxProduct = currentProduct;
        }
        if (nums[i] == 0) {
            // 95
            // 96
            currentProduct = 1;
        }
    }
    return currentProduct;
}


****** Cluster 428 ******
public static Integer func_91d6d0faeb2748e7899c53dbee038cf1(Integer maxProd, Integer[] nums, Integer currProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_c702b1b616364eaa9d13be07e5850a8f(Integer maxProduct, Integer[] nums, Integer currentProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 429 ******
public static Integer func_e1821cdc9b244c6eb094492c8f491cb2(Integer currProd, Integer[] nums, Integer maxProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_6e0d8a0e05244b75aaabf8de75460a60(Integer currentProduct, Integer[] nums, Integer maxProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 430 ******
public static Integer func_f7a9c83779b945008b4d1ce1e355fb13(Integer[] nums, Integer currProd, Integer maxProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_c5d9f821a96f451db9550a0c872f7135(Integer[] nums, Integer currentProduct, Integer maxProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 431 ******
public static Integer func_c876371a5d1543c18084de78b07d2868(Integer[] nums, Integer maxProd, Integer currProd){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 164
        // 165
        currProd *= nums[i];
        // 166
        maxProd = Math.max(maxProd, currProd);
        if (currProd == 0) {
            // 167
            // 168
            currProd = 1;
        }
    }
    return maxProd;
}
public static Integer func_720a29ca47b84d398f4c6e1b06a0dcc2(Integer[] nums, Integer maxProduct, Integer currentProduct){
    for (int i = nums.length - 1; i >= 0; i--) {
        // 40
        // 41
        currentProduct *= nums[i];
        // 42
        maxProduct = Math.max(maxProduct, currentProduct);
        if (currentProduct == 0) {
            // 43
            // 44
            currentProduct = 1;
        }
    }
    return maxProduct;
}


****** Cluster 1203 ******
public static Integer func_9df058eee24a4ceb992b56e683792ae6(Integer minProd, Integer[] nums, Integer n, Integer ans, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_b3d1174e206a4455b00aeea4bcfde110(Integer maxProd, Integer[] nums, Integer n, Integer ans, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_90935dec30294bf2bca7806b1d9c6b7a(Integer minProd, Integer[] nums, Integer n, Integer maxProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_b7d24a2fbcc041df8877b5baffd0b7f3(Integer ans, Integer[] nums, Integer n, Integer maxProd, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_99b3b50f26ba4253a85fb709dff4e324(Integer maxProd, Integer[] nums, Integer n, Integer minProd, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_e67adb6ec0e04d2ba8ed1f2689106825(Integer ans, Integer[] nums, Integer n, Integer minProd, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1192 ******
public static Integer func_1cf3f30e1ca3428c9344ac803ebf239a(Integer n, Integer ans, Integer minProd, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_412dc8bd3a004079be5fe4062d35e023(Integer n, Integer ans, Integer maxProd, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_70ebe7fcff49427ca96c9c0d28d4fd39(Integer n, Integer maxProd, Integer minProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_7dc353fb515c4c73bc25c332e50a7604(Integer n, Integer maxProd, Integer ans, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_e5d89f35bcd84931a1984c9276774183(Integer n, Integer minProd, Integer maxProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_a401bda51e974c62b1cd6ed3e4812e7e(Integer n, Integer minProd, Integer ans, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}


****** Cluster 1193 ******
public static Integer func_1b5df131c13042659373a98f469f2b4e(Integer ans, Integer n, Integer minProd, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_b41602a7b40c49f59483f8bb3c67bcad(Integer ans, Integer n, Integer maxProd, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return ans;
}
public static Integer func_cf52f7926a324385b900d049e0a46de5(Integer maxProd, Integer n, Integer minProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_d9f4cd6921c44f09a3ac2334c3fc5f35(Integer maxProd, Integer n, Integer ans, Integer[] nums, Integer minProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return maxProd;
}
public static Integer func_86e28d0a5ea240b189e8086786b47add(Integer minProd, Integer n, Integer maxProd, Integer[] nums, Integer ans){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}
public static Integer func_73599cff39084cb39160347d0ab3978c(Integer minProd, Integer n, Integer ans, Integer[] nums, Integer maxProd){
    for (int i = 1; i < n; i++) {
        // 69
        if (nums[i] < 0) {
            // 70
            // 71
            int temp = maxProd;
            // 72
            maxProd = minProd;
            // 73
            minProd = temp;
        }
        // 74
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        // 75
        minProd = Math.min(nums[i], minProd * nums[i]);
        // 76
        ans = Math.max(ans, maxProd);
    }
    return minProd;
}