

****** Cluster 6 ******
public static Integer func_2efc78ac13844577a57f2f1f4d4ada5b(String s, Integer maxLength, Integer start){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_d19b7d85801d41f18d0a92e05046765a(String s, Integer maxLength, Integer start){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_f4e14706466449f3b8aaf9a796a10f4f(String s, Integer maxLength, Integer start){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}


****** Cluster 7 ******
public static Integer func_fb6642ae52a24945873b24a0bb2a5587(Integer maxLength, Integer start, String s){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_0320d5c1150e49b9bb4e3c791bb6b551(Integer maxLength, Integer start, String s){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_02286ae1089343c79dacee473d608d15(Integer maxLength, Integer start, String s){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}


****** Cluster 8 ******
public static Integer func_835f6e91115743c1acaabc619a282dd5(Integer maxLength, String s, Integer start){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_f1adb0a7adda4089a0215cffabcb0ca6(Integer maxLength, String s, Integer start){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_66579a725b954235b2e68a46d3d896d9(Integer maxLength, String s, Integer start){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}


****** Cluster 9 ******
public static Integer func_cf95bbc489f84151b858781ec434571b(String s, Integer start, Integer maxLength){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_88636b1001d6428f9b112bf333c79e01(String s, Integer start, Integer maxLength){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_ae738703cb5c43459b7468e731021f77(String s, Integer start, Integer maxLength){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}


****** Cluster 10 ******
public static Integer func_84031d90d8c646bd9cfb928736b87313(Integer start, String s, Integer maxLength){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_b9492dd92c634de99e01d8c375ec5c00(Integer start, String s, Integer maxLength){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_457918dd238a46a8be444192b97fbd90(Integer start, String s, Integer maxLength){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}


****** Cluster 11 ******
public static Integer func_c8f53c33848b48c983e209057692b71d(Integer start, Integer maxLength, String s){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_9d6cc38e79c742ddba70960226829da9(Integer start, Integer maxLength, String s){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_3f2cdc57f53d4d54b031a734e30313d3(Integer start, Integer maxLength, String s){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}


****** Cluster 12 ******
public static Integer func_f787132002634227b80ccafddaef5446(String s, Integer maxLength, Integer start){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_88e771e781fc449c9e4c620001ed70ca(String s, Integer maxLength, Integer start){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_877181fcefe04450a66b5c6058653813(String s, Integer maxLength, Integer start){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}


****** Cluster 13 ******
public static Integer func_07ab58c2de0342aa8a6f24c307966c46(Integer maxLength, String s, Integer start){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_4339190ac91c4d3baa9b6a9f2703ec28(Integer maxLength, String s, Integer start){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_08e93391867948e19fdd5abffff0d2c8(Integer maxLength, String s, Integer start){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}


****** Cluster 14 ******
public static Integer func_58ce19d2258f4924a6f0ace10d80ac7c(String s, Integer start, Integer maxLength){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_47695ccb59684a35bb38c784a7961ba2(String s, Integer start, Integer maxLength){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_18b7aff07e3b4ad38931b74ced44b4b8(String s, Integer start, Integer maxLength){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}


****** Cluster 15 ******
public static Integer func_c5844e97c3714e4e95798d320f69619d(Integer maxLength, Integer start, String s){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_33337075152e42c6a05b7048eabfdf6b(Integer maxLength, Integer start, String s){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_1ff6a1c313b44438b97e3e97636c8203(Integer maxLength, Integer start, String s){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}


****** Cluster 16 ******
public static Integer func_9e8041f1942f4726a94cfb4868075360(Integer start, String s, Integer maxLength){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_489435c56cd14e5ba9312ab7eb6cec54(Integer start, String s, Integer maxLength){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_c2b0f454457c443e989cdd5a87adf852(Integer start, String s, Integer maxLength){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}


****** Cluster 17 ******
public static Integer func_be84c50d4cbc4eecab3bf4f3c168c276(Integer start, Integer maxLength, String s){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_b6db7e9482cd41e794e2232eecf19601(Integer start, Integer maxLength, String s){
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_ffec25902ea94c7e94769664706de0fa(Integer start, Integer maxLength, String s){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}


****** Cluster 18 ******
public static Integer func_e4581828b2054dcfbfa65876b746641e(String s, Integer maxLength){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_a510add65f704c59af8bb02acf7628ae(String s, Integer maxLength){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_5afb08395a5d4d5fbf5c489938d1732c(String s, Integer maxLength){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}
public static Integer func_eb790cdab2fb415492bde9a72902940b(String s, Integer maxLength){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return end;
}
public static Integer func_7d492f539639491bab5b52c3488d742a(String s, Integer maxLength){
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_df36174bd0d042ff9dae12693a4d69d6(String s, Integer maxLength){
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}


****** Cluster 19 ******
public static Integer func_2120ee32fe66445ba639d342ffb8989a(Integer maxLength, String s){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_cff30db4f5674abb9e87125e7dc53c6b(Integer maxLength, String s){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_c45b937c979444cd897c1b7e5d4d7d1a(Integer maxLength, String s){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}
public static Integer func_c4cf27d9e05c4acfbc73be71f7bb3534(Integer maxLength, String s){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return end;
}
public static Integer func_c88b605f56bd4af3b4361225a8713cc3(Integer maxLength, String s){
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_5474cb464cf44c49aac0dcc0a8f7d69a(Integer maxLength, String s){
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}


****** Cluster 20 ******
public static Integer func_f43d7ee45f60416f9bb282f6d512b78d(Integer maxLength, String s){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return start;
}
public static Integer func_33430c941bb74ea19d0004960465aa20(Integer maxLength, String s){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return start;
}
public static Integer func_7005e099e20249f7a4b12aa91180c177(Integer maxLength, String s){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return start;
}
public static Integer func_9903d47a396140f3887ecf062235e7e2(Integer maxLength, String s){
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return left;
}
public static Integer func_d3e701c78fb54458aeb59897e0e5a665(Integer maxLen, String s){
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}
public static Integer func_a6cef1d7af874902933bad98aa5ba1e2(Integer maxLength, String s){
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return left;
}


****** Cluster 21 ******
public static Integer func_95663a9936694e5aa480589e8291cdba(String s, Integer maxLength){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return start;
}
public static Integer func_78db279986be4824b55550a6d29b0448(String s, Integer maxLength){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return start;
}
public static Integer func_ba65a54268244f1495496f2bc3408e3d(String s, Integer maxLength){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return start;
}
public static Integer func_f18e80ff5678463d8d3dd37ed30d1112(String s, Integer maxLength){
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return left;
}
public static Integer func_0ae7e960aa6a4121acf6bcad2e38ea46(String s, Integer maxLen){
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}
public static Integer func_7de479a2cea541c2a97f96ed3cbc0e2a(String s, Integer maxLength){
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return left;
}


****** Cluster 22 ******
public static Integer func_fdab2b28a0b6424887e0dd8b0aeddd6b(String s, Integer maxLength){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_2fbf1a1f90e34c30b06947d767677793(String s, Integer maxLength){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_9ac42dc0e82c4275a4a570b4d055d97c(String s, Integer maxLength){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}
public static Integer func_566d74d9af9f4c4293b02491d1fac39b(String s, Integer maxLength){
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_9bfd436fe88f40c9b68c872507345630(String s, Integer maxLen){
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}
public static Integer func_70d8ab950bb94ad68d2f5046e07fd835(String s, Integer maxLength){
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}


****** Cluster 23 ******
public static Integer func_bdd4c73735ca44cd9d67b7832680d946(Integer maxLength, String s){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_9671ce21c2154c0c8182a7510b7c1108(Integer maxLength, String s){
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_4d731a887030468d8656ba6755f6d141(Integer maxLength, String s){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}
public static Integer func_8851fa372ae64106aa983e3b2e1ce77d(Integer maxLength, String s){
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_1e1ec2f47f934ee3bb56e86165dfabf3(Integer maxLen, String s){
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}
public static Integer func_a086ae2519594692a5b004b37e9dbe53(Integer maxLength, String s){
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}


****** Cluster 36 ******
public static Integer func_e97edb46000448e5a8c96d58d08e2be8(String s){
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_529e94839b0f45dc8b80b83734cac223(String s){
    if (s == null || s.length() == 0) {
        // 1
        return 0;
    }
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return end;
}
public static Integer func_69b5f34ef51341baacf648264c11e496(String s){
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_ada6659bae9b4478b3144521472021c3(String s){
    if (s == null || s.length() == 0) {
        // 1
        return 0;
    }
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return end;
}
public static Integer func_3c8b5712df12488d88f53ed4c81e1fcc(String s){
    // 28
    int n = s.length();
    // 29
    int maxLength = 0;
    return n;
}
public static Integer func_52b14599581243ea85b9122e4073663b(String s){
    // 28
    int n = s.length();
    // 29
    int maxLength = 0;
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return n;
}
public static Integer func_6c36fa00ee7a457e91212aee8585e2aa(String s){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    return n;
}
public static Integer func_45517784022e492ebcfea16037779cc2(String s){
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    return n;
}
public static Integer func_da1138399d58485f9780e5dd31a51d82(String s){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    return n;
}
public static Integer func_f6b2d68446a04fa3b8c37d1a38b029d0(String s){
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    return n;
}
public static Integer func_1817e953aafe41f3a950c82c4be12692(String s){
    // 38
    int maxLength = 0;
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    return n;
}
public static Integer func_33d38afe332b4e12b7b548de8f957525(String s){
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    return n;
}
public static Integer func_e338df8fc28d4888a5e14cdca6d1c675(String s){
    // 38
    int maxLength = 0;
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    return n;
}
public static Integer func_e36ff8ffa3864fd5bdb55cae63b93878(String s){
    // 38
    int maxLength = 0;
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return n;
}
public static Integer func_cbc0454d96094456a0481bf15219fda8(String s){
    // 38
    int maxLength = 0;
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return end;
}
public static Integer func_04bbd7d088ad426b8d5eddf1f515058f(String s){
    // 49
    int n = s.length();
    // 50
    int ans = 0;
    return n;
}
public static Integer func_1b30f5682b0c472bbafabe421b53a6af(String s){
    // 49
    int n = s.length();
    // 50
    int ans = 0;
    // 51
    Map<Character, Integer> map = new HashMap<>();
    return n;
}
public static Integer func_303e427df66e49549c22d65a034ea286(String s){
    // 49
    int n = s.length();
    // 50
    int ans = 0;
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return n;
}
public static Integer func_98fb91146d3249cea3c1435c6acd23ac(String s){
    // 57
    int maxLength = 0;
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_f2dfaaaee8a04a77b454d8531582c1a6(String s){
    // 79
    int n = s.length();
    // 80
    int ans = 0;
    return n;
}
public static Integer func_72fd5ee8313142c68814bdcf884429b5(String s){
    // 79
    int n = s.length();
    // 80
    int ans = 0;
    // 81
    int[] index = new int[128];
    return n;
}
public static Integer func_19d3c9446e9447b8864b4110be9360f9(String s){
    // 79
    int n = s.length();
    // 80
    int ans = 0;
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return n;
}
public static Integer func_6e2cb7dcab55449790a1e15ba95b6648(String s){
    // 86
    int n = s.length(), ans = 0;
    // 87
    int i = 0, j = 0;
    return n;
}
public static Integer func_1374c864991347aaae24383c5d6936a4(String s){
    // 86
    int n = s.length(), ans = 0;
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    return n;
}
public static Integer func_d6ed46a5f2e2489787ff75188ade5d2f(String s){
    // 86
    int n = s.length(), ans = 0;
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_ac89087631e94617a8e3965702e6c18f(String s){
    // 86
    int n = s.length(), ans = 0;
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return n;
}
public static Integer func_880de05c218c4486b5ab877a6e6a4d46(String s){
    // 95
    int n = s.length();
    // 96
    HashSet<Character> set = new HashSet<>();
    return n;
}
public static Integer func_20788d19c96742b6b819719a1c6ceedd(String s){
    // 95
    int n = s.length();
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    return n;
}
public static Integer func_0fb2fe17f2db405cbb4eeb8a519e5dff(String s){
    // 95
    int n = s.length();
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return n;
}
public static Integer func_18c5d1a992234dbeada111f0d3df4784(String s){
    // 95
    int n = s.length();
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_b33a6ed1181d42e2a8c54762dea91e5d(String s){
    // 104
    int n = s.length();
    // 105
    int maxLength = 0;
    return n;
}
public static Integer func_465a47937fb341bfbd9b7343ee0acf88(String s){
    // 104
    int n = s.length();
    // 105
    int maxLength = 0;
    // 106
    int[] index = new int[128];
    return n;
}
public static Integer func_884561038a0c4012873f015cda561318(String s){
    // 104
    int n = s.length();
    // 105
    int maxLength = 0;
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return n;
}
public static Integer func_24a8280d67264c7e97aa44871342b991(String s){
    // 111
    int n = s.length();
    // 112
    int ans = 0;
    return n;
}
public static Integer func_d57b882b3347469c9ba77ca6a33e945f(String s){
    // 111
    int n = s.length();
    // 112
    int ans = 0;
    // 113
    int[] index = new int[128];
    return n;
}
public static Integer func_da0dee65a7174600be067c43aeaf13a3(String s){
    // 111
    int n = s.length();
    // 112
    int ans = 0;
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return n;
}
public static Integer func_52f9f8dceece42099db14d102671c0a4(String s){
    // 118
    int n = s.length();
    // 119
    Set<Character> set = new HashSet<>();
    return n;
}
public static Integer func_b03e828107bd461eb727eed63ee83c93(String s){
    // 118
    int n = s.length();
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    return n;
}
public static Integer func_028de27f43254ab48cd3206a89fcbc92(String s){
    // 118
    int n = s.length();
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return n;
}
public static Integer func_4cc15f14405f410ca42b70664cab246c(String s){
    // 118
    int n = s.length();
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_a19a46e725f14c7b83c5e298171e4ad6(String s){
    // 127
    int maxLength = 0;
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}
public static Integer func_b856f59fba154d2ca05b1dd9e717b25a(String s){
    // 154
    int n = s.length();
    // 155
    int result = 0;
    return n;
}
public static Integer func_969654ca00084721adcc44f8108fd090(String s){
    // 154
    int n = s.length();
    // 155
    int result = 0;
    // 156
    int[] index = new int[128];
    return n;
}
public static Integer func_6022fa2ef2fb4076bdce66921a3345dc(String s){
    // 154
    int n = s.length();
    // 155
    int result = 0;
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return n;
}
public static Integer func_17168019cf7f40e9b07f188b389a4a93(String s){
    // 161
    int n = s.length();
    // 162
    int[] visited = new int[256];
    return n;
}
public static Integer func_8a5eb55a272d4aefbfbb45f1ffb5001f(String s){
    // 161
    int n = s.length();
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    return n;
}
public static Integer func_5a47243be5234981966ac89bc4bea048(String s){
    // 161
    int n = s.length();
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    return n;
}
public static Integer func_1af7950c7b2d47d38cc0529e7fe71087(String s){
    // 161
    int n = s.length();
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    return n;
}
public static Integer func_8acf6bf0da654fc58c78c4352365f3fa(String s){
    // 161
    int n = s.length();
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        // 167
        // 168
        int currentChar = s.charAt(i);
        if (visited[currentChar] >= start) {
            // 169
            // 170
            start = visited[currentChar] + 1;
        }
        // 171
        visited[currentChar] = i;
        // 172
        maxLength = Math.max(maxLength, i - start + 1);
    }
    return n;
}
public static Integer func_f8e8c91a8bc94cb990a6c6ed737b98e2(String s){
    // 173
    int n = s.length();
    // 174
    int maxLength = 0;
    return n;
}
public static Integer func_e90e6b061a2f4739ac18b5cd43aedfb8(String s){
    // 173
    int n = s.length();
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    return n;
}
public static Integer func_b17c625cf49c4951a861b888a57b44c8(String s){
    // 173
    int n = s.length();
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    return n;
}
public static Integer func_787851c19b8445ba84c3460ce4f2f43a(String s){
    // 173
    int n = s.length();
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    return n;
}
public static Integer func_c48ae86aea54406dbf13512b68b85403(String s){
    // 173
    int n = s.length();
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return n;
}
public static Integer func_8ac13616a4c1460b86588c15111678b2(String s){
    // 182
    int[] chars = new int[128];
    // 183
    int left = 0, right = 0;
    // 184
    int maxLength = 0;
    while (right < s.length()) {
        // 185
        // 186
        char c = s.charAt(right);
        // 187
        chars[c]++;
        while (chars[c] > 1) {
            // 188
            // 189
            char leftChar = s.charAt(left);
            // 190
            chars[leftChar]--;
            // 191
            left++;
        }
        // 192
        maxLength = Math.max(maxLength, right - left + 1);
        // 193
        right++;
    }
    return right;
}


****** Cluster 37 ******
public static Integer func_4291b2a4f57b46d484ebbcf310fa9793(String s){
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_28fa2810952a4b349e9e8acc6da2fa92(String s){
    if (s == null || s.length() == 0) {
        // 1
        return 0;
    }
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return maxLength;
}
public static Integer func_8ed8653807a64275b52157e25422e105(String s){
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_8e2526008f1d4dbdbe09a05494336357(String s){
    if (s == null || s.length() == 0) {
        // 1
        return 0;
    }
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static Integer func_135d173ec4434cd3a4b01af492976f15(String s){
    // 19
    int left = 0;
    // 20
    int maxLength = 0;
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static Integer func_4bd86153103d401da600729b60280b83(String s){
    if (s == null || s.length() == 0) {
        // 18
        return 0;
    }
    // 19
    int left = 0;
    // 20
    int maxLength = 0;
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static Integer func_8334bc34d1874036bc06d60575463a66(String s){
    // 28
    int n = s.length();
    // 29
    int maxLength = 0;
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_ee9e9040a9714a2a91b7df8dfee6a375(String s){
    // 38
    int maxLength = 0;
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}
public static Integer func_3d77c7b7e91f428e9b2819b234f6a921(String s){
    // 49
    int n = s.length();
    // 50
    int ans = 0;
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_a11088fddac7435db328e9ad78e90f3d(String s){
    // 57
    int maxLength = 0;
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_ab8304100d6048b0ba6539e30df42911(String s){
    // 70
    int maxLen = 0;
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}
public static Integer func_3188a93ae8cd40f9a9725f93b114392b(String s){
    if (s == null || s.length() == 0) {
        // 69
        return 0;
    }
    // 70
    int maxLen = 0;
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}
public static Integer func_f0271ca755114691a00ee219c35649d8(String s){
    // 79
    int n = s.length();
    // 80
    int ans = 0;
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_9ff0c9a76f674b02a80b3a3a81bb207a(String s){
    // 86
    int n = s.length(), ans = 0;
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_b3cf96f7a6c0462c97a024638f164df8(String s){
    // 95
    int n = s.length();
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_bc52de981d394028bd5dd7f7ee7f26ae(String s){
    // 104
    int n = s.length();
    // 105
    int maxLength = 0;
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_7cd03d7ae07a4e8e859e0717c71f2174(String s){
    // 111
    int n = s.length();
    // 112
    int ans = 0;
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_ef51562ba3564788a6af367376b98511(String s){
    // 118
    int n = s.length();
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_dcb55e295ce3409cb1f1352ab3ce636a(String s){
    // 127
    int maxLength = 0;
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}
public static Integer func_3b5ad4b81d33402984219c6d79c7805e(String s){
    // 139
    int[] characters = new int[128];
    // 140
    int maxLength = 0, start = 0;
    for (int end = 0; end < s.length(); end++) {
        // 141
        // 142
        char c = s.charAt(end);
        // 143
        start = Math.max(start, characters[c]);
        // 144
        maxLength = Math.max(maxLength, end - start + 1);
        // 145
        characters[c] = end + 1;
    }
    return maxLength;
}
public static Integer func_5f16ae6515564b3bac432124766e5e1c(String s){
    // 146
    int[] visited = new int[256];
    // 147
    int maxLen = 0, left = 0;
    for (int i = 0; i < s.length(); i++) {
        // 148
        if (visited[s.charAt(i)] == 0 || visited[s.charAt(i)] < left) {
            // 149
            // 150
            maxLen = Math.max(maxLen, i - left + 1);
        } else {
            // 151
            // 152
            left = visited[s.charAt(i)];
        }
        // 153
        visited[s.charAt(i)] = i + 1;
    }
    return maxLen;
}
public static Integer func_6f7baa4623f94e379625c10af733e1b0(String s){
    // 154
    int n = s.length();
    // 155
    int result = 0;
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_f03af54c3dda4f6ca00f01ee3a278368(String s){
    // 161
    int n = s.length();
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        // 167
        // 168
        int currentChar = s.charAt(i);
        if (visited[currentChar] >= start) {
            // 169
            // 170
            start = visited[currentChar] + 1;
        }
        // 171
        visited[currentChar] = i;
        // 172
        maxLength = Math.max(maxLength, i - start + 1);
    }
    return maxLength;
}
public static Integer func_c39640450e0148a0a456750c12091fe0(String s){
    // 173
    int n = s.length();
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}
public static Integer func_f154fd10168c469aaaf233df9ee42feb(String s){
    // 182
    int[] chars = new int[128];
    // 183
    int left = 0, right = 0;
    // 184
    int maxLength = 0;
    while (right < s.length()) {
        // 185
        // 186
        char c = s.charAt(right);
        // 187
        chars[c]++;
        while (chars[c] > 1) {
            // 188
            // 189
            char leftChar = s.charAt(left);
            // 190
            chars[leftChar]--;
            // 191
            left++;
        }
        // 192
        maxLength = Math.max(maxLength, right - left + 1);
        // 193
        right++;
    }
    return maxLength;
}


****** Cluster 38 ******
public static Integer func_0ec95b8d370f4555ad82ba77a2a4d081(String s){
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return start;
}
public static Integer func_01c45f1089ce4115b49139b3d5ce8b1b(String s){
    if (s == null || s.length() == 0) {
        // 1
        return 0;
    }
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    return start;
}
public static Integer func_e0c88e9e4d1444a0a779e063dd3b6a4e(String s){
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return start;
}
public static Integer func_089770aabf9144c4ab403e36ca94e5d6(String s){
    if (s == null || s.length() == 0) {
        // 1
        return 0;
    }
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return start;
}
public static Integer func_c7d548582ce04255b215ad5be7ed58a7(String s){
    // 19
    int left = 0;
    // 20
    int maxLength = 0;
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return left;
}
public static Integer func_f89f479558be41d28a8901df90b118d8(String s){
    if (s == null || s.length() == 0) {
        // 18
        return 0;
    }
    // 19
    int left = 0;
    // 20
    int maxLength = 0;
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return left;
}
public static Integer func_6c8a6415bef94daaa1478fee528ba909(String s){
    // 38
    int maxLength = 0;
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return start;
}
public static Integer func_4d637db5f3bc4ec9a350a152e3290a24(String s){
    // 57
    int maxLength = 0;
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return left;
}
public static Integer func_3b3b898e632647e384cbd6cfe0ac3482(String s){
    // 70
    int maxLen = 0;
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}
public static Integer func_782550cf33674385bd830dbf2d879ab1(String s){
    if (s == null || s.length() == 0) {
        // 69
        return 0;
    }
    // 70
    int maxLen = 0;
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}
public static Integer func_979eaf3b3af143e3b06dac536e1b8f0d(String s){
    // 86
    int n = s.length(), ans = 0;
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_4f183129b0654955900d5cff0bcce4b1(String s){
    // 95
    int n = s.length();
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_41646f90b3ea4af09cf9a98542fd5ca9(String s){
    // 118
    int n = s.length();
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_d7802a3758cd4f77a736adfb059c2668(String s){
    // 127
    int maxLength = 0;
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return left;
}
public static Integer func_0eb31b99e7654480a114492f0c0127fb(String s){
    // 139
    int[] characters = new int[128];
    // 140
    int maxLength = 0, start = 0;
    for (int end = 0; end < s.length(); end++) {
        // 141
        // 142
        char c = s.charAt(end);
        // 143
        start = Math.max(start, characters[c]);
        // 144
        maxLength = Math.max(maxLength, end - start + 1);
        // 145
        characters[c] = end + 1;
    }
    return start;
}
public static Integer func_67189a2a594544eb829ee955351acb69(String s){
    // 146
    int[] visited = new int[256];
    // 147
    int maxLen = 0, left = 0;
    for (int i = 0; i < s.length(); i++) {
        // 148
        if (visited[s.charAt(i)] == 0 || visited[s.charAt(i)] < left) {
            // 149
            // 150
            maxLen = Math.max(maxLen, i - left + 1);
        } else {
            // 151
            // 152
            left = visited[s.charAt(i)];
        }
        // 153
        visited[s.charAt(i)] = i + 1;
    }
    return left;
}
public static Integer func_8950f8977ba5417a961899121948f98c(String s){
    // 161
    int n = s.length();
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        // 167
        // 168
        int currentChar = s.charAt(i);
        if (visited[currentChar] >= start) {
            // 169
            // 170
            start = visited[currentChar] + 1;
        }
        // 171
        visited[currentChar] = i;
        // 172
        maxLength = Math.max(maxLength, i - start + 1);
    }
    return start;
}
public static Integer func_43cd4464af874ea6903c52b46f732e33(String s){
    // 173
    int n = s.length();
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}
public static Integer func_bdef050f9cb2452e8284030fb834ed03(String s){
    // 182
    int[] chars = new int[128];
    // 183
    int left = 0, right = 0;
    // 184
    int maxLength = 0;
    while (right < s.length()) {
        // 185
        // 186
        char c = s.charAt(right);
        // 187
        chars[c]++;
        while (chars[c] > 1) {
            // 188
            // 189
            char leftChar = s.charAt(left);
            // 190
            chars[leftChar]--;
            // 191
            left++;
        }
        // 192
        maxLength = Math.max(maxLength, right - left + 1);
        // 193
        right++;
    }
    return left;
}


****** Cluster 135 ******
public static Integer func_2e0a752402c84cc3b3df1a34ba156381(Integer maxLength, Integer right, Integer left){
    // 64
    maxLength = Math.max(maxLength, right - left + 1);
    // 65
    right++;
    return maxLength;
}
public static Integer func_cc1171c75e41400586beb8f6c62b192e(Integer maxLength, Integer right, Integer left){
    // 134
    right++;
    // 135
    maxLength = Math.max(maxLength, right - left);
    return maxLength;
}
public static Integer func_39dd478623ea4b818d82d746d739199d(Integer maxLength, Integer right, Integer left){
    // 192
    maxLength = Math.max(maxLength, right - left + 1);
    // 193
    right++;
    return maxLength;
}


****** Cluster 136 ******
public static Integer func_a33df6a1530440c19ef4986273dd0b3e(Integer maxLength, Integer left, Integer right){
    // 64
    maxLength = Math.max(maxLength, right - left + 1);
    // 65
    right++;
    return maxLength;
}
public static Integer func_55309d4887114f558954ddbbc37eb5d1(Integer maxLength, Integer left, Integer right){
    // 134
    right++;
    // 135
    maxLength = Math.max(maxLength, right - left);
    return maxLength;
}
public static Integer func_589266ee033c4c3c85c834afc0d48c67(Integer maxLength, Integer left, Integer right){
    // 192
    maxLength = Math.max(maxLength, right - left + 1);
    // 193
    right++;
    return maxLength;
}


****** Cluster 54 ******
public static Integer func_878c22c94df041369f35ab8b9efa1bc8(Integer maxLength, String s, Integer left){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static Integer func_a10f2c988e834ed894a81aafbdd7048e(Integer maxLen, String s, Integer start){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}


****** Cluster 137 ******
public static Integer func_d0d0cc352dd4465a8aab12f2eaa31fae(Integer right, Integer left, Integer maxLength){
    // 64
    maxLength = Math.max(maxLength, right - left + 1);
    // 65
    right++;
    return maxLength;
}
public static Integer func_4148945b1c5241a9b33345d649335a75(Integer right, Integer left, Integer maxLength){
    // 134
    right++;
    // 135
    maxLength = Math.max(maxLength, right - left);
    return maxLength;
}
public static Integer func_e979d5a55fa24d708d7a2c400b184a8b(Integer right, Integer left, Integer maxLength){
    // 192
    maxLength = Math.max(maxLength, right - left + 1);
    // 193
    right++;
    return maxLength;
}


****** Cluster 56 ******
public static Integer func_7eed0fcf8d274992af6aa2cff89bb0bd(Integer maxLength, Integer left, String s){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static Integer func_3c63aaa0e4ce4a0e9ba1f4907c1357f0(Integer maxLen, Integer start, String s){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}


****** Cluster 57 ******
public static Integer func_8f0cadb2a944459684813e118017ebbc(String s, Integer left, Integer maxLength){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static Integer func_442690c2904a436d9d745dac78637d4e(String s, Integer start, Integer maxLen){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}


****** Cluster 58 ******
public static Integer func_4d8e1b0310db41a7bc93faed8d86e770(Integer left, Integer maxLength, String s){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static Integer func_1afe6bbd52ef4412987b816d0f88b891(Integer start, Integer maxLen, String s){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}


****** Cluster 59 ******
public static Integer func_a705e4c83cf240849bc282e03f78ba89(Integer left, String s, Integer maxLength){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static Integer func_3af7943bb1ed4028aa8756014b801e7f(Integer start, String s, Integer maxLen){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}


****** Cluster 60 ******
public static Integer func_5ac3615af29c46579db9d8ab08e3bb70(Integer maxLength, String s, Integer left){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return left;
}
public static Integer func_330467418f574c7ba511430de7dfea2b(Integer maxLen, String s, Integer start){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}


****** Cluster 61 ******
public static Integer func_ed2e804429c34befb36497db4337d448(String s, Integer maxLength, Integer left){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return left;
}
public static Integer func_fa87de741ee74975b2c9a4a8f0ee091c(String s, Integer maxLen, Integer start){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}


****** Cluster 62 ******
public static Integer func_7c53e9a3a0dc46fbab3dcadab80c9c83(Integer maxLength, Integer left, String s){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return left;
}
public static Integer func_5100f6640bf248ca850c09ee7572cd69(Integer maxLen, Integer start, String s){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}


****** Cluster 63 ******
public static Integer func_27beb415b59944659d0b9a4424619d34(String s, Integer left, Integer maxLength){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return left;
}
public static Integer func_574dfba8d7584590bc843634a3518a4b(String s, Integer start, Integer maxLen){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}


****** Cluster 64 ******
public static Integer func_7a02bedf7cdb48b094030c21dc3b6b54(Integer left, Integer maxLength, String s){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return left;
}
public static Integer func_ad81bc5aeebc4f88b7e4375ae65285d5(Integer start, Integer maxLen, String s){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}


****** Cluster 65 ******
public static Integer func_d172e1754f234e43bef2612bd413eea2(Integer left, String s, Integer maxLength){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return left;
}
public static Integer func_cc1103d3a94842d08cab964fe1dbc7dc(Integer start, String s, Integer maxLen){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return start;
}


****** Cluster 75 ******
public static Integer func_b575a51e27f348059ffce9185f6d3584(Integer n, String s){
    // 29
    int maxLength = 0;
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_26ffb32152514ba89413b99499c884f8(Integer n, String s){
    // 50
    int ans = 0;
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_8dfcf64422fb4cdda0185d51c474b1fa(Integer n, String s){
    // 80
    int ans = 0;
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_e3d7936d2c9540b58fe04ec6f93681a9(Integer n, String s){
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_e0168fa6583f42da8df0cb3d13f16113(Integer n, String s){
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_a963a954a86e44748074f88b16e3bbe0(Integer n, String s){
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_0f49f9a10fe94e44894a547cfbdeb16c(Integer n, String s){
    // 105
    int maxLength = 0;
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_c703479a111145bc9bc67d97e0fce5d0(Integer n, String s){
    // 112
    int ans = 0;
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_98ace29d4c0647b3a6c90bb320be3f6d(Integer n, String s){
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_726a0b23ab124bd190d607e9812c69fd(Integer n, String s){
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_f872764031794bf0bb1543f3c65d0002(Integer n, String s){
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_e85a9ad746754ce69f2de931a311fabc(Integer n, String s){
    // 155
    int result = 0;
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_11a5d97299114b4bafdb98d09353dcb2(Integer n, String s){
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        // 167
        // 168
        int currentChar = s.charAt(i);
        if (visited[currentChar] >= start) {
            // 169
            // 170
            start = visited[currentChar] + 1;
        }
        // 171
        visited[currentChar] = i;
        // 172
        maxLength = Math.max(maxLength, i - start + 1);
    }
    return maxLength;
}
public static Integer func_d7ff06aef6bd44f685917969067f319e(Integer n, String s){
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        // 167
        // 168
        int currentChar = s.charAt(i);
        if (visited[currentChar] >= start) {
            // 169
            // 170
            start = visited[currentChar] + 1;
        }
        // 171
        visited[currentChar] = i;
        // 172
        maxLength = Math.max(maxLength, i - start + 1);
    }
    return start;
}
public static Integer func_f111c5b150344d5db0ca27ee440d31d1(Integer n, String s){
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}
public static Integer func_7598d8ad54ee4a138dc67ed59fb63eb4(Integer n, String s){
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}


****** Cluster 196 ******
public static Integer func_350167056b65440fb004f73f261426df(Integer ans, Integer n, String s){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_243dfe9e0e344a8aafe92247ad2a519f(Integer ans, Integer n, String s){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_8afca3a2f47740978cf171ae3ad358fb(Integer maxLength, Integer n, String s){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}


****** Cluster 197 ******
public static Integer func_1ad0bcf00fa248989b959230c4f34596(Integer ans, String s, Integer n){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_06b56f9838c14dcba8b3f88f4bb5ab4e(Integer ans, String s, Integer n){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_4ed7e0244ab4449881eeca00f699eba9(Integer maxLength, String s, Integer n){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}


****** Cluster 198 ******
public static Integer func_85319e0b4afd4ca6b13f1a93f8d432e2(Integer n, String s, Integer ans){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_a4452044b6344c1ebfffb7c2f5482e80(Integer n, String s, Integer ans){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_f659cda60e554c77886f519d55e51e98(Integer n, String s, Integer maxLength){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}


****** Cluster 199 ******
public static Integer func_788f39cc358b479c98196a8fff2bf67c(String s, Integer n, Integer ans){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_819c6886a60d451aadb59d965ab8b1b6(String s, Integer n, Integer ans){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_4864a2d816084931be870ff29afd8d48(String s, Integer n, Integer maxLength){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}


****** Cluster 200 ******
public static Integer func_c1f3f7d732ca4eb4a5861d64847f4e6e(String s, Integer ans, Integer n){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_891f3e40e73a49d6a63ae3dabce73700(String s, Integer ans, Integer n){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_ed76129a24494ce299b7fde351d25c16(String s, Integer maxLength, Integer n){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}


****** Cluster 140 ******
public static Integer func_1436319e9f784d1c8852370223cebe98(Integer left, Integer maxLength, String s){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_e21a694b3097484b82231ec5c62a1f67(Integer left, Integer maxLength, String s){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_996dc49c675347d985db0d1279670306(Integer left, Integer maxLength, String s){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}
public static Integer func_2f062a84f88041bba4bc279907acdac5(Integer left, Integer maxLength, String s){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}


****** Cluster 55 ******
public static Integer func_fb057945a72d4c32a4485c7792d29d3c(String s, Integer maxLength, Integer left){
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static Integer func_f3a691be06cf46ddb06d0d6925cdce15(String s, Integer maxLen, Integer start){
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}


****** Cluster 76 ******
public static Integer func_e543d79474c14f58a3f908148b4d244f(String s, Integer n){
    // 29
    int maxLength = 0;
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_cd5fefb241554ca297a9a86855d6ff49(String s, Integer n){
    // 50
    int ans = 0;
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_b59a8be761a74e7ca3a35f204e771c44(String s, Integer n){
    // 80
    int ans = 0;
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_276423e945b1468f85bf9ca20f8546e2(String s, Integer n){
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_7ee2eaa93b0e42c1be0da5ba47818e81(String s, Integer n){
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_894087b0fe064b50a7243f3cd795741d(String s, Integer n){
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_0ab53d06be5e41f1ba905b4696c97893(String s, Integer n){
    // 105
    int maxLength = 0;
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_84addea8036e4cd3821ed9e270d3984a(String s, Integer n){
    // 112
    int ans = 0;
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_109d792551f14324a90a6bc2245f859f(String s, Integer n){
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_3ec291309c6a4e2286105c6972c28670(String s, Integer n){
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_b78b16c99d7a4417ab7ca799a787867a(String s, Integer n){
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_8d774fdf9106497eb7b09767b34601d3(String s, Integer n){
    // 155
    int result = 0;
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_6825b96dd39a436aa19ac02893f5fe0c(String s, Integer n){
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        // 167
        // 168
        int currentChar = s.charAt(i);
        if (visited[currentChar] >= start) {
            // 169
            // 170
            start = visited[currentChar] + 1;
        }
        // 171
        visited[currentChar] = i;
        // 172
        maxLength = Math.max(maxLength, i - start + 1);
    }
    return maxLength;
}
public static Integer func_dbe72a9ab2ff4064a0c276f27d177ed4(String s, Integer n){
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        // 167
        // 168
        int currentChar = s.charAt(i);
        if (visited[currentChar] >= start) {
            // 169
            // 170
            start = visited[currentChar] + 1;
        }
        // 171
        visited[currentChar] = i;
        // 172
        maxLength = Math.max(maxLength, i - start + 1);
    }
    return start;
}
public static Integer func_f25d5e3b550d4a258d716f4b8568e8ab(String s, Integer n){
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}
public static Integer func_21c2b1a50a50421ea423fafcc884c851(String s, Integer n){
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}


****** Cluster 77 ******
public static int func_6f2ccf0f7566424a896b209e5bf94578(Integer n, String s, Integer maxLength){
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_e31d2924231445f08cbeafd5c182f039(Integer n, String s, Integer ans){
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_d4e095e4db7846b491a31d03cc74ec4f(Integer n, String s, Integer ans){
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_b8db6832c9364bcfbbb58908dfb156b5(Integer n, String s, Integer ans){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_aef0ff834b02495283b01ecf22116c86(Integer n, String s, Integer maxLength){
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_3751a30da83a441cb2a21a06f0663ec6(Integer n, String s, Integer ans){
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_8a636104a79e40b8986bfaad9944ad93(Integer n, String s, Integer result){
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_bf8756d0b4cb4d99a863db487e6f6d63(Integer n, String s, Integer maxLength){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}


****** Cluster 78 ******
public static int func_7c8a966aa6c74e48b196fbea98293df4(String s, Integer n, Integer maxLength){
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_a1c2a7e6eaf448ab8386e7164ffa33de(String s, Integer n, Integer ans){
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_cd6b02e2315f47dbaaedde17b291cea3(String s, Integer n, Integer ans){
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_62befdb5108243ff86120575075cb1d8(String s, Integer n, Integer ans){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_46c190040cec423b9389996396b7b043(String s, Integer n, Integer maxLength){
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_755fb7e0458b4f3199383c9525853d52(String s, Integer n, Integer ans){
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_eabd6cacf11043768e44fd3de9e8bc1d(String s, Integer n, Integer result){
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_a1ad9e532f9747eb89ec32758dd3d721(String s, Integer n, Integer maxLength){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}


****** Cluster 79 ******
public static int func_cc09f0b3c15b4a4f96942840b014c654(String s, Integer maxLength, Integer n){
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_a4e283c4014e442e940ef5151c66ef41(String s, Integer ans, Integer n){
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_f3e08df28176419c90d070967c30e832(String s, Integer ans, Integer n){
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_716da732ec4a45eaa4b379824e0be96d(String s, Integer ans, Integer n){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_fc9c0ca83117440cb1aa142a61642c6b(String s, Integer maxLength, Integer n){
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_a7f91e34e2aa4a4db1ce59283477e1c4(String s, Integer ans, Integer n){
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_11edf3316c3d4f9dbea83e1ff58305f0(String s, Integer result, Integer n){
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_6440e155ae154100818ba59b6e77e04f(String s, Integer maxLength, Integer n){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}


****** Cluster 80 ******
public static int func_b21129c38693402ca1b06258c67ce574(Integer n, Integer maxLength, String s){
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_e764a09772874eb693a12b3c92a53728(Integer n, Integer ans, String s){
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_6a6310e91b5a4ec4b0e9851902ecf0b2(Integer n, Integer ans, String s){
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_3b3a55425a5143fbafe4c20ef3c6575b(Integer n, Integer ans, String s){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_9d4893b8ab02421ab6f0ad65614d12e8(Integer n, Integer maxLength, String s){
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_901351b54f78413fa3c33734d91b5f0a(Integer n, Integer ans, String s){
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_16fa048d76744357bc1840c1e1e65bce(Integer n, Integer result, String s){
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_4cacd2db029841dd84d9b663f9037669(Integer n, Integer maxLength, String s){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}


****** Cluster 81 ******
public static int func_52a678f117ed4c5bb7c69d4858273d9e(Integer maxLength, String s, Integer n){
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_d9acfb5adc9d42d1ac13d98ff59b1beb(Integer ans, String s, Integer n){
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_fcc1d7f9bcf74ad8a52e2bcbb3defa08(Integer ans, String s, Integer n){
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_30d6e6ed7e4d4528a6e734513c9055e1(Integer ans, String s, Integer n){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_f6df0a8c486e43b6a77b0bd5f92aebab(Integer maxLength, String s, Integer n){
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_6e726d9988404ae6be674f71aecd6e9c(Integer ans, String s, Integer n){
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_b728019e38a9411cb990c5734020b5be(Integer result, String s, Integer n){
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_bf9199dbab4245ac8f7bf8fb10e62b9a(Integer maxLength, String s, Integer n){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}


****** Cluster 82 ******
public static int func_a406a6a2581745b19e7b5d9edda84b72(Integer maxLength, Integer n, String s){
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static Integer func_5177660b1ed8450d8f79e3cfc4ea0f83(Integer ans, Integer n, String s){
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static Integer func_a9ff63e0ccc5410ebe185059d8b47d0a(Integer ans, Integer n, String s){
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_dd4ad880e44740529c2662accc5b75c9(Integer ans, Integer n, String s){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static Integer func_08eb035ff8cb4d548f9c0ad3a4baab55(Integer maxLength, Integer n, String s){
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static Integer func_d5077687153444a3a35d90c6024c09eb(Integer ans, Integer n, String s){
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static Integer func_21237559e4404c719fd06aa0a730439c(Integer result, Integer n, String s){
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static Integer func_6decc52ee018415fae5dcb1cc83ac479(Integer maxLength, Integer n, String s){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}


****** Cluster 139 ******
public static Integer func_61f0c403eb914d46b332badfc32ba311(Integer left, Integer maxLength, Integer right){
    // 64
    maxLength = Math.max(maxLength, right - left + 1);
    // 65
    right++;
    return maxLength;
}
public static Integer func_4e35efed52284eacb61c37b889abb740(Integer left, Integer maxLength, Integer right){
    // 134
    right++;
    // 135
    maxLength = Math.max(maxLength, right - left);
    return maxLength;
}
public static Integer func_b219e907cc6746528fa048f62bdd2cfa(Integer left, Integer maxLength, Integer right){
    // 192
    maxLength = Math.max(maxLength, right - left + 1);
    // 193
    right++;
    return maxLength;
}


****** Cluster 142 ******
public static Integer func_907fd2227297481d9311034db5016a9d(Integer maxLength, String s, Integer left){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_fa8b994be89a46289ccb9e14e4a0a166(Integer maxLength, String s, Integer left){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_f0a0f2590c434e4f9e6cc3379fc21e23(Integer maxLength, String s, Integer left){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}
public static Integer func_a815723f23944220a3c83bf169ec425c(Integer maxLength, String s, Integer left){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}


****** Cluster 143 ******
public static Integer func_4edd238a63344ba2b7ed2155621009f6(Integer left, String s, Integer maxLength){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_54253acb427140b7ace9004109f77052(Integer left, String s, Integer maxLength){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_d615dfcb73744aec879e8a82e0792c1a(Integer left, String s, Integer maxLength){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}
public static Integer func_ddbe44cd80ea4d1183b53bdbe1762a23(Integer left, String s, Integer maxLength){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}


****** Cluster 144 ******
public static Integer func_3546f34acbdb4129acd0e4c31e2f146b(String s, Integer left, Integer maxLength){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_bdda21a483db4d3d9bce4a869ce79154(String s, Integer left, Integer maxLength){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_44379e0efb9445cb88aae554afc2b61b(String s, Integer left, Integer maxLength){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}
public static Integer func_42b306a234014214b6e9fd812b290b93(String s, Integer left, Integer maxLength){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}


****** Cluster 134 ******
public static Integer func_cc2231a57ea84645941812b69f955900(Integer right, Integer maxLength, Integer left){
    // 64
    maxLength = Math.max(maxLength, right - left + 1);
    // 65
    right++;
    return maxLength;
}
public static Integer func_d77069d566514b37a0404544271e1b9f(Integer right, Integer maxLength, Integer left){
    // 134
    right++;
    // 135
    maxLength = Math.max(maxLength, right - left);
    return maxLength;
}
public static Integer func_4772944c6ac24bfbbbab197ca567ce01(Integer right, Integer maxLength, Integer left){
    // 192
    maxLength = Math.max(maxLength, right - left + 1);
    // 193
    right++;
    return maxLength;
}


****** Cluster 195 ******
public static Integer func_f99bd185a1cc40ad8755d99dc754646a(Integer n, Integer ans, String s){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return j;
}
public static Integer func_8f34a16d289348d0836f3d442306c339(Integer n, Integer ans, String s){
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return i;
}
public static Integer func_4a37359c95c141e6b523dafdb50864b2(Integer n, Integer maxLength, String s){
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return i;
}


****** Cluster 145 ******
public static Integer func_553f12c49039495aa26b005130c9195b(String s, Integer maxLength, Integer left){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_fea63f519dd34722bed1620ce7667ea9(String s, Integer maxLength, Integer left){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_6957a4d828354f05875364c5e3ffa13b(String s, Integer maxLength, Integer left){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}
public static Integer func_fed1d88020f74738922a537afae03cee(String s, Integer maxLength, Integer left){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}


****** Cluster 141 ******
public static Integer func_f9e5f4c37b1640bca6c553e01a98dde2(Integer maxLength, Integer left, String s){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return right;
}
public static Integer func_1b70630c9ce4408696c38ba4d6529246(Integer maxLength, Integer left, String s){
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static Integer func_bf45eb7ffc214e53b1b509fbbbde396e(Integer maxLength, Integer left, String s){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return right;
}
public static Integer func_dfc045bc18fd4a71a9d5c428ea309f91(Integer maxLength, Integer left, String s){
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}


****** Cluster 138 ******
public static Integer func_40390a7f901047e197535930c5061242(Integer left, Integer right, Integer maxLength){
    // 64
    maxLength = Math.max(maxLength, right - left + 1);
    // 65
    right++;
    return maxLength;
}
public static Integer func_16098b810cb042278dfb7e035c577cd5(Integer left, Integer right, Integer maxLength){
    // 134
    right++;
    // 135
    maxLength = Math.max(maxLength, right - left);
    return maxLength;
}
public static Integer func_e3c2cc47443d4f768e6f7b6fa8607245(Integer left, Integer right, Integer maxLength){
    // 192
    maxLength = Math.max(maxLength, right - left + 1);
    // 193
    right++;
    return maxLength;
}