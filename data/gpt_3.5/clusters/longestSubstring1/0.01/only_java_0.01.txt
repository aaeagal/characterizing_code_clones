

****** Cluster 0 ******
public static int func_103bc90bfe6f4a8aa40fd28a7aa478c8(String s){
    if (s == null || s.length() == 0) {
        // 18
        return 0;
    }
    // 19
    int left = 0;
    // 20
    int maxLength = 0;
    // 21
    HashMap<Character, Integer> map = new HashMap<>();
    for (int right = 0; right < s.length(); right++) {
        // 22
        // 23
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            // 24
            // 25
            left = Math.max(left, map.get(c) + 1);
        }
        // 26
        map.put(c, right);
        // 27
        maxLength = Math.max(maxLength, right - left + 1);
    }
    return maxLength;
}
public static int func_65d94dc99291400a9bfa9a365acea495(String s){
    if (s == null || s.length() == 0) {
        // 1
        return 0;
    }
    // 2
    int maxLength = 0;
    // 3
    int start = 0;
    // 4
    int end = 0;
    // 5
    boolean[] visited = new boolean[128];
    while (end < s.length()) {
        // 6
        // 7
        char c = s.charAt(end);
        if (visited[c]) {
            // 8
            // 9
            maxLength = Math.max(maxLength, end - start);
            while (start < end && s.charAt(start) != c) {
                // 10
                // 11
                visited[s.charAt(start)] = false;
                // 12
                start++;
            }
            // 13
            start++;
        } else {
            // 14
            // 15
            visited[c] = true;
        }
        // 16
        end++;
    }
    // 17
    maxLength = Math.max(maxLength, end - start);
    return maxLength;
}
public static int func_39085b75cb1845d7aa5a7ffe3d04b3a3(String s){
    // 28
    int n = s.length();
    // 29
    int maxLength = 0;
    for (int i = 0; i < n; i++) {
        // 30
        // 31
        boolean[] visited = new boolean[256];
        for (int j = i; j < n; j++) {
            // 32
            if (// 33
            visited[s.charAt(j)])
                // 34
                break;
            // 35
            visited[s.charAt(j)] = true;
            // 36
            maxLength = Math.max(maxLength, j - i + 1);
        }
        // 37
        visited[s.charAt(i)] = false;
    }
    return maxLength;
}
public static int func_c0a4d5682e7243c39c9c96e334568657(String s){
    // 38
    int maxLength = 0;
    // 39
    int start = 0;
    // 40
    int end = 0;
    // 41
    int n = s.length();
    // 42
    Set<Character> set = new HashSet<>();
    while (start < n && end < n) {
        // 43
        if (!set.contains(s.charAt(end))) {
            // 44
            // 45
            set.add(s.charAt(end++));
            // 46
            maxLength = Math.max(maxLength, end - start);
        } else {
            // 47
            // 48
            set.remove(s.charAt(start++));
        }
    }
    return maxLength;
}
public static int func_76e468778f3f4b02811387fd482a4db9(String s){
    // 57
    int maxLength = 0;
    // 58
    int left = 0;
    // 59
    int right = 0;
    // 60
    int[] charCount = new int[256];
    while (right < s.length()) {
        // 61
        if (charCount[s.charAt(right)] == 0) {
            // 62
            // 63
            charCount[s.charAt(right)] = 1;
            // 64
            maxLength = Math.max(maxLength, right - left + 1);
            // 65
            right++;
        } else {
            // 66
            // 67
            charCount[s.charAt(left)] = 0;
            // 68
            left++;
        }
    }
    return maxLength;
}
public static int func_0b2684c5e8d940d09f1e0549a8c94a3e(String s){
    // 49
    int n = s.length();
    // 50
    int ans = 0;
    // 51
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        // 52
        if (map.containsKey(s.charAt(j))) {
            // 53
            // 54
            i = Math.max(map.get(s.charAt(j)), i);
        }
        // 55
        ans = Math.max(ans, j - i + 1);
        // 56
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}
public static int func_dac587bc9a024cb0ac7e1b2dad941932(String s){
    if (s == null || s.length() == 0) {
        // 69
        return 0;
    }
    // 70
    int maxLen = 0;
    // 71
    int start = 0;
    // 72
    Map<Character, Integer> map = new HashMap<>();
    for (int end = 0; end < s.length(); end++) {
        // 73
        // 74
        char ch = s.charAt(end);
        if (map.containsKey(ch)) {
            // 75
            // 76
            start = Math.max(start, map.get(ch) + 1);
        }
        // 77
        map.put(ch, end);
        // 78
        maxLen = Math.max(maxLen, end - start + 1);
    }
    return maxLen;
}
public static int func_580142b946a342e0bcaa7ef233a3c273(String s){
    // 79
    int n = s.length();
    // 80
    int ans = 0;
    // 81
    int[] index = new int[128];
    for (int j = 0, i = 0; j < n; j++) {
        // 82
        // 83
        i = Math.max(index[s.charAt(j)], i);
        // 84
        ans = Math.max(ans, j - i + 1);
        // 85
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static int func_43537a246cf641f6875572d129c72332(String s){
    // 86
    int n = s.length(), ans = 0;
    // 87
    int i = 0, j = 0;
    // 88
    HashSet<Character> set = new HashSet<>();
    while (i < n && j < n) {
        // 89
        if (!set.contains(s.charAt(j))) {
            // 90
            // 91
            set.add(s.charAt(j++));
            // 92
            ans = Math.max(ans, j - i);
        } else {
            // 93
            // 94
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static int func_84a466a2ba1143728bb670a15e072bb8(String s){
    // 95
    int n = s.length();
    // 96
    HashSet<Character> set = new HashSet<>();
    // 97
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 98
        if (!set.contains(s.charAt(j))) {
            // 99
            // 100
            set.add(s.charAt(j++));
            // 101
            ans = Math.max(ans, j - i);
        } else {
            // 102
            // 103
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static int func_d5b1b148ec9f4264be178241becb50bc(String s){
    // 104
    int n = s.length();
    // 105
    int maxLength = 0;
    // 106
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 107
        // 108
        i = Math.max(index[s.charAt(j)], i);
        // 109
        maxLength = Math.max(maxLength, j - i + 1);
        // 110
        index[s.charAt(j)] = j + 1;
    }
    return maxLength;
}
public static int func_d1d12b0ab3884bca8c5fda3478f4f462(String s){
    // 111
    int n = s.length();
    // 112
    int ans = 0;
    // 113
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 114
        // 115
        i = Math.max(index[s.charAt(j)], i);
        // 116
        ans = Math.max(ans, j - i + 1);
        // 117
        index[s.charAt(j)] = j + 1;
    }
    return ans;
}
public static int func_9614af86a9c04cac928230bb050b04c9(String s){
    // 118
    int n = s.length();
    // 119
    Set<Character> set = new HashSet<>();
    // 120
    int ans = 0, i = 0, j = 0;
    while (i < n && j < n) {
        // 121
        if (!set.contains(s.charAt(j))) {
            // 122
            // 123
            set.add(s.charAt(j++));
            // 124
            ans = Math.max(ans, j - i);
        } else {
            // 125
            // 126
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
public static int func_09cc27d73d9a43dda24a92730d29613f(String s){
    // 127
    int maxLength = 0;
    // 128
    int left = 0;
    // 129
    int right = 0;
    // 130
    int[] freq = new int[256];
    while (right < s.length()) {
        // 131
        if (freq[s.charAt(right)] == 0) {
            // 132
            // 133
            freq[s.charAt(right)]++;
            // 134
            right++;
            // 135
            maxLength = Math.max(maxLength, right - left);
        } else {
            // 136
            // 137
            freq[s.charAt(left)]--;
            // 138
            left++;
        }
    }
    return maxLength;
}
public static int func_91562dcb91ed4b799ed6655471d58d7f(String s){
    // 139
    int[] characters = new int[128];
    // 140
    int maxLength = 0, start = 0;
    for (int end = 0; end < s.length(); end++) {
        // 141
        // 142
        char c = s.charAt(end);
        // 143
        start = Math.max(start, characters[c]);
        // 144
        maxLength = Math.max(maxLength, end - start + 1);
        // 145
        characters[c] = end + 1;
    }
    return maxLength;
}
public static int func_e6551d8011f345609b114f43c299300a(String s){
    // 146
    int[] visited = new int[256];
    // 147
    int maxLen = 0, left = 0;
    for (int i = 0; i < s.length(); i++) {
        // 148
        if (visited[s.charAt(i)] == 0 || visited[s.charAt(i)] < left) {
            // 149
            // 150
            maxLen = Math.max(maxLen, i - left + 1);
        } else {
            // 151
            // 152
            left = visited[s.charAt(i)];
        }
        // 153
        visited[s.charAt(i)] = i + 1;
    }
    return maxLen;
}
public static int func_98fd6ee6f0a043beb0da1684e3c9eb9e(String s){
    // 154
    int n = s.length();
    // 155
    int result = 0;
    // 156
    int[] index = new int[128];
    for (int i = 0, j = 0; j < n; j++) {
        // 157
        // 158
        i = Math.max(index[s.charAt(j)], i);
        // 159
        result = Math.max(result, j - i + 1);
        // 160
        index[s.charAt(j)] = j + 1;
    }
    return result;
}
public static int func_13570c16c6524d37a6be15d2db8621ea(String s){
    // 161
    int n = s.length();
    // 162
    int[] visited = new int[256];
    // 163
    int maxLength = 0;
    // 164
    int start = 0;
    for (int i = 0; i < 256; i++) {
        // 165
        // 166
        visited[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        // 167
        // 168
        int currentChar = s.charAt(i);
        if (visited[currentChar] >= start) {
            // 169
            // 170
            start = visited[currentChar] + 1;
        }
        // 171
        visited[currentChar] = i;
        // 172
        maxLength = Math.max(maxLength, i - start + 1);
    }
    return maxLength;
}
public static int func_f84b9e6fe55740e6bc796b9f7c21c63c(String s){
    // 173
    int n = s.length();
    // 174
    int maxLength = 0;
    // 175
    int[] lastIndex = new int[256];
    // 176
    Arrays.fill(lastIndex, -1);
    // 177
    int i = 0;
    for (int j = 0; j < n; j++) {
        // 178
        // 179
        i = Math.max(i, lastIndex[s.charAt(j)] + 1);
        // 180
        maxLength = Math.max(maxLength, j - i + 1);
        // 181
        lastIndex[s.charAt(j)] = j;
    }
    return maxLength;
}
public static int func_d74e1af4352e4f22a1529f4965e63a8a(String s){
    // 182
    int[] chars = new int[128];
    // 183
    int left = 0, right = 0;
    // 184
    int maxLength = 0;
    while (right < s.length()) {
        // 185
        // 186
        char c = s.charAt(right);
        // 187
        chars[c]++;
        while (chars[c] > 1) {
            // 188
            // 189
            char leftChar = s.charAt(left);
            // 190
            chars[leftChar]--;
            // 191
            left++;
        }
        // 192
        maxLength = Math.max(maxLength, right - left + 1);
        // 193
        right++;
    }
    return maxLength;
}