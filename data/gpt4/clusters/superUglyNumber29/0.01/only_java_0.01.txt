

****** Cluster 0 ******
public static Integer func_6c4bba43b58245d7ad257255c63786fb(Integer[] ugly, Integer[] primes, Integer n, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_222ddc48cd3b45c4a9d4cf1e5a9e9b85(Integer[] ugly, Integer[] primes, Integer n, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 1 ******
public static Integer func_baee0518ca254a7896f1b18a8560c30b(Integer[] primes, Integer n, Integer[] ugly, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3eddb1d346a3462b9a153e205859429f(Integer[] primes, Integer n, Integer[] ugly, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 2 ******
public static Integer func_a0088565d9f44376b94f0ee1669f797e(Integer[] primes, Integer n, Integer[] val, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3430918ee58341308b40bf8067e4fe19(Integer[] primes, Integer n, Integer[] val, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 3 ******
public static Integer func_deac206ad0fd4ab897c23104e2e358b4(Integer[] primes, Integer[] ugly, Integer n, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f63fa0cb86094ef7b773c14398b56dea(Integer[] primes, Integer[] ugly, Integer n, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 4 ******
public static Integer func_11d4db19e1c14e43b038bfb697c56758(Integer[] primes, Integer n, Integer[] val, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_504c6e869fe84adb957f1873dc53245a(Integer[] primes, Integer n, Integer[] val, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 5 ******
public static Integer func_5acaca482b514827a072411a4f3afd8b(Integer[] primes, Integer n, Integer[] val, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b640f490eb10426cbf6a9fb1634daf28(Integer[] primes, Integer n, Integer[] val, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 6 ******
public static Integer func_d487eb9d662041daac4bb7f7fb30a81d(Integer[] ugly, Integer n, Integer[] primes, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fff102c183e34ff09e0d83856ffbcf9c(Integer[] ugly, Integer n, Integer[] primes, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 7 ******
public static Integer func_a3b29eeffc0e46b7b057623a7ae25729(Integer n, Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e6029b2cad3b46cb80eb1698aa71bd1d(Integer n, Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 8 ******
public static Integer func_6c8c55b57f9a4f88becebedcbdb92280(Integer n, Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4fdde675035d4562a830107688673887(Integer n, Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 9 ******
public static Integer func_02c147f07ad1437c9be83a866b186ce3(Integer n, Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_19210e62b00540188dbd59b48acca9f4(Integer n, Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 10 ******
public static Integer func_4c24687d85434a5da8141240971c0fbc(Integer n, Integer[] primes, Integer[] val, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e008fdd7b883405a9b388ce447fd6e2f(Integer n, Integer[] primes, Integer[] val, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 11 ******
public static Integer func_2c2818e58e28488396d4b8e3c7cfef0e(Integer n, Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e8741334a7884e92b235df1789f7a374(Integer n, Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 12 ******
public static Integer func_9cabb1f98dd34e5f857aa6913070da98(Integer[] ugly, Integer n, Integer[] val, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_731d2bd674664a4fa06615c04677d910(Integer[] ugly, Integer n, Integer[] val, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 13 ******
public static Integer func_1fd3091ace804f00b8e8f405f2437ff3(Integer n, Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_295086b7e69d4fc8a22009d1d1dff471(Integer n, Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 14 ******
public static Integer func_cd6472f4f3c8479d927861f27cd49464(Integer n, Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f613902f082e45bbab0d003199cd637c(Integer n, Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 15 ******
public static Integer func_f289aa79edea40ab9970e6c6dd5e205f(Integer n, Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a3edb3ec2339480eb2b81c4193283084(Integer n, Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 16 ******
public static Integer func_b9c0406420b541a789d626a79c054ae9(Integer n, Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_513d72a6fe6f443289aa9a9669e781c8(Integer n, Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 17 ******
public static Integer func_e2bc9f6193a34bc5ac40bdc6e9770be7(Integer n, Integer[] val, Integer[] primes, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ebaa2ef18efe4132b8130fd0e3ec44eb(Integer n, Integer[] val, Integer[] primes, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 18 ******
public static Integer func_18664ac689af496f80235dca78bbb713(Integer[] ugly, Integer n, Integer[] val, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_428fef5a28d647e1a8e038b6e844e63b(Integer[] ugly, Integer n, Integer[] val, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 19 ******
public static Integer func_358af873c37a4977b910618a76e59af6(Integer n, Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8ce87f0409604b56a9f774ebcc1d44ae(Integer n, Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 20 ******
public static Integer func_a9aefb4523894df69e4bc3597f5b65f0(Integer n, Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d3ee039b50364e3ebd88a3886edd435b(Integer n, Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 21 ******
public static Integer func_5917660df06e4f4ea1093748fc521287(Integer n, Integer[] val, Integer[] index, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_16e8e8e71df747c48894a9b7a661b3aa(Integer n, Integer[] val, Integer[] index, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 22 ******
public static Integer func_99a7628820e140d0a41823bd00c4d63c(Integer n, Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4c4877783b0048c8a5a4b3ecc57185f4(Integer n, Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 23 ******
public static Integer func_c9e196329b234b568d45d2ececc0fb4d(Integer n, Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1f688d34e179454dbd0b9c8572269a11(Integer n, Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 24 ******
public static Integer func_cb9d79f3be9641a78f72a0a6137c8ac3(Integer[] ugly, Integer n, Integer[] val, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d0e3948025214482b76ff4f9d9b62dba(Integer[] ugly, Integer n, Integer[] val, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 25 ******
public static Integer func_7ed641245601463484dc5103e34199fd(Integer n, Integer[] ugly, Integer[] val, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9a6a2848f83a456fbd7bd0016528f747(Integer n, Integer[] ugly, Integer[] val, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 26 ******
public static Integer func_e6c80279de004cc0a76c89cf90c7f37c(Integer n, Integer[] val, Integer[] ugly, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c8860cf52c174557b41efd97277befb3(Integer n, Integer[] val, Integer[] ugly, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 27 ******
public static Integer func_b81ac5c170dd4f29b4e5fa0ce78162c1(Integer n, Integer[] val, Integer[] index, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f97fa8eb0b6f4fc9a59760e30821b9bf(Integer n, Integer[] val, Integer[] index, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 28 ******
public static Integer func_c23a4a5a606d4ff0825595a2a29931bf(Integer n, Integer[] val, Integer[] index, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a0d1c0e2054246af9f1ff4cb7904722b(Integer n, Integer[] val, Integer[] index, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 29 ******
public static Integer func_d47473f4c4c54c4d98c9cdc86fa238a8(Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8f0748ab721b4cb3a61a90ceb1e22d5e(Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 30 ******
public static Integer func_f7d4812dd1614ae6810a3d44dbfc16e6(Integer n, Integer[] val, Integer[] index, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_108cc27905f84f6abbb5a40de55121bf(Integer n, Integer[] val, Integer[] index, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 31 ******
public static Integer func_9fd793c306c2475c9be0bd9cf63ce285(Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6faf28cc684942dd8ad4cb414d2e31f3(Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 32 ******
public static Integer func_4cdff27e04a347cd9edc1c3fc4aa6296(Integer[] ugly, Integer[] primes, Integer[] val, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_efe8ca2615dd465d99096b2e260c05e8(Integer[] ugly, Integer[] primes, Integer[] val, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 33 ******
public static Integer func_cebd3192cda94d65a31dc28f58951c4a(Integer[] primes, Integer[] ugly, Integer[] val, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_660d83118a0146258fea02c0f433cd05(Integer[] primes, Integer[] ugly, Integer[] val, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 34 ******
public static Integer func_80afc6157a864c4084b1801ed028d842(Integer[] primes, Integer[] val, Integer[] ugly, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fe75f8d1a4f34c1f9d354d559fa6fbdc(Integer[] primes, Integer[] val, Integer[] ugly, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 35 ******
public static Integer func_81174be2b59d4ad3babf2dca74086a58(Integer[] primes, Integer[] val, Integer n, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f6c8b038cdec45bf884ad2f39354bd66(Integer[] primes, Integer[] val, Integer n, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 36 ******
public static Integer func_1e66652e4be648f489a6327d3ce0a717(Integer[] primes, Integer[] val, Integer n, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_449b8ea5388c4a4a9e6746aedc1f5f9e(Integer[] primes, Integer[] val, Integer n, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 37 ******
public static Integer func_b103a243717d4b968a418e12482d3fe2(Integer[] primes, Integer[] val, Integer n, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_51b5e8ab9f224b6e8465338b3aa7f099(Integer[] primes, Integer[] val, Integer n, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 38 ******
public static Integer func_3fbc4381b598445a898178421d650655(Integer[] ugly, Integer[] val, Integer[] primes, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8dde5bc9576e4d2dbbb0f0b4bb54a6bf(Integer[] ugly, Integer[] val, Integer[] primes, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 39 ******
public static Integer func_7a2d22a43ac14b8b8ffc65d16d757f9f(Integer[] val, Integer[] ugly, Integer[] primes, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0bc0fa4b34d340c89aa172a3388f42ba(Integer[] val, Integer[] ugly, Integer[] primes, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 40 ******
public static Integer func_e45f7265a5bd495986348482a0250bed(Integer[] val, Integer[] primes, Integer[] ugly, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e1f3580bfd4c4499a9a264ec63349bb8(Integer[] val, Integer[] primes, Integer[] ugly, Integer n, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 41 ******
public static Integer func_9170a544af124b28817f19dc6ce5d575(Integer[] val, Integer[] primes, Integer n, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2a7a85473eff4c3d9a91c9f27213f1f8(Integer[] val, Integer[] primes, Integer n, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 42 ******
public static Integer func_930f8bae0dc84cf2a1d8d4c3fa35dfa3(Integer[] val, Integer[] primes, Integer n, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_accf29b3c5d8415f8d0fc343b48c34f0(Integer[] val, Integer[] primes, Integer n, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 43 ******
public static Integer func_2dbdb5c77fe24c92b127ad6c3bb4187c(Integer[] val, Integer[] primes, Integer n, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5121a522281344d7a49e6bb39bbe5a59(Integer[] val, Integer[] primes, Integer n, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 44 ******
public static Integer func_c47b117bdff444ce98007795e1b51ac5(Integer[] val, Integer[] ugly, Integer n, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_40f32bc7d7494e5898f11e54f4400189(Integer[] val, Integer[] ugly, Integer n, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 45 ******
public static Integer func_81b1c5c473ec499ea7a450b1cbe4dd30(Integer[] ugly, Integer[] val, Integer n, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_090642a262a54fa089d26d31aa14188c(Integer[] ugly, Integer[] val, Integer n, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 46 ******
public static Integer func_bfdc550cdae64960b7fe2e3aa367a8f4(Integer[] val, Integer n, Integer[] ugly, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_caa92b90852c48a494e5780f154b278e(Integer[] val, Integer n, Integer[] ugly, Integer[] primes, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 47 ******
public static Integer func_7706b5439258492db21dcf7287b3c868(Integer[] val, Integer n, Integer[] primes, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_417b837ecdfb4e64922c1ac6ef986800(Integer[] val, Integer n, Integer[] primes, Integer[] ugly, Integer[] index, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 48 ******
public static Integer func_31189c442309451097628ec964759693(Integer[] val, Integer n, Integer[] primes, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_bd8f1e6aca454e288d4b668ca231ebe7(Integer[] val, Integer n, Integer[] primes, Integer[] index, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 49 ******
public static Integer func_829545c073744e0b9eeba10ff6163553(Integer[] ugly, Integer[] val, Integer n, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7f5e28cb2a5349109c8034477a92c435(Integer[] ugly, Integer[] val, Integer n, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 50 ******
public static Integer func_5196f1e64df84eb7bf01158ad3952be6(Integer[] val, Integer n, Integer[] primes, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a5193cd06785441fb607517003e82cfe(Integer[] val, Integer n, Integer[] primes, Integer[] index, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 51 ******
public static Integer func_bbf576bc7c49488998e1e4c3e5cc0a94(Integer[] val, Integer[] ugly, Integer n, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_350c114d2a594922bc2961c71369ca6e(Integer[] val, Integer[] ugly, Integer n, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 52 ******
public static Integer func_47a1f96d5e764213a02af7e7bf75f6f0(Integer[] val, Integer n, Integer[] ugly, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_96c3e760975c40f2a79d0498969d9272(Integer[] val, Integer n, Integer[] ugly, Integer[] index, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 53 ******
public static Integer func_74cb3491b41d43ee9a973155ca4def4f(Integer[] val, Integer n, Integer[] index, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a5915be9ade54f06ad37aab30e9b6a2f(Integer[] val, Integer n, Integer[] index, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 54 ******
public static Integer func_7d097796f8144741b77b1e664cf5f90d(Integer[] val, Integer n, Integer[] index, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2473df33c157470a8793236e11c5a277(Integer[] val, Integer n, Integer[] index, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 55 ******
public static Integer func_3fbecd8c7f664218808ed7f26d868ff9(Integer[] val, Integer n, Integer[] index, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b2a79ac94bd9410fa3f48e2a9396f321(Integer[] val, Integer n, Integer[] index, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 56 ******
public static Integer func_3c1ef3d427704e848b5f262d18e9301e(Integer[] ugly, Integer[] val, Integer n, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_95856346bbb141e5a577a838a123e6e2(Integer[] ugly, Integer[] val, Integer n, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 57 ******
public static Integer func_196b72fabd5c4e9cac1f3548e13bf10e(Integer[] val, Integer[] ugly, Integer n, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a2ec162374244235ad5076b109b88a08(Integer[] val, Integer[] ugly, Integer n, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 58 ******
public static Integer func_e844fffbac224f92bfa53f35affbbfa0(Integer[] val, Integer n, Integer[] ugly, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_574943380738401f997223b86a032fe3(Integer[] val, Integer n, Integer[] ugly, Integer[] index, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 59 ******
public static Integer func_9509587f56aa4034a1197f46df14e8c2(Integer[] val, Integer n, Integer[] index, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fb0e0f5146b049f084fa9737fd53048f(Integer[] val, Integer n, Integer[] index, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 60 ******
public static Integer func_e749751733454060afd75629a9a74f82(Integer[] val, Integer n, Integer[] index, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_aa86fbaca3944325b1c1c6d69f477b73(Integer[] val, Integer n, Integer[] index, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 61 ******
public static Integer func_f0b2452ab8f8404b970fd035f86a00aa(Integer[] val, Integer n, Integer[] index, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_bf809b5eb3e7481683d412a23abc3fc0(Integer[] val, Integer n, Integer[] index, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 62 ******
public static Integer func_92eda9c5efe24e7f904f495155a4127e(Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d4b34657e2144bbaaa2d60ed2d27a6f2(Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 63 ******
public static Integer func_375d52d358d1431496af9a2f464c6e53(Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_88d385e18f5c41e7ba5ef26204ce0802(Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 64 ******
public static Integer func_9884fdcef0474fcf998257f34b1ed23e(Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a17451535b6c4ebe942d520cce330a55(Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 65 ******
public static Integer func_971bf706b7e342c58d5b19a1ae4de2f5(Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_83c80266e6e144d1be115fa3db6d4177(Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 66 ******
public static Integer func_c0cfb299e6a746b3bd51cd0ff726eb9d(Integer[] primes, Integer[] val, Integer[] index, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e2596ae1c7dc4b5a8c7e295d4f068968(Integer[] primes, Integer[] val, Integer[] index, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 67 ******
public static Integer func_b0bec8fafc7c4e14abe555eba14b6d01(Integer[] primes, Integer[] val, Integer[] index, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_455bcd58acd8426aa45b8cebc3e6b08b(Integer[] primes, Integer[] val, Integer[] index, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 68 ******
public static Integer func_649b6f937b154027ad1f66c12f841fc9(Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b59c3ac399104441ad2fdceef6834abd(Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 69 ******
public static Integer func_6d1d79a715464182b9b7c8e8117a7769(Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e67cfd780d6f49ffa8f39b9e67bf1eea(Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 70 ******
public static Integer func_4fe6590128b245e29446891ae86f520c(Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2b025e25d3074c0d886cf073711f0e37(Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 71 ******
public static Integer func_3f77a83a7d3943e7b6b84dedba458313(Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_73deda32c90140b3b9d7edccf2044846(Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 72 ******
public static Integer func_03b819e2f1b0416dbfe33112cab4bfdf(Integer[] val, Integer[] primes, Integer[] index, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_637c90eb906744a38d85f3e7e4d17961(Integer[] val, Integer[] primes, Integer[] index, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 73 ******
public static Integer func_204f3eee6f874dba8fe5285172a6279f(Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b089bd2bd3874bed950a897292cd2ec5(Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 74 ******
public static Integer func_256c984277ea4e9bbe81be1c5d6c041b(Integer[] val, Integer[] primes, Integer[] index, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6550b1e7a11b4513a51f5afd5ccf4387(Integer[] val, Integer[] primes, Integer[] index, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 75 ******
public static Integer func_ca891fc984794501a7d4f9babf0591d2(Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4f91ca9663ff4cc199ffa3ce5a111dc5(Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 76 ******
public static Integer func_eb88e99caabc4b0c9852679ba982ce33(Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_563c71e073c546cb97dece2bbf750bdf(Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 77 ******
public static Integer func_c60a46cc60e34f2489179f0f2fab2cef(Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c11e546cd3af423d9b37ca9b2e7a9800(Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 78 ******
public static Integer func_69a6ca7cb8474454bd116523bb9a7281(Integer[] val, Integer[] index, Integer[] primes, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7088a7d160c847f6b902d9b3d9e3fd0f(Integer[] val, Integer[] index, Integer[] primes, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 79 ******
public static Integer func_7b1f500f1f154822917ecfeb4264d71e(Integer[] val, Integer[] index, Integer[] primes, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1056daa61d454a20bb0eb837bf55fea0(Integer[] val, Integer[] index, Integer[] primes, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 80 ******
public static Integer func_60120b9a80a14b08a0208eb45d1f40b5(Integer[] ugly, Integer[] val, Integer[] index, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_27cf69a27791400381ee4172c8738061(Integer[] ugly, Integer[] val, Integer[] index, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 81 ******
public static Integer func_567888dfa3f04bd194dbe8a9de0580e8(Integer[] val, Integer[] ugly, Integer[] index, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8acfecd98a774083aab722c49bce51ac(Integer[] val, Integer[] ugly, Integer[] index, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 82 ******
public static Integer func_e090461ab333435094a4c13b71f820bf(Integer[] val, Integer[] index, Integer n, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f44eb6da07eb4ef48231ac3bb4b21e7d(Integer[] val, Integer[] index, Integer n, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 83 ******
public static Integer func_282ce1df16c94655a37f0021bf0829ea(Integer[] val, Integer[] index, Integer[] ugly, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_52cc3cbd6408463c8b1f4adc2fec0e37(Integer[] val, Integer[] index, Integer[] ugly, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 84 ******
public static Integer func_0652b37353794fc39637b6ef5db1ba32(Integer[] val, Integer[] index, Integer n, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c3916fafcf974aada7757178e3bd7534(Integer[] val, Integer[] index, Integer n, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 85 ******
public static Integer func_d2748616658a4c2cb4eb4d7459bc70fc(Integer[] val, Integer[] index, Integer n, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e5594c2392f9491fb441cd2a1c662d62(Integer[] val, Integer[] index, Integer n, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 86 ******
public static Integer func_d9d4dd34edb74bbdb1a0ad14bcb2b6b7(Integer[] ugly, Integer[] val, Integer[] index, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_78a01e50825f4a2a8cdf38fa74dc3325(Integer[] ugly, Integer[] val, Integer[] index, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 87 ******
public static Integer func_59dea5f4106a4524b6fa5a8b36cc5d8c(Integer[] val, Integer[] ugly, Integer[] index, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5139c1c5994945d6b1ce7ffc50d43d37(Integer[] val, Integer[] ugly, Integer[] index, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 88 ******
public static Integer func_f638b14b0ace49ae9b2689356bac7b5c(Integer[] val, Integer[] index, Integer[] ugly, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_51318c59e28a47498bac0d26c7b1b3c0(Integer[] val, Integer[] index, Integer[] ugly, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 89 ******
public static Integer func_84753670ba924fd69c0c28674c54d98a(Integer[] val, Integer[] index, Integer n, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_40c88fab1ca14030b1fa117f83835290(Integer[] val, Integer[] index, Integer n, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 90 ******
public static Integer func_85ec51d4eaf346d8bd07f0e8c4b2a177(Integer[] val, Integer[] index, Integer n, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cba06d38938541978a6389f24e300509(Integer[] val, Integer[] index, Integer n, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 91 ******
public static Integer func_10bfbeac4e46469caa81e905935bb865(Integer[] val, Integer[] index, Integer n, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_810d35665de24358a51098c32a641811(Integer[] val, Integer[] index, Integer n, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 92 ******
public static Integer func_7ee343cfa98742978bf3b23e2dc4f3b8(Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4fd6a6ceb6084ead8e7429625bfec19e(Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 93 ******
public static Integer func_c3cd97f9692c45b99375f7f4f25d8d17(Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_45dc3d0a4c41435980184c22dbc22aa8(Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 94 ******
public static Integer func_e0660fcbee9a4825b5a5314edd094c54(Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8e6d1c497a184ad1aa003715ed4d0b87(Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 95 ******
public static Integer func_090871baa6b24e8b8f84e906cd88329b(Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0ca9549a41664d6e90eae2151a5cac6b(Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 96 ******
public static Integer func_dd9871e3df9a4bf6aa9ac50c6c044d9c(Integer[] primes, Integer[] val, Integer[] index, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_43923719b5af4dc4b965629286535051(Integer[] primes, Integer[] val, Integer[] index, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 97 ******
public static Integer func_2b226ac6bf704a058e410385ec60599c(Integer[] primes, Integer[] val, Integer[] index, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8e6beb2a740e4bdda9738dbe9b2e1e40(Integer[] primes, Integer[] val, Integer[] index, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 98 ******
public static Integer func_54f9f58c38144e1cb9eeb023d32f3f03(Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4bb4819487644906b14cbff9ea419cbc(Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 99 ******
public static Integer func_067b908b75a84fa9aa8708c0a4774a5f(Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_af8a45021c66433988251886fc0e8848(Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 100 ******
public static Integer func_b476f34a7b1146b2be44a2b17b902b42(Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_acb99e9555b5496bb55e1386b6e242da(Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 101 ******
public static Integer func_b752e274f5e44a9e9d00cc5d0d393217(Integer[] val, Integer[] primes, Integer[] index, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9737d33f093f426bb71e429340299d24(Integer[] val, Integer[] primes, Integer[] index, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 102 ******
public static Integer func_d1b7c9b47ec44333b8a350a2b02e5aa8(Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1211e53a68b14294a7fb922dd08a371f(Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 103 ******
public static Integer func_dc5dc034d0d64bf7ae145236cae8e23c(Integer[] val, Integer[] primes, Integer[] index, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b3016be0d02a43b29e012121e11b8a22(Integer[] val, Integer[] primes, Integer[] index, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 104 ******
public static Integer func_1a80b587834348148aa43b8d53da76aa(Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_26840b6c05ec4b5c99c95e7f3954d529(Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 105 ******
public static Integer func_3734e00dae5c4fa7b502c02b5c68cc9c(Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_39d942cca1bd465b9b9575f285961689(Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 106 ******
public static Integer func_56e3a52f0efa4bd58a8ebe93c18da68e(Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_db3d24dc85ec4095b2aa3439cfa2b8ef(Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 107 ******
public static Integer func_120114a5641b40d0b0ddb9fc703bbfb4(Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b0565560dd3a48d6b04e4704b44aa131(Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 108 ******
public static Integer func_e7f02aad7872470d95a96ab14a274222(Integer[] val, Integer[] index, Integer[] primes, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f71781c1561c4b489a8ba05b36ad546c(Integer[] val, Integer[] index, Integer[] primes, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 109 ******
public static Integer func_a12fe04ec3504d16a4544b0a13b72e8a(Integer[] val, Integer[] index, Integer[] primes, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1cdd186824ea4d8eafb8b5b2d3e6e710(Integer[] val, Integer[] index, Integer[] primes, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 110 ******
public static Integer func_48ee36a282f74422a23f51fd2df80828(Integer[] ugly, Integer[] val, Integer[] index, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7f6008ee268244b2bc4f3ff3f847dfd4(Integer[] ugly, Integer[] val, Integer[] index, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 111 ******
public static Integer func_94e39e1c206d482d96f5978c9ddefc47(Integer[] val, Integer[] ugly, Integer[] index, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f41938233c904d58b501c54678e099e2(Integer[] val, Integer[] ugly, Integer[] index, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 112 ******
public static Integer func_8427cdfac5114d329f255fb32b666399(Integer[] val, Integer[] index, Integer[] ugly, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_00f6a82a2abe48d69be6e28c1dfb9619(Integer[] val, Integer[] index, Integer[] ugly, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 113 ******
public static Integer func_4c3dd3c18c0c406c863685393b621b55(Integer[] val, Integer[] index, Integer next, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ba27afb9f94e4066995f11d71bc01b20(Integer[] val, Integer[] index, Integer next, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 114 ******
public static Integer func_3722dd802c9f41e38a8cf13fb6a16006(Integer[] val, Integer[] index, Integer next, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3467d7bfb28c402fa168fac42cba7fe4(Integer[] val, Integer[] index, Integer next, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 115 ******
public static Integer func_c0a48431977e4c2e88e57b26e7b021ae(Integer[] val, Integer[] index, Integer next, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3c8bc3c69de64a4a941f927fffc421b5(Integer[] val, Integer[] index, Integer next, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 116 ******
public static Integer func_98e6bd471af44fc381594abab8cbe715(Integer[] ugly, Integer[] val, Integer[] index, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8485dc5501dc44dabfa53905d89b4596(Integer[] ugly, Integer[] val, Integer[] index, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 117 ******
public static Integer func_9db6087b976b4bbd970087c99ff89b41(Integer[] val, Integer[] ugly, Integer[] index, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_46109081536140cea3a932cc7a7762a3(Integer[] val, Integer[] ugly, Integer[] index, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 118 ******
public static Integer func_75533dbb9add49f3b3e8769371f87bef(Integer[] val, Integer[] index, Integer[] ugly, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_38294f2aa345497bb9f70953106bfc6f(Integer[] val, Integer[] index, Integer[] ugly, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 119 ******
public static Integer func_9bfbfc118668493693cce7d03cbe90c5(Integer[] val, Integer[] index, Integer next, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3cc175814a3b43659ed49d0bc9690bac(Integer[] val, Integer[] index, Integer next, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 120 ******
public static Integer func_a366ed3c5d9d4f32a16585587ae66d33(Integer[] val, Integer[] index, Integer next, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e600579406f24375bb9572a85fac3370(Integer[] val, Integer[] index, Integer next, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 121 ******
public static Integer func_493742b72af049a9ad87da17722b2510(Integer[] val, Integer[] index, Integer next, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_face46f5d06449d19bd575b062cd2189(Integer[] val, Integer[] index, Integer next, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 122 ******
public static Integer func_b08fa887b4dd4e64ab973454f1770b90(Integer[] ugly, Integer[] primes, Integer n, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_99d0d79295764dcea1730b50bcfc6c33(Integer[] ugly, Integer[] primes, Integer n, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 123 ******
public static Integer func_2887246757e14e9ca1644de4bb58d95b(Integer[] primes, Integer[] ugly, Integer n, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_14bde1459aa448a5a56288a4003fd4e9(Integer[] primes, Integer[] ugly, Integer n, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 124 ******
public static Integer func_9ea18ca9fdd0413c9539e6037ab2405f(Integer[] primes, Integer n, Integer[] ugly, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_33bedc7ba642422781c8362e4c0778ef(Integer[] primes, Integer n, Integer[] ugly, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 125 ******
public static Integer func_03d22e1caf2a4861be518cf4da7353d3(Integer[] primes, Integer n, Integer[] index, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7e61dd7cd5354b62a27ee78f75d2c1a2(Integer[] primes, Integer n, Integer[] index, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 126 ******
public static Integer func_b60d9fab64b74a428a06ca5a34fea5a1(Integer[] primes, Integer n, Integer[] index, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_19b3ff401ad84ca2878cf95fcd7ca466(Integer[] primes, Integer n, Integer[] index, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 127 ******
public static Integer func_98557fe899144d27b200b8b25819cc2e(Integer[] primes, Integer n, Integer[] index, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d7afb25ea5494f34b61852e4a05b41e0(Integer[] primes, Integer n, Integer[] index, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 128 ******
public static Integer func_424aad499bc347e18ea922c5e83c8b42(Integer[] ugly, Integer n, Integer[] primes, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3e5e908381404898831ac53674672d02(Integer[] ugly, Integer n, Integer[] primes, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 129 ******
public static Integer func_21d4db5ed4d54ba8a355657449ec3496(Integer n, Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a822d1911101451cb244c4ee8a2adfe3(Integer n, Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 130 ******
public static Integer func_4c459b314e254c82a3df768b007a5878(Integer n, Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_bcf7de21213b4275b4f5be71552a5c11(Integer n, Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 131 ******
public static Integer func_9184e3cfa62344c8b1a0f06522cc23fb(Integer n, Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ee007c3b71ed4b5aa72823ed0b6b8179(Integer n, Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 132 ******
public static Integer func_7302bb72a99841cf9826b3bfeb80a912(Integer n, Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_eadc754054d944a4a381112bd4ea2f95(Integer n, Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 133 ******
public static Integer func_6d5a12180a1f4fe99d1f03b2a90a1bf7(Integer n, Integer[] primes, Integer[] index, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2a4e78e319034278acfc1b4937609a1d(Integer n, Integer[] primes, Integer[] index, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 134 ******
public static Integer func_0a3cba1e737048deb476ed459c199a5e(Integer[] ugly, Integer n, Integer[] index, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4c9755b85c9b4825908a6939f7538217(Integer[] ugly, Integer n, Integer[] index, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 135 ******
public static Integer func_eb1a45df79c94b03b8ba15f63c19bc12(Integer n, Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a0414a55109d441ab46c208e42b04692(Integer n, Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 136 ******
public static Integer func_4dd5c105c28143ba844445280abacaff(Integer n, Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c321f44fadab4f608d47c5dd92a2bd41(Integer n, Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 137 ******
public static Integer func_e21f4f7eb28c46e08237deb10cb8bfde(Integer n, Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fad488b6106844a4ba0a9bc93d5c7b1b(Integer n, Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 138 ******
public static Integer func_ee74983d092a4a6ba948b8215e2c11a3(Integer n, Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fc7c5da98c344485afc294440dfef8c1(Integer n, Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 139 ******
public static Integer func_cb1da097122644168ddfa80e57fe80df(Integer n, Integer[] index, Integer[] primes, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c9b3b94631b34506873ee4f3cf9910bb(Integer n, Integer[] index, Integer[] primes, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 140 ******
public static Integer func_0036c32f14ec4df7a4108ff6c1221bc8(Integer[] ugly, Integer n, Integer[] index, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f5707f6002944cefb9d9d593c06831e3(Integer[] ugly, Integer n, Integer[] index, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 141 ******
public static Integer func_da23be3b474743a091682d5e145ae8bb(Integer n, Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8f36b0f1ef9c43b185f97ecc08024145(Integer n, Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 142 ******
public static Integer func_49ed1fea191447ed94183ca48efbb36d(Integer n, Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a94527b3f7f940fdb362eb15c69c5e29(Integer n, Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 143 ******
public static Integer func_c98882fcbfe6407b9b9dacfa18d966f1(Integer n, Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c634897e8d704a4d9b5a76168d74b231(Integer n, Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 144 ******
public static Integer func_07bd5f63472b4dde88ae5e839e55cc3d(Integer n, Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b8f00afcb079472abee84db7cfe9d7ea(Integer n, Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 145 ******
public static Integer func_bd8078d536d24668b116572e94e0e980(Integer n, Integer[] index, Integer[] val, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_51ec848110484ed4b6837e733b4b7c35(Integer n, Integer[] index, Integer[] val, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 146 ******
public static Integer func_0ccc2ffee41a4c06a837199c056ac424(Integer[] ugly, Integer n, Integer[] index, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_79e414401aaa4c05b9dfa51d77eca55c(Integer[] ugly, Integer n, Integer[] index, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 147 ******
public static Integer func_8f4f463fb9cd4d508c184cd5f32eaba7(Integer n, Integer[] ugly, Integer[] index, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1ca9ddc9283941aca649d718eb8ca2b7(Integer n, Integer[] ugly, Integer[] index, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 148 ******
public static Integer func_ff6d6b1580c2414aa471424b2d74ed60(Integer n, Integer[] index, Integer[] ugly, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_06f7b044ee99421d8681db92d5124187(Integer n, Integer[] index, Integer[] ugly, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 149 ******
public static Integer func_b7328eb6053d40d09aad5ef7808e24f0(Integer n, Integer[] index, Integer[] val, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_15edfa5f64ca47d4997de2ba481ed47c(Integer n, Integer[] index, Integer[] val, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 150 ******
public static Integer func_1840db28d13147f39d056b57ee4f8993(Integer n, Integer[] index, Integer[] val, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2567d7a47b6d4ac3a5e92f41da816815(Integer n, Integer[] index, Integer[] val, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 151 ******
public static Integer func_0ecceaaa8f7846e8a67df97ac4ae63b9(Integer n, Integer[] index, Integer[] val, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_635c2005579947429b575b04a7331d02(Integer n, Integer[] index, Integer[] val, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 152 ******
public static Integer func_3e5c0c0d0f704a65998a958623e3e326(Integer[] ugly, Integer[] primes, Integer[] index, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f355810309654a878e1955d8a81137e1(Integer[] ugly, Integer[] primes, Integer[] index, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 153 ******
public static Integer func_5792ed97c0954ba3855fec26af8080b9(Integer[] primes, Integer[] ugly, Integer[] index, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_45b73a5f21f3403388956bcc43d8daa8(Integer[] primes, Integer[] ugly, Integer[] index, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 154 ******
public static Integer func_c591e89074934271adc438c3b38c8224(Integer[] primes, Integer[] index, Integer[] ugly, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0601db9540354245bcaef6ff0b3d0b42(Integer[] primes, Integer[] index, Integer[] ugly, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 155 ******
public static Integer func_e08144c603144004b5056044a9ed45c4(Integer[] primes, Integer[] index, Integer n, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e71372e3f4434c8fb67f9cb67369ca73(Integer[] primes, Integer[] index, Integer n, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 156 ******
public static Integer func_b4f60e3ae9094028b8c8ff8ed8d67ea9(Integer[] primes, Integer[] index, Integer n, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3c927d6ac3974b2faf60874a70109842(Integer[] primes, Integer[] index, Integer n, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 157 ******
public static Integer func_a36ec4820da84d149f8871b4e064fede(Integer[] primes, Integer[] index, Integer n, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a22b6b42a51c4bab848e24e737151214(Integer[] primes, Integer[] index, Integer n, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 158 ******
public static Integer func_ce71b7b321b84d9ba3af47f8c0c60535(Integer[] ugly, Integer[] index, Integer[] primes, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2015175a5930494c8cd5d7a425ea9133(Integer[] ugly, Integer[] index, Integer[] primes, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 159 ******
public static Integer func_f4e86b95c7d54c9a9c88b8924391e8f1(Integer[] index, Integer[] ugly, Integer[] primes, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a486c4923cc145dd9c9d5329ab7bad5b(Integer[] index, Integer[] ugly, Integer[] primes, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 160 ******
public static Integer func_772be06347e243bd98a2c491a3f792d4(Integer[] index, Integer[] primes, Integer[] ugly, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d46f6f4fab9b42e687013325836c29b8(Integer[] index, Integer[] primes, Integer[] ugly, Integer n, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 161 ******
public static Integer func_c11c7cf7761448b7aea72c20810601af(Integer[] index, Integer[] primes, Integer n, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_91b6c54b80dc4997a5163db7f4bc3ef9(Integer[] index, Integer[] primes, Integer n, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 162 ******
public static Integer func_33660d85e24046479485cfb7963bd410(Integer[] index, Integer[] primes, Integer n, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3cd72800a9df425e900f932a806b5f25(Integer[] index, Integer[] primes, Integer n, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 163 ******
public static Integer func_717d1febfa6349dc9482c31c07429fdb(Integer[] index, Integer[] primes, Integer n, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_165a2f223ba3443a8b3b52cbe99d3ecb(Integer[] index, Integer[] primes, Integer n, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 164 ******
public static Integer func_779db48953c7491c8714fbc98ff9bde4(Integer[] ugly, Integer[] index, Integer n, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6a88572d30754ca0bb7d99b1e09744cd(Integer[] ugly, Integer[] index, Integer n, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 165 ******
public static Integer func_d9a83d294a014dc88fb0871ee1092932(Integer[] index, Integer[] ugly, Integer n, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c4476677942c4473a6288e099e7ba64b(Integer[] index, Integer[] ugly, Integer n, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 166 ******
public static Integer func_887d0aec5724465aa9616e97d75bb688(Integer[] index, Integer n, Integer[] ugly, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3793a4730585414b8aca2b1b4e396bcf(Integer[] index, Integer n, Integer[] ugly, Integer[] primes, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 167 ******
public static Integer func_15d3b8622f484cb795d6da743d81d318(Integer[] index, Integer n, Integer[] primes, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_43e1473ecb944228978e8417ff11fa69(Integer[] index, Integer n, Integer[] primes, Integer[] ugly, Integer[] val, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 168 ******
public static Integer func_5e811465768a44d898ada48de8db4507(Integer[] index, Integer n, Integer[] primes, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5f0dc57a2de14c57904593eed323d508(Integer[] index, Integer n, Integer[] primes, Integer[] val, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 169 ******
public static Integer func_cb3b6128e9224156a98e5ea0f789097a(Integer[] index, Integer n, Integer[] primes, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2e41f76a0d534b2890a4360e386bd870(Integer[] index, Integer n, Integer[] primes, Integer[] val, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 170 ******
public static Integer func_a360d9b32978401891877c1ced6c6c62(Integer[] ugly, Integer[] index, Integer n, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2c119369336e4e3fa0abaa2f3c37e2d8(Integer[] ugly, Integer[] index, Integer n, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 171 ******
public static Integer func_51faf4bd535347b8845d12013e65fc23(Integer[] index, Integer[] ugly, Integer n, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_80086816ca2e473b896d8527c87736ec(Integer[] index, Integer[] ugly, Integer n, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 172 ******
public static Integer func_658b655d45204081b412f7b938a5a1eb(Integer[] index, Integer n, Integer[] ugly, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6d9f8a0fb00d4ba481faa7bb0c595a13(Integer[] index, Integer n, Integer[] ugly, Integer[] val, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 173 ******
public static Integer func_1b31e384841a4eeea1564716b02625a9(Integer[] index, Integer n, Integer[] val, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_74f99d0342e54d6ab2254495d6ae3bdf(Integer[] index, Integer n, Integer[] val, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 174 ******
public static Integer func_f01cc5d3a8c848a5875ac9758fd22352(Integer[] index, Integer n, Integer[] val, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ffad1a8576ca4b8e8bc918a95f88e455(Integer[] index, Integer n, Integer[] val, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 175 ******
public static Integer func_c0f079b59fcf445f9fc01274c36334da(Integer[] index, Integer n, Integer[] val, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4a39f68c8d644a97a8bd4ce467667cfe(Integer[] index, Integer n, Integer[] val, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 176 ******
public static Integer func_2c4ae563979d4acebaee4b644d24b657(Integer[] ugly, Integer[] index, Integer n, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_778cfd400bc349649680ef1b5676065b(Integer[] ugly, Integer[] index, Integer n, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 177 ******
public static Integer func_089d383a1e124d5eabf64a33d8a4a21b(Integer[] index, Integer[] ugly, Integer n, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d1e6159f21ef439fbe69edc7c4f752a3(Integer[] index, Integer[] ugly, Integer n, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 178 ******
public static Integer func_38b60f98bbf14be3b8c40196e004721e(Integer[] index, Integer n, Integer[] ugly, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b79e750eb10c475b96b33e46f30b5e60(Integer[] index, Integer n, Integer[] ugly, Integer[] val, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 179 ******
public static Integer func_9d65c8a4a85a447a8283de5f9a7b68f5(Integer[] index, Integer n, Integer[] val, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8bdbe6c9b34d4404b2899927aa29b0b8(Integer[] index, Integer n, Integer[] val, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 180 ******
public static Integer func_e3e8021ce37a417bae7f9be3aabb4434(Integer[] index, Integer n, Integer[] val, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6bdbfd5c5fd648d3804a1212eb49c0f3(Integer[] index, Integer n, Integer[] val, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 181 ******
public static Integer func_bc9aaacf7b0a430d9c7c5c3844b74487(Integer[] index, Integer n, Integer[] val, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_206b0127301649e980a5c80816422bc9(Integer[] index, Integer n, Integer[] val, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 182 ******
public static Integer func_527ba9727fff41d7a9525e6bbc60164d(Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_43e4a584880e44d1bd6bb1b151f9d016(Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 183 ******
public static Integer func_fd803d1549c14dc4b33c1836b2fd07ca(Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_289f27202acf4ef49e329e4bb456f91b(Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 184 ******
public static Integer func_0556ae7517734f4cb0c3afeed836110a(Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8876fe3bbeab41bc9461795615f4987b(Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 185 ******
public static Integer func_dd898273ca054ab1bb9a375f068a75de(Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f56933006aa441b582d19fc8db311cf9(Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 186 ******
public static Integer func_6618e38e2c3b4366a5416d3eee056d33(Integer[] primes, Integer[] index, Integer[] val, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4e206a1228ef4a0d8d75a8c3dc5a9eea(Integer[] primes, Integer[] index, Integer[] val, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 187 ******
public static Integer func_af5e870685684b71b735da4df2917dd4(Integer[] primes, Integer[] index, Integer[] val, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ece6991ea2f14458a8eb61af28538d24(Integer[] primes, Integer[] index, Integer[] val, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 188 ******
public static Integer func_6b8e835a7e5d4ce2af151af9e2067d07(Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e9cf66963b684ee39e5dac76bb2619d1(Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 189 ******
public static Integer func_2255f207b2fa44ed8cee1f450d16ff84(Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_dc3d36041cec40ceb52aa17cbc730f67(Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 190 ******
public static Integer func_a90cd8ddd3f34e7cabd58430f5c161f9(Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_931e8841654046829fcaeb59f9d573f8(Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 191 ******
public static Integer func_583da755d61e4df484e60da04f866bed(Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2d5f14b82740494ab25a966b796f00eb(Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 192 ******
public static Integer func_24e07cf89db94e1390f117426227b964(Integer[] index, Integer[] primes, Integer[] val, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_16d5d9b131214fee8b0d5ccaff2a0804(Integer[] index, Integer[] primes, Integer[] val, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 193 ******
public static Integer func_5f705dbb1b4b48daad295bc4d8ba0173(Integer[] index, Integer[] primes, Integer[] val, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2196071a010c49a49c615cc41354172b(Integer[] index, Integer[] primes, Integer[] val, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 194 ******
public static Integer func_10fc2bd88f814adb98711d3093ed95e6(Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7d6e76577b864b5ea14b224259eb8d50(Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 195 ******
public static Integer func_e41684e81db2491e96ce394f234a510a(Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e4d0ddadfa0747b3a8c9c23b1ddb1492(Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly, Integer n, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 196 ******
public static Integer func_70d47b41754c42b28e4c78f90f136f4f(Integer[] index, Integer[] val, Integer[] primes, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_202e5f2ff1724dfaa5a9ee67e8179399(Integer[] index, Integer[] val, Integer[] primes, Integer n, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 197 ******
public static Integer func_eec31b9bdf2e4a7ab42da7bfcb47dc9e(Integer[] index, Integer[] val, Integer[] primes, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d12d5e4c5b7b4aba8f83a83b266fd164(Integer[] index, Integer[] val, Integer[] primes, Integer n, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 198 ******
public static Integer func_78f91ad2ae57476db4d4bd2ec30c54b4(Integer[] ugly, Integer[] index, Integer[] val, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_460c52c2cea24e33b33ee94b004a6673(Integer[] ugly, Integer[] index, Integer[] val, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 199 ******
public static Integer func_cb673d3ad452411bb45439719a9206fa(Integer[] index, Integer[] ugly, Integer[] val, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_aba8d970f38040d6b9190f1864854354(Integer[] index, Integer[] ugly, Integer[] val, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 200 ******
public static Integer func_65b8034f81c4485ea0a1c1da3a90c824(Integer[] index, Integer[] val, Integer[] ugly, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9d1635160c844fa1882784b6cffc6693(Integer[] index, Integer[] val, Integer[] ugly, Integer n, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 201 ******
public static Integer func_af47ebc0edf54b019ec6409a368379d0(Integer[] index, Integer[] val, Integer n, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6d7ed1082fc940a8ba139f716328e9a9(Integer[] index, Integer[] val, Integer n, Integer[] ugly, Integer[] primes, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 202 ******
public static Integer func_fe085390d7de4da68000c91c91ab5bfb(Integer[] index, Integer[] val, Integer n, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9f1e4985fcfc423a9c70a1bf37a8a076(Integer[] index, Integer[] val, Integer n, Integer[] primes, Integer[] ugly, Integer next){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 203 ******
public static Integer func_b6f8d21d157d4dc2b087a1f255ed7f57(Integer[] index, Integer[] val, Integer n, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ebca799007a44c0c97f90bc6460f042f(Integer[] index, Integer[] val, Integer n, Integer[] primes, Integer next, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 204 ******
public static Integer func_3c9e1100c16344eab6e378642adeba7b(Integer[] ugly, Integer[] index, Integer[] val, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b57935ad532943cfb11f7465cb6f5d93(Integer[] ugly, Integer[] index, Integer[] val, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 205 ******
public static Integer func_160a87c6547a4ae0a02712bee101f774(Integer[] index, Integer[] ugly, Integer[] val, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e6509f05d6bf4bad8d825eb0a5a05758(Integer[] index, Integer[] ugly, Integer[] val, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 206 ******
public static Integer func_ce604b9fb253409c95e9ab46b0853842(Integer[] index, Integer[] val, Integer[] ugly, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d9a6d210088f4b35939d2b5299be8734(Integer[] index, Integer[] val, Integer[] ugly, Integer n, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 207 ******
public static Integer func_4764c38650d144deab33672efed2f713(Integer[] index, Integer[] val, Integer n, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0859a0ee9ed541f3a6c2b50855bf3c9f(Integer[] index, Integer[] val, Integer n, Integer[] ugly, Integer next, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 208 ******
public static Integer func_8d78d8ee50084c20a9b48cfe0168acc1(Integer[] index, Integer[] val, Integer n, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c9569f3d252d4265b2f242036c74ba85(Integer[] index, Integer[] val, Integer n, Integer next, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 209 ******
public static Integer func_3517e2e58a094f22a470d63f6023a5e0(Integer[] index, Integer[] val, Integer n, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_464497fe6448438ab48fcbec48508275(Integer[] index, Integer[] val, Integer n, Integer next, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 210 ******
public static Integer func_58e96657cd03438e9e822c1aea017005(Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f134388041d64dc5a5dda8a4067d5e0c(Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 211 ******
public static Integer func_a6f71ef85b344c859f8cbdd944780b5e(Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_13239b5c1ff14a9890f24d3720ec46f2(Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 212 ******
public static Integer func_4ea25b50d2a24aafb722dccdc81c9365(Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_36a2aafcba614342bf49286738a8d30b(Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 213 ******
public static Integer func_0653d8ac71ed4ad7b7b9708b7b2fb0db(Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1aee99b6b72e43b4bb24e923a5f5019d(Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 214 ******
public static Integer func_f4cf9460007346dda4dc3e506bd31ae2(Integer[] primes, Integer[] index, Integer[] val, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_87c93e495aa64e29b204a0441b6d7367(Integer[] primes, Integer[] index, Integer[] val, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 215 ******
public static Integer func_7210611d54854a5bac7bc486d21a56fd(Integer[] primes, Integer[] index, Integer[] val, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c75679528baa49ce87a5dd007bd676eb(Integer[] primes, Integer[] index, Integer[] val, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 216 ******
public static Integer func_b92fd0b09766495db2850d249e7a35f2(Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_10d1fe03af634243bba047a0e35c4e36(Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 217 ******
public static Integer func_19bd005305d54d3ab930381dd847929f(Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1d7f4a946bfa41699fbc175b8c2d52f4(Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 218 ******
public static Integer func_151fa04c9c914748a0322d698b31a848(Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_27179a466b174fca8c2735afa85ee7a1(Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 219 ******
public static Integer func_e10496fe16a44ff6b01eb15332943969(Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4edddf310591432c801dd228c98ee230(Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 220 ******
public static Integer func_a386da0284e142a9b4b57bf4337c79bf(Integer[] index, Integer[] primes, Integer[] val, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_231272ff2fff483783b8480ab715edd2(Integer[] index, Integer[] primes, Integer[] val, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 221 ******
public static Integer func_e1ecbda91ecf4f29b2f7ee9f4b8227e7(Integer[] index, Integer[] primes, Integer[] val, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ec2b23b8cae5497abb3a2426ed77117f(Integer[] index, Integer[] primes, Integer[] val, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 222 ******
public static Integer func_4f57286d36474c97a66f246c0d752129(Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_89cb1b8c37d440dc862f797f9f3ad283(Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 223 ******
public static Integer func_24cb5accf68e40e9a29de973a3ff1945(Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3b2b5108809d4747aa9c6cc8478ed61c(Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 224 ******
public static Integer func_ebe5a37b2c244232a58dd965bba32836(Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ca42cae12f754d96b74cffccb604bf52(Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 225 ******
public static Integer func_f6661d634a0d43e0ae0e03edb3f66e03(Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_22d6a34c231345688df8ce03c84b3704(Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly, Integer next, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 226 ******
public static Integer func_3c42e6de3553415a9da2ee0c4ab69630(Integer[] index, Integer[] val, Integer[] primes, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_95197914f06c48738dae04fd281779be(Integer[] index, Integer[] val, Integer[] primes, Integer next, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 227 ******
public static Integer func_0257ba2693714e4e8c94ef5632466e0a(Integer[] index, Integer[] val, Integer[] primes, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0c963aab0c6840b69991b60186bab66e(Integer[] index, Integer[] val, Integer[] primes, Integer next, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 228 ******
public static Integer func_827492990bad46e2b70062fbac575a32(Integer[] ugly, Integer[] index, Integer[] val, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_52ce8bf9c8fe406ebd7b948e617f4832(Integer[] ugly, Integer[] index, Integer[] val, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 229 ******
public static Integer func_45250327f5f049dfb23ef07ebdc86a88(Integer[] index, Integer[] ugly, Integer[] val, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cc07886061c241daace1666fff80cf75(Integer[] index, Integer[] ugly, Integer[] val, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 230 ******
public static Integer func_0db1e7716ec94d0daa6efc13c51f4c8c(Integer[] index, Integer[] val, Integer[] ugly, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6f750106b4f647cfa81c6d3281f31f86(Integer[] index, Integer[] val, Integer[] ugly, Integer next, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 231 ******
public static Integer func_44e7ed663bae46b481c1f3637bbbe22c(Integer[] index, Integer[] val, Integer next, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d77b0879527f48d49002a6658a1b7872(Integer[] index, Integer[] val, Integer next, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 232 ******
public static Integer func_4b62a1be594d4572bcc00a842307df47(Integer[] index, Integer[] val, Integer next, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0cc88c4bd3ca4c2580be57b4e4819232(Integer[] index, Integer[] val, Integer next, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 233 ******
public static Integer func_5cd422709d3842d6b70d77f8a729963f(Integer[] index, Integer[] val, Integer next, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1a4fa0136493437cb7a1c15d2f4d9d0e(Integer[] index, Integer[] val, Integer next, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 234 ******
public static Integer func_da4a1b0dcf744425bca01d3c2907fca4(Integer[] ugly, Integer[] index, Integer[] val, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e16c0f9f5a9941118c2e3417bb448abb(Integer[] ugly, Integer[] index, Integer[] val, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 235 ******
public static Integer func_acd0177b1bd14205bcfa362bfcad68e8(Integer[] index, Integer[] ugly, Integer[] val, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fe4a66b1716f40f293c3a2ecb18fdc65(Integer[] index, Integer[] ugly, Integer[] val, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 236 ******
public static Integer func_0d49ce9138e64abfada14ca3b60afd52(Integer[] index, Integer[] val, Integer[] ugly, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_70fee00a636443068d3176167c5a1e9c(Integer[] index, Integer[] val, Integer[] ugly, Integer next, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 237 ******
public static Integer func_c5d898ab3bfe4870953a36f9ebd6aeb4(Integer[] index, Integer[] val, Integer next, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d9e54fca39eb45909ea6880216013a9e(Integer[] index, Integer[] val, Integer next, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 238 ******
public static Integer func_f0fba3959b38439699e5c137c2001ac3(Integer[] index, Integer[] val, Integer next, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_92c8fd6e63b545b2bae4775ecb0ea1f4(Integer[] index, Integer[] val, Integer next, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 239 ******
public static Integer func_88f39a4ce65a4bdf9eed98daf37f1164(Integer[] index, Integer[] val, Integer next, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6ddbdced911344f196619e4a95b38c7e(Integer[] index, Integer[] val, Integer next, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 240 ******
public static Integer func_2a36d36c56364c1bac5ec7c62664e589(Integer[] ugly, Integer[] primes, Integer n, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c329e0c46c3b45718eed1ce8de15559a(Integer[] ugly, Integer[] primes, Integer n, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 241 ******
public static Integer func_efed060069104273801c48da481fb945(Integer[] primes, Integer n, Integer[] ugly, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c6e46a25236c4be6b9fa437e2b651f27(Integer[] primes, Integer n, Integer[] ugly, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 242 ******
public static Integer func_57a6c1cd63f240e8a1c359c7954505ef(Integer[] primes, Integer[] ugly, Integer n, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ae95e283682848b9acde73eb328448fe(Integer[] primes, Integer[] ugly, Integer n, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 243 ******
public static Integer func_fb19f6ca0cd048efad9126c2007f3765(Integer[] primes, Integer n, Integer[] index, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c1b5303458b1404288f4a061192bf5fd(Integer[] primes, Integer n, Integer[] index, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 244 ******
public static Integer func_7ad79483becc429295c6c1e58d872c88(Integer[] primes, Integer n, Integer[] index, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_dba554ee199e47c99a71d93236467cdb(Integer[] primes, Integer n, Integer[] index, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 245 ******
public static Integer func_3952dcf39fb647a3b41cc5a6473746f7(Integer[] primes, Integer n, Integer[] index, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7d7ad0f2e07044f8a8045d0a66e2456f(Integer[] primes, Integer n, Integer[] index, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 246 ******
public static Integer func_866de1d388784295ad7d479a3e086c4f(Integer[] ugly, Integer n, Integer[] primes, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1267a3a2112344b081112dcc74a1a07d(Integer[] ugly, Integer n, Integer[] primes, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 247 ******
public static Integer func_ab3083a0f65547e991cc9616402da6e4(Integer n, Integer[] ugly, Integer[] primes, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8d029fde01aa448489e46516fcb414e5(Integer n, Integer[] ugly, Integer[] primes, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 248 ******
public static Integer func_1e0666893da244cfa3df4ca7fdacacc5(Integer n, Integer[] primes, Integer[] ugly, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_92b2ca3ab7524a84817454d694ba8629(Integer n, Integer[] primes, Integer[] ugly, Integer[] index, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 249 ******
public static Integer func_7a652606a8e341a1b57eb239ba0a669c(Integer n, Integer[] primes, Integer[] index, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4bc5863520a3472db3406992424e1ed4(Integer n, Integer[] primes, Integer[] index, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 250 ******
public static Integer func_440e12ed1c894dd99e0494133b8ef570(Integer n, Integer[] primes, Integer[] index, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6ae22e295cdd45eea19ca58980d3c914(Integer n, Integer[] primes, Integer[] index, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 251 ******
public static Integer func_33033b482e9348678f2eade173a7c39a(Integer n, Integer[] primes, Integer[] index, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_18c8b94b00074ee0ac23c571a71aef0b(Integer n, Integer[] primes, Integer[] index, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 252 ******
public static Integer func_7592291c64f74d5893a010b3950b4085(Integer[] ugly, Integer n, Integer[] index, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c7e04fffa22b495a97f9e7b8cbfd21f3(Integer[] ugly, Integer n, Integer[] index, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 253 ******
public static Integer func_fcd98ec94cf14470aaa3f43a3e9b4c74(Integer n, Integer[] ugly, Integer[] index, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_743f3e710eec478183c8c0005c509684(Integer n, Integer[] ugly, Integer[] index, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 254 ******
public static Integer func_3ac1d55d7ca044b0b3a64f2504b380ea(Integer n, Integer[] index, Integer[] ugly, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_52c3510f440e43d09686a09246ef1298(Integer n, Integer[] index, Integer[] ugly, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 255 ******
public static Integer func_ea95273ffa0443e7919f1bafd6f34081(Integer n, Integer[] index, Integer[] primes, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d1a1dd2160d24b2a9c9ad20ae7bb8f95(Integer n, Integer[] index, Integer[] primes, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 256 ******
public static Integer func_e798774240704ad781de2c9779101b55(Integer n, Integer[] index, Integer[] primes, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3fd28578bb644900a8be84af1ee51c63(Integer n, Integer[] index, Integer[] primes, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 257 ******
public static Integer func_8b4f8b0f11de4beda7a9a43128c198dd(Integer n, Integer[] index, Integer[] primes, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1626d879da2041ab920a9b3f5fcd8a5b(Integer n, Integer[] index, Integer[] primes, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 258 ******
public static Integer func_f6b09e91789b47bb908e3eded3dc5ea8(Integer[] ugly, Integer n, Integer[] index, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e76e219feb3749a49ee0dba68fe769ed(Integer[] ugly, Integer n, Integer[] index, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 259 ******
public static Integer func_e0c069accaee456bb900752b83ca3ece(Integer n, Integer[] ugly, Integer[] index, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4fe7b330ecea49b0ae04080bd540906d(Integer n, Integer[] ugly, Integer[] index, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 260 ******
public static Integer func_8855cbd369cc4b86a3d44143ae6c0976(Integer n, Integer[] index, Integer[] ugly, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cc4ef82126f64dc2b36c0447e5ddd127(Integer n, Integer[] index, Integer[] ugly, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 261 ******
public static Integer func_e9e751df97894d569c72bda8c337d398(Integer n, Integer[] index, Integer next, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_92b2c38f6b614c38a125c7706f424160(Integer n, Integer[] index, Integer next, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 262 ******
public static Integer func_e392222d4f0e4511bae37630a5b6f7ed(Integer n, Integer[] index, Integer next, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6d8b9d14bd6a4f0ab1bf3e482f4c5200(Integer n, Integer[] index, Integer next, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 263 ******
public static Integer func_593ea8f317f247c4a91d46d713d8fb47(Integer n, Integer[] index, Integer next, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ccc46971a8c148fa8c53aadc0e4013f7(Integer n, Integer[] index, Integer next, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 264 ******
public static Integer func_c33dcaf3bced431d978f93c3d67e94d0(Integer n, Integer[] ugly, Integer[] index, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6f5bf9def4d54ccf8f5aab0a7d73cd6c(Integer n, Integer[] ugly, Integer[] index, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 265 ******
public static Integer func_3e0f7cd2ebc043acb101791d486b3213(Integer[] ugly, Integer n, Integer[] index, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1a3de92dcff444ae8e96001faaf3173e(Integer[] ugly, Integer n, Integer[] index, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 266 ******
public static Integer func_ba195841148847659ffd6f436c68786c(Integer n, Integer[] index, Integer[] ugly, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6881d995b14c4110952325da8adf9d96(Integer n, Integer[] index, Integer[] ugly, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 267 ******
public static Integer func_adb76aa092df4399954ea689ae5e5238(Integer n, Integer[] index, Integer next, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c2f1604d7af6448a99c414266eb7de7c(Integer n, Integer[] index, Integer next, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 268 ******
public static Integer func_ea4f0925d3bd492788b843d2cdd0babf(Integer n, Integer[] index, Integer next, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5945484b036842128f442cc681fe9bc2(Integer n, Integer[] index, Integer next, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 269 ******
public static Integer func_cf4fbc6c0a5d480bb6c696fd32fbe93d(Integer n, Integer[] index, Integer next, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ba2bfb484ff7459794db232c3abf2cb8(Integer n, Integer[] index, Integer next, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 270 ******
public static Integer func_b24b6a3360474c5ca362ebb8d6f600be(Integer[] ugly, Integer[] primes, Integer[] index, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ca441698028b4bd49abf4731793a46a6(Integer[] ugly, Integer[] primes, Integer[] index, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 271 ******
public static Integer func_4b659c19984440078a2737138cafdd40(Integer[] primes, Integer[] ugly, Integer[] index, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6966a267be9c407d83cbbd95c7635446(Integer[] primes, Integer[] ugly, Integer[] index, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 272 ******
public static Integer func_0dcfcc4b19944481b5397488b4ccf18f(Integer[] primes, Integer[] index, Integer n, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7d94e71307e5434dadd47b3518e19230(Integer[] primes, Integer[] index, Integer n, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 273 ******
public static Integer func_be8e62a00ca54387a74788d61aa36be2(Integer[] primes, Integer[] index, Integer[] ugly, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_267c06891eff4096834873c6f97f2680(Integer[] primes, Integer[] index, Integer[] ugly, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 274 ******
public static Integer func_a6ede01ae42a4aa99f51aa7b247cdb50(Integer[] primes, Integer[] index, Integer n, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9ac0f4d135a44618acf59575e434b6a4(Integer[] primes, Integer[] index, Integer n, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 275 ******
public static Integer func_f61b84d559bf4a3b8aff062ea86896bd(Integer[] primes, Integer[] index, Integer n, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_030e5fe41fdc47dc9a56748d7ef00b56(Integer[] primes, Integer[] index, Integer n, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 276 ******
public static Integer func_5af213d94e4b4db68e3ae37d365f2bcf(Integer[] ugly, Integer[] index, Integer[] primes, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3b6037a25cad449b97e35e99da602b2b(Integer[] ugly, Integer[] index, Integer[] primes, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 277 ******
public static Integer func_19522e8ae0c04a8b9a578da2483fac14(Integer[] index, Integer[] ugly, Integer[] primes, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_58de97801b3b4c7087bcecf2cbf5202d(Integer[] index, Integer[] ugly, Integer[] primes, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 278 ******
public static Integer func_4d1703252e5144998331afd7b734dd62(Integer[] index, Integer[] primes, Integer[] ugly, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b4bd24449723414288871f3d4ef60709(Integer[] index, Integer[] primes, Integer[] ugly, Integer n, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 279 ******
public static Integer func_2f30b41552504b5ab8bf0df04263dc84(Integer[] index, Integer[] primes, Integer n, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3b6cd735b4f741da8e045ba2dcca137e(Integer[] index, Integer[] primes, Integer n, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 280 ******
public static Integer func_e6e866101f1e4c4981ee8cc9227bbf9f(Integer[] index, Integer[] primes, Integer n, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2f55610e668449a88383ffa2927436b7(Integer[] index, Integer[] primes, Integer n, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 281 ******
public static Integer func_5c424c13cbdd448590c7390c8412cdbc(Integer[] index, Integer[] primes, Integer n, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_610810bd2b4d4f22985208e91e2123f8(Integer[] index, Integer[] primes, Integer n, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 282 ******
public static Integer func_0dcaeb74cda3404681fc78aaf7497190(Integer[] index, Integer[] ugly, Integer n, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_bb558cb7a8be4358b1b129ae2f5017f3(Integer[] index, Integer[] ugly, Integer n, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 283 ******
public static Integer func_b1a4d07b42b242fb9a9a25b4c0d5ce76(Integer[] ugly, Integer[] index, Integer n, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_80eeddbfdece4aaaba82a9b31574774b(Integer[] ugly, Integer[] index, Integer n, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 284 ******
public static Integer func_27638bab457945b9a21bb095f5d28615(Integer[] index, Integer n, Integer[] ugly, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_aca2104c495644b9a4ddb47da3b79479(Integer[] index, Integer n, Integer[] ugly, Integer[] primes, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 285 ******
public static Integer func_fbc83151e7e24369b6ffc3d90bd38de8(Integer[] index, Integer n, Integer[] primes, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7ac1e10fcb31427e9ae31c003c10e826(Integer[] index, Integer n, Integer[] primes, Integer[] ugly, Integer next, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 286 ******
public static Integer func_cef14a4707e14b30aff359f290ffa4a3(Integer[] index, Integer n, Integer[] primes, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2da02d874460403c84105e21d6dc0527(Integer[] index, Integer n, Integer[] primes, Integer next, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 287 ******
public static Integer func_96740361ab4542a7af1def93aaf3a42e(Integer[] index, Integer n, Integer[] primes, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7f13c5a6298f4b9a995ce3a5200cc648(Integer[] index, Integer n, Integer[] primes, Integer next, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 288 ******
public static Integer func_bf8fb8b6768e45d68338f9fb15bf7f34(Integer[] index, Integer[] ugly, Integer n, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_39dcd6b4da9b4bfd8faacb87451fae20(Integer[] index, Integer[] ugly, Integer n, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 289 ******
public static Integer func_4a5e9ae1322047f99ebb9195deea904a(Integer[] ugly, Integer[] index, Integer n, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0f812f7bf0eb45d3bf896fb790c29ad9(Integer[] ugly, Integer[] index, Integer n, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 290 ******
public static Integer func_3becb13215f74c2ea8bca25c507ff7f9(Integer[] index, Integer n, Integer[] ugly, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_228c28da31374effb6e3a9c98a8f8c76(Integer[] index, Integer n, Integer[] ugly, Integer next, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 291 ******
public static Integer func_2dbf57f108974d7db4bc0fd6daaa1bb9(Integer[] index, Integer n, Integer next, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9ccc0eead5684ec0aeed5f1b4556b1ba(Integer[] index, Integer n, Integer next, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 292 ******
public static Integer func_d1d87c45540c4c428e329667f34b86e5(Integer[] index, Integer n, Integer next, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_eb3f453460c84dfd9876c20a97587167(Integer[] index, Integer n, Integer next, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 293 ******
public static Integer func_9ea5624c9ef744b49c4aef6a85183b10(Integer[] index, Integer n, Integer next, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_58fd4bc370d445248a0acd8e8e933ab8(Integer[] index, Integer n, Integer next, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 294 ******
public static Integer func_be2692a001bd43488d4e1a7148ed21d6(Integer[] ugly, Integer[] index, Integer n, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ca41c8581f674cfb93fbac13d22b28a9(Integer[] ugly, Integer[] index, Integer n, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 295 ******
public static Integer func_03f033b73c244ebe914b95f113c48b95(Integer[] index, Integer[] ugly, Integer n, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f45245dd515f48a399314775c5e951be(Integer[] index, Integer[] ugly, Integer n, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 296 ******
public static Integer func_12b1433dde7f4a24b71825bacb146316(Integer[] index, Integer n, Integer[] ugly, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_bf8197ec503c477aab040dc4229fe233(Integer[] index, Integer n, Integer[] ugly, Integer next, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 297 ******
public static Integer func_fee6c17a9fcf4c0d8d29e146e811b980(Integer[] index, Integer n, Integer next, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_10695037fd8f4c588ea9bacac5ce5b47(Integer[] index, Integer n, Integer next, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 298 ******
public static Integer func_4bf375c67835441ab827127a6c574b5e(Integer[] index, Integer n, Integer next, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6116eeb8645c41f1a98d93533fb90f0a(Integer[] index, Integer n, Integer next, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 299 ******
public static Integer func_ecc2df2d612747acbaf3a5942edef391(Integer[] index, Integer n, Integer next, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_35a62e4857e84afabe0b13c5aebe5024(Integer[] index, Integer n, Integer next, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 300 ******
public static Integer func_495cd049f80644aca6de990a27889084(Integer[] ugly, Integer[] primes, Integer[] index, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f808e747400b4648a30084c59b6165b3(Integer[] ugly, Integer[] primes, Integer[] index, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 301 ******
public static Integer func_0841d2bcb99548bdaa640dc50e33524a(Integer[] primes, Integer[] ugly, Integer[] index, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e8c429b73ba842d7adb4e097631457ad(Integer[] primes, Integer[] ugly, Integer[] index, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 302 ******
public static Integer func_631ab4c88cee499ca3c14f2cd50d3b2e(Integer[] primes, Integer[] index, Integer[] ugly, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6206d113a1fd4cc1958facaded235d96(Integer[] primes, Integer[] index, Integer[] ugly, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 303 ******
public static Integer func_a27dbdfc67a54e8b82491928786af91c(Integer[] primes, Integer[] index, Integer next, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6992052c47624d90b9fee6f6995641a2(Integer[] primes, Integer[] index, Integer next, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 304 ******
public static Integer func_05448a5859b8446abac812221e4c9df2(Integer[] primes, Integer[] index, Integer next, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ab896fe99e1e467ba129173f4f0c7264(Integer[] primes, Integer[] index, Integer next, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 305 ******
public static Integer func_5149ce8bd9794b878d4a5006fa1174c2(Integer[] primes, Integer[] index, Integer next, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7cdd6a2228d341408c91a6dcdd80c0cf(Integer[] primes, Integer[] index, Integer next, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 306 ******
public static Integer func_3836ad7e9bdd4db6960818fd08ee14ac(Integer[] ugly, Integer[] index, Integer[] primes, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9634307c5f744f84ae501d4d366885ff(Integer[] ugly, Integer[] index, Integer[] primes, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 307 ******
public static Integer func_2cbf3a234b234586acf34d1e65471b78(Integer[] index, Integer[] ugly, Integer[] primes, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ce20d12fd19d4193a1da641b0675a338(Integer[] index, Integer[] ugly, Integer[] primes, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 308 ******
public static Integer func_e4256060a9754ed4b8f42bcff6efcb2f(Integer[] index, Integer[] primes, Integer[] ugly, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a9a3d5517b4c48b69187208aca5c8a6b(Integer[] index, Integer[] primes, Integer[] ugly, Integer next, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 309 ******
public static Integer func_79396975c5fe4d6db785dff249bb7a59(Integer[] index, Integer[] primes, Integer next, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5764363ae3384c67842e6f18b2db1547(Integer[] index, Integer[] primes, Integer next, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 310 ******
public static Integer func_e30f9dcf431847e7a79c4ac4e4129579(Integer[] index, Integer[] primes, Integer next, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_119f8e1709844d509a45037556d56a38(Integer[] index, Integer[] primes, Integer next, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 311 ******
public static Integer func_0d71e59b5e1148b69f2fd69a2198118b(Integer[] ugly, Integer[] index, Integer next, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_229ed783bbc04001ab13c96af32fb905(Integer[] ugly, Integer[] index, Integer next, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 312 ******
public static Integer func_9fea5a56edfd4b1c8cb4fc78a3120048(Integer[] index, Integer[] ugly, Integer next, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6ec91af3573342dfac0dd19630b17c43(Integer[] index, Integer[] ugly, Integer next, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 313 ******
public static Integer func_e5d0bb8804d545a8bb639a140d1668c3(Integer[] index, Integer[] primes, Integer next, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1b00c20435a843cb9c614a9f9e56b119(Integer[] index, Integer[] primes, Integer next, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 314 ******
public static Integer func_d6a155613cbd4ec1ad27ae83016d8729(Integer[] index, Integer next, Integer[] ugly, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8a9e1121ca2b4f408af24ef2190bb454(Integer[] index, Integer next, Integer[] ugly, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 315 ******
public static Integer func_2f4e2c9b8bd649bf93b88739991acff3(Integer[] index, Integer next, Integer[] primes, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3f7a19992b6e478c95552fd038a25f03(Integer[] index, Integer next, Integer[] primes, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 316 ******
public static Integer func_a77e61eefa0f4f95bcc3b471d2b813be(Integer[] index, Integer next, Integer[] primes, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_26b5576e0bc945d8bbd6e0ca06e4d05b(Integer[] index, Integer next, Integer[] primes, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 317 ******
public static Integer func_047b05496d5d4382a5c462db5b08fac6(Integer[] index, Integer next, Integer[] primes, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_45313b0ff87a42968600850ffbf9ebbd(Integer[] index, Integer next, Integer[] primes, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 318 ******
public static Integer func_e1e15ee088434790bc9cfa9dc46bed7d(Integer[] ugly, Integer[] index, Integer next, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_47fa27ac461e4d35a9e175e508727e8e(Integer[] ugly, Integer[] index, Integer next, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 319 ******
public static Integer func_ad453f53ee6444faaa685e832260241e(Integer[] index, Integer[] ugly, Integer next, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e7c19ddc34724309b3d949d8b2a15831(Integer[] index, Integer[] ugly, Integer next, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 320 ******
public static Integer func_42581d91d2d34b938cbdbb4ed045a3b8(Integer[] index, Integer next, Integer[] ugly, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0f3df7fee4b44a989ccd0f098b1fae46(Integer[] index, Integer next, Integer[] ugly, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 321 ******
public static Integer func_19b6094481734ebdb83b8378f7342ed0(Integer[] index, Integer next, Integer n, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3ff59ef1574947bb8bd3e2130bf2a87a(Integer[] index, Integer next, Integer n, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 322 ******
public static Integer func_2159bab9ce114f0e817cc519838a77bb(Integer[] index, Integer next, Integer n, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9e28b8a3ecfe487896d589c0de60c996(Integer[] index, Integer next, Integer n, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 323 ******
public static Integer func_44c98ea0ab8844a2bbe4f0821a0fca8a(Integer[] ugly, Integer[] index, Integer next, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_33f4bd21db1544468f8b9ad22eae6c8d(Integer[] ugly, Integer[] index, Integer next, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 324 ******
public static Integer func_7468ecf9015e406dbb94de1ec481b2fb(Integer[] index, Integer next, Integer n, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d05d22eae33548cface32499455da5c0(Integer[] index, Integer next, Integer n, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 325 ******
public static Integer func_8de84f5670504ea1a2c765aa0def0e50(Integer[] index, Integer[] ugly, Integer next, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4db15187b0ee46869ce3270b4c6d10cb(Integer[] index, Integer[] ugly, Integer next, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 326 ******
public static Integer func_7262058f2b4a4756b15a0c60d6690589(Integer[] index, Integer next, Integer[] ugly, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6ae22672f7154f8f909581ea24f1cf8c(Integer[] index, Integer next, Integer[] ugly, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 327 ******
public static Integer func_b55016bf98684608a5fc8e8c1ed44561(Integer[] index, Integer next, Integer n, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_dae370af54d94930b73aab317bdf029d(Integer[] index, Integer next, Integer n, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 328 ******
public static Integer func_56433c6643724cf0ac7a77550e2f6996(Integer[] index, Integer next, Integer n, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0e0122da37964ccfb462296ce07bc40e(Integer[] index, Integer next, Integer n, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 329 ******
public static Integer func_7c45d46aec8042c5b71143e7ac562c58(Integer[] index, Integer next, Integer n, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d9dbe70443e843f9a841d79d580f6dae(Integer[] index, Integer next, Integer n, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 330 ******
public static Integer func_b66313c5de974d93a26456019fc2399e(Integer[] ugly, Integer[] primes, Integer[] index, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_22f37951d07e4408bd0b2eb4d1c59ad9(Integer[] ugly, Integer[] primes, Integer[] index, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 331 ******
public static Integer func_8336c01f3fcb451b8b62b1375ac63b4b(Integer[] primes, Integer[] ugly, Integer[] index, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e6babbf1c3f84983b4fb1fda10901a94(Integer[] primes, Integer[] ugly, Integer[] index, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 332 ******
public static Integer func_4fe2f353a41c4f199fc5a8ae9dea1cef(Integer[] primes, Integer[] index, Integer[] ugly, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2e271694e98e41009c1004eb1eaef468(Integer[] primes, Integer[] index, Integer[] ugly, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 333 ******
public static Integer func_54483408904e499ca153f42a01ee71e4(Integer[] primes, Integer[] index, Integer next, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_850efc6d795849e2a29af7dccae985ca(Integer[] primes, Integer[] index, Integer next, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 334 ******
public static Integer func_08f560c646bb4302ade777f231ad85fa(Integer[] primes, Integer[] index, Integer next, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9dee2589d5c04e69bb77259afda8ea21(Integer[] primes, Integer[] index, Integer next, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 335 ******
public static Integer func_5e33d9e24c7c4caea832caea2708e490(Integer[] primes, Integer[] index, Integer next, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_87273d2e59014080ae8e6cdc1e881cf7(Integer[] primes, Integer[] index, Integer next, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 336 ******
public static Integer func_188d458d6d7a45fab127e295e6d1810a(Integer[] ugly, Integer[] index, Integer[] primes, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2b702f40c90d485fb7083ac61a81607d(Integer[] ugly, Integer[] index, Integer[] primes, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 337 ******
public static Integer func_8bb439f091ad489daec358dfb1c6bd69(Integer[] index, Integer[] ugly, Integer[] primes, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_28a13693c6c846068ca3ee061982806e(Integer[] index, Integer[] ugly, Integer[] primes, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 338 ******
public static Integer func_151ee44d31284dabbce67485c3ab1748(Integer[] index, Integer[] primes, Integer[] ugly, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4b4f72121e9f49feb397209a98cead23(Integer[] index, Integer[] primes, Integer[] ugly, Integer next, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 339 ******
public static Integer func_af0ca9ebccfc41689901f3e138923466(Integer[] index, Integer[] primes, Integer next, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1c2bc7a8e74b4ee49524787c3e4e751a(Integer[] index, Integer[] primes, Integer next, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 340 ******
public static Integer func_a1b2d60a46274ee8b275f1bae0ebaa08(Integer[] index, Integer[] primes, Integer next, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b3434a67d12d4126bbedec8793d80b7b(Integer[] index, Integer[] primes, Integer next, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 341 ******
public static Integer func_a5663d942ee14521afa45719117f7558(Integer[] index, Integer[] primes, Integer next, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ee928e6f1ddf4dee8591612f7cfca239(Integer[] index, Integer[] primes, Integer next, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 342 ******
public static Integer func_94af0e016e4549f5bddd64839474a300(Integer[] ugly, Integer[] index, Integer next, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1559de7024fd4bd1b92a1035b129b68d(Integer[] ugly, Integer[] index, Integer next, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 343 ******
public static Integer func_d0ddeb9441ab4830bc9ca9ed214cebdc(Integer[] index, Integer next, Integer[] ugly, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2c65d67651a243bc96d628d25f807295(Integer[] index, Integer next, Integer[] ugly, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 344 ******
public static Integer func_a806c087ffab45e49af2fb5377cef6b2(Integer[] index, Integer[] ugly, Integer next, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_63c1933bc9e944b3b97833c2b8c69616(Integer[] index, Integer[] ugly, Integer next, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 345 ******
public static Integer func_6616839def3645d4897f60c7c8d877ba(Integer[] index, Integer next, Integer[] primes, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_629c79a23cad43a082aa0d5d53a2dc3f(Integer[] index, Integer next, Integer[] primes, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 346 ******
public static Integer func_a5320fc56deb4b4bad72115a046ecc0c(Integer[] index, Integer next, Integer[] primes, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_00c3522df52c4fc1960b47e9a3d44f30(Integer[] index, Integer next, Integer[] primes, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 347 ******
public static Integer func_0600dd8603b349fd8ec76f6c90f82f42(Integer[] ugly, Integer[] index, Integer next, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_401c2f571af04a5f887f6af223eb020e(Integer[] ugly, Integer[] index, Integer next, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 348 ******
public static Integer func_01d49816dc33445585b1a2e74c552c51(Integer[] index, Integer next, Integer[] primes, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9de69b1f36a747e387a87164c015366f(Integer[] index, Integer next, Integer[] primes, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 349 ******
public static Integer func_a5e3fcd52eca473c868986572e4029a5(Integer[] index, Integer[] ugly, Integer next, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_241fbec60b6647a7879a169443bce21f(Integer[] index, Integer[] ugly, Integer next, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 350 ******
public static Integer func_f27a740f8f344382849da51a878c575e(Integer[] index, Integer next, Integer[] ugly, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6b654cc3fcb741b7b6bb820152a6ef08(Integer[] index, Integer next, Integer[] ugly, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 351 ******
public static Integer func_4e3ad20e3b144f5dac5640359631f91f(Integer[] index, Integer next, Integer[] val, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_dbe745cd89c549bfa4781bc0c77a9fc5(Integer[] index, Integer next, Integer[] val, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 352 ******
public static Integer func_747cf0a64c424598af3893decab34a34(Integer[] index, Integer next, Integer[] val, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1257027a8ff34aebaf5f37cd58e39bee(Integer[] index, Integer next, Integer[] val, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 353 ******
public static Integer func_89a01b70934f46ae93a4dc76d8f73458(Integer[] index, Integer next, Integer[] val, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b88cccc04d9748998b4399b1e292eca8(Integer[] index, Integer next, Integer[] val, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 354 ******
public static Integer func_a23db89831b04397a7e58f0224626a02(Integer[] ugly, Integer[] index, Integer next, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8e46606a27804593b8740e568c7427b4(Integer[] ugly, Integer[] index, Integer next, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 355 ******
public static Integer func_c3c6d2c66db843a0bf868bb48d977fad(Integer[] index, Integer[] ugly, Integer next, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d5f1a921b2df463a82cff9c43dbb60e4(Integer[] index, Integer[] ugly, Integer next, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 356 ******
public static Integer func_4ce2c95ec5ba4169bf2ebea8033d2cf4(Integer[] index, Integer next, Integer[] ugly, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9735bfcf03874a51b8bc39de8da86047(Integer[] index, Integer next, Integer[] ugly, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 357 ******
public static Integer func_5ce2de7e2cdd4a50b7ad57bc4a1fe552(Integer[] index, Integer next, Integer[] val, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f81c447d0dc5493d91cc8fbcb5e49c48(Integer[] index, Integer next, Integer[] val, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 358 ******
public static Integer func_f366e7f725c3447cb6b406659062fdc6(Integer[] index, Integer next, Integer[] val, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_350ad9cd73b84929990ba325edbb951d(Integer[] index, Integer next, Integer[] val, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 359 ******
public static Integer func_e8e758d7343f459c88e80543b8ecd3d3(Integer[] ugly, Integer[] primes, Integer n, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ee190ecbd4794ada90fd2c17d6909193(Integer[] ugly, Integer[] primes, Integer n, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 360 ******
public static Integer func_85b6d32199514b9ebea8e9a6a2ca10fa(Integer[] index, Integer next, Integer[] val, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a6b7d7c0d59b40bc83350ea522264cf6(Integer[] index, Integer next, Integer[] val, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 361 ******
public static Integer func_a577bf5cc4454f93ac8f47118313535f(Integer[] primes, Integer[] ugly, Integer n, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2cc1f832a1e74f9c8e097618ba485080(Integer[] primes, Integer[] ugly, Integer n, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 362 ******
public static Integer func_840ea1f597324920b287b3110c36041a(Integer[] primes, Integer n, Integer[] ugly, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_92dfd9246fcb406f810b7b80d7459640(Integer[] primes, Integer n, Integer[] ugly, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 363 ******
public static Integer func_08f7d93453514a9198aab67dedfb8d82(Integer[] primes, Integer n, Integer[] val, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4992c7e1c08d4d79b7ca0cfe25a820d5(Integer[] primes, Integer n, Integer[] val, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 364 ******
public static Integer func_f6bbf912863540b6a400a9c5f3efce7e(Integer[] primes, Integer n, Integer[] val, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_74e0cb2227d2476c9a30feb634640edd(Integer[] primes, Integer n, Integer[] val, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 365 ******
public static Integer func_e56f3cba8c2d4cc59fffd9b8521ff132(Integer[] primes, Integer n, Integer[] val, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_24244fd108a14f57bea0256f742372e6(Integer[] primes, Integer n, Integer[] val, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 366 ******
public static Integer func_37bd673dc7804e2ba1b70e7915394112(Integer[] ugly, Integer n, Integer[] primes, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_42fd213b04664dceb9e39b9a3b3fc9c4(Integer[] ugly, Integer n, Integer[] primes, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 367 ******
public static Integer func_3715a81e8d7b4c379d6bc118f32bbd00(Integer n, Integer[] ugly, Integer[] primes, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a65a62c77c9c4fe2aed31f0e6f1d3d9d(Integer n, Integer[] ugly, Integer[] primes, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 368 ******
public static Integer func_1f153eb6c2d44b34a2908aa26f206311(Integer n, Integer[] primes, Integer[] ugly, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e3ae186767ac46f7ab626566aff0461a(Integer n, Integer[] primes, Integer[] ugly, Integer[] val, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 369 ******
public static Integer func_53908c0c138d424494e2b56ac704508e(Integer n, Integer[] primes, Integer[] val, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e4b5af5a10ee4538a8d2790a426dac02(Integer n, Integer[] primes, Integer[] val, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 370 ******
public static Integer func_82a18b80de674ee78841cf8ec1050da3(Integer n, Integer[] primes, Integer[] val, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f2d011487544415d9c5aaa351d371bba(Integer n, Integer[] primes, Integer[] val, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 371 ******
public static Integer func_a0cee9dd248c489b9241df20db1aa4ca(Integer n, Integer[] primes, Integer[] val, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e14bbf0b4ee94561901f283f1654533b(Integer n, Integer[] primes, Integer[] val, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 372 ******
public static Integer func_2729bcfbc21c4d4daba764d5de8e3aa3(Integer[] ugly, Integer n, Integer[] val, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1436b900518c4ee7a18dcb4833419580(Integer[] ugly, Integer n, Integer[] val, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 373 ******
public static Integer func_dcf3ae8cbdd5466bab6bdf244732f24d(Integer n, Integer[] ugly, Integer[] val, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fe2a49c5b4f742d89be5167031331eba(Integer n, Integer[] ugly, Integer[] val, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 374 ******
public static Integer func_5ee642254eec4d01a293874949b93bc5(Integer n, Integer[] val, Integer[] ugly, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_179d0bbf9a3a4344a14dc567a242a03a(Integer n, Integer[] val, Integer[] ugly, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 375 ******
public static Integer func_eebebbffb07146eb8189540498ef7bfd(Integer n, Integer[] val, Integer[] primes, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_bd740a2987494a3d96efd475e002c8c7(Integer n, Integer[] val, Integer[] primes, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 376 ******
public static Integer func_edbeace65ddf4b8b82e575285e9b19a0(Integer n, Integer[] val, Integer[] primes, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_97076e8be2204671b6094ebf22001507(Integer n, Integer[] val, Integer[] primes, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 377 ******
public static Integer func_6fa1fe00ccfb414aa35a4e723a6e5ab4(Integer n, Integer[] val, Integer[] primes, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c202becffa1f4388b3bbbe82ad3a8d1a(Integer n, Integer[] val, Integer[] primes, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 378 ******
public static Integer func_1a38053a937a41008d2dcc569d9c79de(Integer n, Integer[] ugly, Integer[] val, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ecf79e57356c4cc5b25ea89f3b7b4a32(Integer n, Integer[] ugly, Integer[] val, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 379 ******
public static Integer func_bad77b5cad8143cd95c9c3b65af2a8b6(Integer[] ugly, Integer n, Integer[] val, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8c094f3bc04440239418b3c4e6d9e2e4(Integer[] ugly, Integer n, Integer[] val, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 380 ******
public static Integer func_d8a8da76bfc64be9ac75ec67b349d5e3(Integer n, Integer[] val, Integer[] ugly, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5ab48da4624c43dfa53efae405cf2860(Integer n, Integer[] val, Integer[] ugly, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 381 ******
public static Integer func_d37cb54aabac43ce808c0b64191c2611(Integer n, Integer[] val, Integer next, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1781b6fb975440f4ae7ea2a89fee58f0(Integer n, Integer[] val, Integer next, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 382 ******
public static Integer func_08f56e2798e3441494b210e9b6676c3a(Integer n, Integer[] val, Integer next, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4a6022d8566446e8afcb1ff14987f623(Integer n, Integer[] val, Integer next, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 383 ******
public static Integer func_a322dbcd8b1a45d3ba1506145239afc9(Integer n, Integer[] val, Integer next, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_84cd6bccd5534344986bfb6d0605c671(Integer n, Integer[] val, Integer next, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 384 ******
public static Integer func_c8178033473e429eace51ad1cd422ccc(Integer[] ugly, Integer n, Integer[] val, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_064d46a3d18944bebf6308aebfe61876(Integer[] ugly, Integer n, Integer[] val, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 385 ******
public static Integer func_ea962c999f0a4d33817fb1cc43277725(Integer n, Integer[] ugly, Integer[] val, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9f4f3dd9433149f0861a5b29b7a0abae(Integer n, Integer[] ugly, Integer[] val, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 386 ******
public static Integer func_34a78ce00037400286701cfda74f9909(Integer n, Integer[] val, Integer[] ugly, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fe15a5abcdaa4a43ae9e461bf24a894a(Integer n, Integer[] val, Integer[] ugly, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 387 ******
public static Integer func_a28eb9b886e14b6da51fd3e3042b2232(Integer n, Integer[] val, Integer next, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5257494065b64de0bbe030acb971e7b9(Integer n, Integer[] val, Integer next, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 388 ******
public static Integer func_8df8a1577ecf4cf0b383b4deabd3dc0d(Integer n, Integer[] val, Integer next, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1db8a67305e746a0813bd1bbf5681f58(Integer n, Integer[] val, Integer next, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 389 ******
public static Integer func_fba1098f2e744c08ab940600a97d731c(Integer n, Integer[] val, Integer next, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0318bf242c294248be7c694c9250faff(Integer n, Integer[] val, Integer next, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 390 ******
public static Integer func_cf3b249836d3413590360b16dfd93bd3(Integer[] ugly, Integer[] primes, Integer[] val, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1f5a9c0fd955447a8a7d74e3a5d289d2(Integer[] ugly, Integer[] primes, Integer[] val, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 391 ******
public static Integer func_83b6097e801649988bf444cdf0ab997d(Integer[] primes, Integer[] ugly, Integer[] val, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9f1c149f8e214dcd9a3fc44b78d5340c(Integer[] primes, Integer[] ugly, Integer[] val, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 392 ******
public static Integer func_4fa44168ab6b4e43a02b2388b17e1f57(Integer[] primes, Integer[] val, Integer[] ugly, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_93a3cdf21a9a41408051c7baf25054c0(Integer[] primes, Integer[] val, Integer[] ugly, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 393 ******
public static Integer func_7c7998db9b234f93af54dd3ac43b10a6(Integer[] primes, Integer[] val, Integer n, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0fa034c256024348b2054644950c6deb(Integer[] primes, Integer[] val, Integer n, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 394 ******
public static Integer func_018b8dc0a4ee4caf81a40111c0ee297b(Integer[] primes, Integer[] val, Integer n, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ad479652477543ab9e6dbf4601e0a4c8(Integer[] primes, Integer[] val, Integer n, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 395 ******
public static Integer func_08d390acdc9c48b39474aa52fd54fb3b(Integer[] ugly, Integer[] val, Integer[] primes, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ad245f19bef448d5a184a919191fcf44(Integer[] ugly, Integer[] val, Integer[] primes, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 396 ******
public static Integer func_98b0b37d033845f9b7ce7d0bb68f1d9f(Integer[] primes, Integer[] val, Integer n, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_77541ab09600404fbf1ab2a876313809(Integer[] primes, Integer[] val, Integer n, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 397 ******
public static Integer func_c084b8147b6c4747987ce04b45810ebd(Integer[] val, Integer[] ugly, Integer[] primes, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_264f4e2b61bf49fb9c171b86826e8b25(Integer[] val, Integer[] ugly, Integer[] primes, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 398 ******
public static Integer func_895f562c86a34bdfb83a461bc48c0b66(Integer[] val, Integer[] primes, Integer[] ugly, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6280ccfd0c2c42c3b425484309a945df(Integer[] val, Integer[] primes, Integer[] ugly, Integer n, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 399 ******
public static Integer func_570898d8181040d18423528455c57858(Integer[] val, Integer[] primes, Integer n, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cc18d45b0e0c4be692edd30e74116e76(Integer[] val, Integer[] primes, Integer n, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 400 ******
public static Integer func_5f0de49e73194bbfb255bf7b5281ec48(Integer[] val, Integer[] primes, Integer n, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b53922ccdd494ed1b20ec0224976ced7(Integer[] val, Integer[] primes, Integer n, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 401 ******
public static Integer func_bb58392eee3c49b3a68d85dffd62e2da(Integer[] val, Integer[] primes, Integer n, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c89c5381b0524bd8a3f33049fd15f857(Integer[] val, Integer[] primes, Integer n, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 402 ******
public static Integer func_510d0b59f3a847e3bb4c7bd9ab681bde(Integer[] ugly, Integer[] val, Integer n, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e5ac1ca017ec436bbb9424926f4ac70f(Integer[] ugly, Integer[] val, Integer n, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 403 ******
public static Integer func_84826e226b214ced9bd50f5b82603d19(Integer[] val, Integer[] ugly, Integer n, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_327ff819593f426d9f17e70ec995ac67(Integer[] val, Integer[] ugly, Integer n, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 404 ******
public static Integer func_49194fd2b1544f83a3067b69c2fbe687(Integer[] val, Integer n, Integer[] ugly, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ce61cddde8364bbbb048e4a0632f5bb4(Integer[] val, Integer n, Integer[] ugly, Integer[] primes, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 405 ******
public static Integer func_a8f51c40e20646ad82192217054813ab(Integer[] val, Integer n, Integer[] primes, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a87e0f4b358b4f5c92b5059bddb78a44(Integer[] val, Integer n, Integer[] primes, Integer[] ugly, Integer next, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 406 ******
public static Integer func_8a287634fd0542fab666ee47c4ae4b5e(Integer[] val, Integer n, Integer[] primes, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0dd43d8e611346edb7bfb18e5c14e721(Integer[] val, Integer n, Integer[] primes, Integer next, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 407 ******
public static Integer func_290daacc07564d2bb85f0adcbd4ab73f(Integer[] ugly, Integer[] val, Integer n, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_95cb9f2c1e9b4f9996c25103882bd677(Integer[] ugly, Integer[] val, Integer n, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 408 ******
public static Integer func_6a76a2849a964e3bab443f615188f48a(Integer[] val, Integer n, Integer[] primes, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_bd4e6b7eec594b3d96a0c4759d6b227e(Integer[] val, Integer n, Integer[] primes, Integer next, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 409 ******
public static Integer func_b9967c966f0f4e7e86c850779b97dc41(Integer[] val, Integer[] ugly, Integer n, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a7eb5ccaa6ed4ab38d40dbc9422ffad2(Integer[] val, Integer[] ugly, Integer n, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 410 ******
public static Integer func_e77ca4ea5fc14a088717348a1d72df4c(Integer[] val, Integer n, Integer[] ugly, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e4cc9560f6bc40bab8300542ef01b254(Integer[] val, Integer n, Integer[] ugly, Integer next, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 411 ******
public static Integer func_af765376245c43da8ddf3c7e2f8cbb15(Integer[] val, Integer n, Integer next, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8edc7bd9043749c08326dbc6df2120e7(Integer[] val, Integer n, Integer next, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 412 ******
public static Integer func_eafd043635fe4a23a36f1a8be26b5274(Integer[] val, Integer n, Integer next, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_976d20fdd5064f54a41a2eec303d08f7(Integer[] val, Integer n, Integer next, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 413 ******
public static Integer func_5137d04d4cb049a6b27c1c16dc95d4ae(Integer[] val, Integer n, Integer next, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d841b801ed3941ca95f915314588cfab(Integer[] val, Integer n, Integer next, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 414 ******
public static Integer func_37096aebba464ec98877d1efc28104c0(Integer[] ugly, Integer[] val, Integer n, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_418d42595fe34c8281bd1e21596af7ce(Integer[] ugly, Integer[] val, Integer n, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 415 ******
public static Integer func_89e6cac459ff4883a5f69a0944ee301b(Integer[] val, Integer n, Integer[] ugly, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b082c3a207f54de88e981a22d1db8a53(Integer[] val, Integer n, Integer[] ugly, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 416 ******
public static Integer func_0534f01ca6e64ec9867d5436ffbc47ce(Integer[] val, Integer[] ugly, Integer n, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_757ddc72c5704d26b158018552bde7a4(Integer[] val, Integer[] ugly, Integer n, Integer next, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 417 ******
public static Integer func_31ac6161ec9e4bbfb812018eae0b6d73(Integer[] val, Integer n, Integer next, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2c2a254bd50b40d3a6cb720fe0c8b77b(Integer[] val, Integer n, Integer next, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 418 ******
public static Integer func_702f6693fafc474994a7ca4a5c9631c5(Integer[] val, Integer n, Integer next, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_01457aa5c01c433fbc0d5b8c34e758da(Integer[] val, Integer n, Integer next, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 419 ******
public static Integer func_b7755a240772455da4b6a79d938cde3f(Integer[] val, Integer n, Integer next, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_02eb370a953e4b0e99a9a09cd2981d97(Integer[] val, Integer n, Integer next, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 420 ******
public static Integer func_1935d79601cb496684132db827a5d214(Integer[] ugly, Integer[] primes, Integer[] val, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_520bbb016e1b4eea8d4cd615d92c6a08(Integer[] ugly, Integer[] primes, Integer[] val, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 421 ******
public static Integer func_6a303b8e90484af78423e191693fefc7(Integer[] primes, Integer[] ugly, Integer[] val, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_34497e0b7dea432cba789a0e903dcffa(Integer[] primes, Integer[] ugly, Integer[] val, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 422 ******
public static Integer func_e03d09bce18b42edb1027d2b048edc38(Integer[] primes, Integer[] val, Integer[] ugly, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4efd066142d045fab5fb5805deec575f(Integer[] primes, Integer[] val, Integer[] ugly, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 423 ******
public static Integer func_25c69bedea284632828e30da9c3b1d0b(Integer[] primes, Integer[] val, Integer next, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6028905c1af34f398f8b72e2ecd15203(Integer[] primes, Integer[] val, Integer next, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 424 ******
public static Integer func_05d7e67c0ad140acb42b52767394934d(Integer[] primes, Integer[] val, Integer next, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_44730ba99cd842a78a320493ccb50b87(Integer[] primes, Integer[] val, Integer next, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 425 ******
public static Integer func_e8d378d5eb28400f9995e493ad9ac643(Integer[] primes, Integer[] val, Integer next, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_11e478a2918b416a8bec5db3eac23873(Integer[] primes, Integer[] val, Integer next, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 426 ******
public static Integer func_e2b7720d8ccd4050b4c5ac3e3cb740cb(Integer[] ugly, Integer[] val, Integer[] primes, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_edc218b6592f4704ba2ca3552b847b4f(Integer[] ugly, Integer[] val, Integer[] primes, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 427 ******
public static Integer func_8e660fd32a234fac83726a063d7a0039(Integer[] val, Integer[] ugly, Integer[] primes, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a9320df6b4d849f2bc38080e34a1064f(Integer[] val, Integer[] ugly, Integer[] primes, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 428 ******
public static Integer func_6a516f6555a043dd8affa9e626c41992(Integer[] val, Integer[] primes, Integer next, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ed6b23d65a804844b7ea819b6d146fef(Integer[] val, Integer[] primes, Integer next, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 429 ******
public static Integer func_e3dcbcd0373847d3bed7726d76f42efe(Integer[] val, Integer[] primes, Integer[] ugly, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_08773640fdfa4309896c683440cef87f(Integer[] val, Integer[] primes, Integer[] ugly, Integer next, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 430 ******
public static Integer func_d9e03a6e3d9648059bf2103934ba03d4(Integer[] val, Integer[] primes, Integer next, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_90420246e0a44154895d4081e8b366a8(Integer[] val, Integer[] primes, Integer next, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 431 ******
public static Integer func_3e5280c3860544efb215f06cfca211f9(Integer[] val, Integer[] primes, Integer next, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_98bae045218d4146910ab672d6586506(Integer[] val, Integer[] primes, Integer next, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 432 ******
public static Integer func_263b97d4a7424e1e81a3bff6dbe19218(Integer[] ugly, Integer[] val, Integer next, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ce195a1f79db4964a775f2303422bf42(Integer[] ugly, Integer[] val, Integer next, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 433 ******
public static Integer func_45baab8cf67e4fd8b8a215c84efbfedf(Integer[] val, Integer[] ugly, Integer next, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f8864e243e984cbf80ea21a1f5774ce6(Integer[] val, Integer[] ugly, Integer next, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 434 ******
public static Integer func_fb17d66c28db419cb429c602254da2c9(Integer[] val, Integer next, Integer[] ugly, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d7ab4df3963e4460a56e66d1aaa4909e(Integer[] val, Integer next, Integer[] ugly, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 435 ******
public static Integer func_1764c5897f2b4813b2159b89a808ae3e(Integer[] val, Integer next, Integer[] primes, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2bd250c1c5894894844bfe8ca12068aa(Integer[] val, Integer next, Integer[] primes, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 436 ******
public static Integer func_1ec4bbefd4e544f7a0408abf47bfc013(Integer[] val, Integer next, Integer[] primes, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e698bfb126fa4e36b2939ae3adb2ff61(Integer[] val, Integer next, Integer[] primes, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 437 ******
public static Integer func_aa8e4c92018b45ed8e3f1aafd10243a3(Integer[] val, Integer next, Integer[] primes, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8080bddd877d45288b27b6a79a2458ad(Integer[] val, Integer next, Integer[] primes, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 438 ******
public static Integer func_6c34d06e041a43469cccff36439700cd(Integer[] ugly, Integer[] val, Integer next, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4af18931d42d43f1b0be7e469e39596a(Integer[] ugly, Integer[] val, Integer next, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 439 ******
public static Integer func_113728e24d2845c59865b2a755eb4589(Integer[] val, Integer[] ugly, Integer next, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_03e5369780644ab7a49f1b537f939a43(Integer[] val, Integer[] ugly, Integer next, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 440 ******
public static Integer func_0f9919096379400f843309c5e233bc32(Integer[] val, Integer next, Integer[] ugly, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b4f8e1e84b974f81b1227b384dab7df5(Integer[] val, Integer next, Integer[] ugly, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 441 ******
public static Integer func_0a9490cc964d4e74bf1b541828b302c1(Integer[] val, Integer next, Integer n, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6c427f79ed8e400a97a1d16906853047(Integer[] val, Integer next, Integer n, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 442 ******
public static Integer func_968f47779bc34ce681749ab4af827f85(Integer[] val, Integer next, Integer n, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f57f49c34e09426dbf4f85ff75bcd57c(Integer[] val, Integer next, Integer n, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 443 ******
public static Integer func_325df94911c744e18ef9314264100358(Integer[] ugly, Integer[] val, Integer next, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6169b16f94ad41ffadaede28cdae7ff2(Integer[] ugly, Integer[] val, Integer next, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 444 ******
public static Integer func_7c9209deb077429296756d68b0a0b849(Integer[] val, Integer next, Integer n, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fd038cf530fe4b2e8543178d0810db22(Integer[] val, Integer next, Integer n, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 445 ******
public static Integer func_8e9336cd46e64206ac4115b1bbe2eb06(Integer[] val, Integer[] ugly, Integer next, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6fd72d11d8034b0e937921884d4a7256(Integer[] val, Integer[] ugly, Integer next, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 446 ******
public static Integer func_5d929cac80da4077a7e5b0949901a079(Integer[] val, Integer next, Integer[] ugly, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d2717f8813c0485c9260ad318c71d738(Integer[] val, Integer next, Integer[] ugly, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 447 ******
public static Integer func_8f69aa627a03425d91fbe3becb7a39cb(Integer[] val, Integer next, Integer n, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_24768a581b024587a9f60e05956a5d60(Integer[] val, Integer next, Integer n, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 448 ******
public static Integer func_bfc2e614c6104f12bb5df57dfdd5ebf3(Integer[] val, Integer next, Integer n, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1601a7e4468849b28be7a7da53719209(Integer[] val, Integer next, Integer n, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 449 ******
public static Integer func_c842fd2ef7264548bacf752a0d6f743f(Integer[] val, Integer next, Integer n, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4eba15fdfbb24afdb171863f0776a0c0(Integer[] val, Integer next, Integer n, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 450 ******
public static Integer func_7e81470af4184626b15138febeba9f04(Integer[] ugly, Integer[] primes, Integer[] val, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7e3ce367c1d14ad5827a4ae71433e483(Integer[] ugly, Integer[] primes, Integer[] val, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 451 ******
public static Integer func_b12fecf961ad4608b281b9c77949a6e2(Integer[] primes, Integer[] ugly, Integer[] val, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_84f5997eaf254e65b8e810a2c65ae752(Integer[] primes, Integer[] ugly, Integer[] val, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 452 ******
public static Integer func_68af625d46ea43e7ba9296fd5bcb030a(Integer[] primes, Integer[] val, Integer[] ugly, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2a58a9f571c9452bbdd6f33451a22123(Integer[] primes, Integer[] val, Integer[] ugly, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 453 ******
public static Integer func_97d076a186804cc58c9cb533366ae022(Integer[] primes, Integer[] val, Integer next, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_eb1e30c111254dbcbef76514f6504edd(Integer[] primes, Integer[] val, Integer next, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 454 ******
public static Integer func_216fd14a1f6d4e23af0714531218bc07(Integer[] primes, Integer[] val, Integer next, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_905a077224c74d70b8e1f8f2695bca85(Integer[] primes, Integer[] val, Integer next, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 455 ******
public static Integer func_b43439da0ffa494b8c6eb19ca1f0b426(Integer[] primes, Integer[] val, Integer next, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7384b1959c944e3e9c29df6bef0f5b28(Integer[] primes, Integer[] val, Integer next, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 456 ******
public static Integer func_cf3bd918cf2e4b14be465bd24e02325b(Integer[] val, Integer[] ugly, Integer[] primes, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d0dde17db5cf44f39994de82c29916db(Integer[] val, Integer[] ugly, Integer[] primes, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 457 ******
public static Integer func_0d8533de1ef44d39a7beff6d146dbbce(Integer[] ugly, Integer[] val, Integer[] primes, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a70628b40fe141fa8f6832f0b01b1b40(Integer[] ugly, Integer[] val, Integer[] primes, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 458 ******
public static Integer func_fa58a4216872400aafcc75be516aca6b(Integer[] val, Integer[] primes, Integer[] ugly, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7d11e81cde71407e90dc9685a1cce5d8(Integer[] val, Integer[] primes, Integer[] ugly, Integer next, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 459 ******
public static Integer func_3f21456167c04947be85a8d53017dfd7(Integer[] val, Integer[] primes, Integer next, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e2c4f91c2ce54e9e88fd39374fae2df3(Integer[] val, Integer[] primes, Integer next, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 460 ******
public static Integer func_b08850cdee8d45d292e4aa427d7c0d51(Integer[] val, Integer[] primes, Integer next, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6a83f3125a634b6a9d613c43b25103ee(Integer[] val, Integer[] primes, Integer next, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 461 ******
public static Integer func_660529454d9041b884b7fddebda718e9(Integer[] val, Integer[] primes, Integer next, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3fb96223bff642cd9ee8a04e67dc48e5(Integer[] val, Integer[] primes, Integer next, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 462 ******
public static Integer func_3433a32a83d94d608a3fb886b5066bf0(Integer[] ugly, Integer[] val, Integer next, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_47522fa0777c4d7294aa9b95318d1bba(Integer[] ugly, Integer[] val, Integer next, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 463 ******
public static Integer func_311ddc8994cb46198c6acd690858a896(Integer[] val, Integer[] ugly, Integer next, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_362cdef8cff441108c7a72a0cc29a03f(Integer[] val, Integer[] ugly, Integer next, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 464 ******
public static Integer func_b6a4df1715bb45f5b0e8c2c2768b5d9d(Integer[] val, Integer next, Integer[] ugly, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fbce42eea68a4ce4a83b46053edc071c(Integer[] val, Integer next, Integer[] ugly, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 465 ******
public static Integer func_6b5214ce3e754754a401151a58b91c23(Integer[] val, Integer next, Integer[] primes, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_37b3262d3c4d4fedbc3b1201daff4822(Integer[] val, Integer next, Integer[] primes, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 466 ******
public static Integer func_5a06049813e941318c4b02db2bf0fdc9(Integer[] val, Integer next, Integer[] primes, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f1eeecbf33ad44248d56e00e14274373(Integer[] val, Integer next, Integer[] primes, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 467 ******
public static Integer func_2bf8350b97184fc48907f9d061b368f5(Integer[] val, Integer next, Integer[] primes, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_478c9fc60a3b4951a5fd55b447de28d6(Integer[] val, Integer next, Integer[] primes, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 468 ******
public static Integer func_3dee6b648ee74714afe2c0a07d29396a(Integer[] ugly, Integer[] val, Integer next, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c44decbcf4cb4d4c835280ce6444b14f(Integer[] ugly, Integer[] val, Integer next, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 469 ******
public static Integer func_fcb2e4ed0f404bf190830f5c63599785(Integer[] val, Integer[] ugly, Integer next, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e2a1980d1f3e4452809df375bffd86da(Integer[] val, Integer[] ugly, Integer next, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 470 ******
public static Integer func_4774990fd61a442882ceb5117ad2211b(Integer[] val, Integer next, Integer[] ugly, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_219d3fc3655e46449d3066ce27e39fa3(Integer[] val, Integer next, Integer[] ugly, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 471 ******
public static Integer func_2e9eddeea6c742bdb12b144df2eacfd0(Integer[] val, Integer next, Integer[] index, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e7732ed041ef4b06ba2e676b010f410e(Integer[] val, Integer next, Integer[] index, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 472 ******
public static Integer func_a9272933ca1745d694cd550f94c1facd(Integer[] val, Integer next, Integer[] index, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3d308bb8735f47adb091e55fa51bfaa9(Integer[] val, Integer next, Integer[] index, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 473 ******
public static Integer func_345c5356fe0544819845cf404d58ca9e(Integer[] val, Integer next, Integer[] index, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d5cfb0811815465dbb6d7416a5b3f88b(Integer[] val, Integer next, Integer[] index, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 474 ******
public static Integer func_7395f0b302034e7db036e1917f7e50a9(Integer[] ugly, Integer[] val, Integer next, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_60c8bf0813c0476ebf3eabadbce050b2(Integer[] ugly, Integer[] val, Integer next, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 475 ******
public static Integer func_3ea0cd113aa94bee93a63c4a0d8fe489(Integer[] val, Integer[] ugly, Integer next, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_67e6bdad010e436a8ea93fa55b80090f(Integer[] val, Integer[] ugly, Integer next, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 476 ******
public static Integer func_987925c645bb404d843b08bd6e6770ef(Integer[] val, Integer next, Integer[] ugly, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0086961ac9ea42349c5f4dad5d7e0120(Integer[] val, Integer next, Integer[] ugly, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 477 ******
public static Integer func_477b56567b904e0a841a6c77aee74154(Integer[] val, Integer next, Integer[] index, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_40d45491a46c45b0a6a14f6561f5b722(Integer[] val, Integer next, Integer[] index, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 478 ******
public static Integer func_1367501abe8b496188aa633220a8cca0(Integer[] val, Integer next, Integer[] index, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f0685bdacbad4261815bd400c011cf91(Integer[] val, Integer next, Integer[] index, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 479 ******
public static Integer func_3ca64e6643b2430ea341d0421d03e370(Integer[] val, Integer next, Integer[] index, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c0908f241dd24cf3b453f15aa2514170(Integer[] val, Integer next, Integer[] index, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 480 ******
public static Integer func_551f390df6104f63aaac7ba5c9c88909(Integer[] primes, Integer[] ugly, Integer n, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ce33745fbf8648259d6ee281658e3e3b(Integer[] primes, Integer[] ugly, Integer n, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 481 ******
public static Integer func_84afee9614f449bc8f16624820811310(Integer[] ugly, Integer[] primes, Integer n, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e9862520d11145f3aedb3156607486ce(Integer[] ugly, Integer[] primes, Integer n, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 482 ******
public static Integer func_be03a72b0ff4463892339ce3da2d64a1(Integer[] primes, Integer n, Integer[] ugly, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0cd49988cb444c22a84103ba464b45e7(Integer[] primes, Integer n, Integer[] ugly, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 483 ******
public static Integer func_709f3fc4cb87486587fc94279e5496d0(Integer[] primes, Integer n, Integer next, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c114acc296c64c07af3e8c81f316e120(Integer[] primes, Integer n, Integer next, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 484 ******
public static Integer func_99f809f634e74608b539ac0867acaa5d(Integer[] primes, Integer n, Integer next, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e425ed3d509846de826a60bcd3f2e643(Integer[] primes, Integer n, Integer next, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 485 ******
public static Integer func_c455f01fe7dd427db5bb79fddd46b55a(Integer[] primes, Integer n, Integer next, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_42f391d839964fd3bbbf3b401f0ff99b(Integer[] primes, Integer n, Integer next, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 486 ******
public static Integer func_6f5b1199dc464bcc9e5ecce1a5d719bf(Integer[] ugly, Integer n, Integer[] primes, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3ffaf5459a414787b12127ffded12434(Integer[] ugly, Integer n, Integer[] primes, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 487 ******
public static Integer func_a24e0e88cca84e679d8c1207e57a179d(Integer n, Integer[] ugly, Integer[] primes, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_aa26cf6fa2744e908d00e7809d136c83(Integer n, Integer[] ugly, Integer[] primes, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 488 ******
public static Integer func_707c79013c244e10a1d311a3b4a17d3a(Integer n, Integer[] primes, Integer[] ugly, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ae7bf2039160429d898c560ee8db7c47(Integer n, Integer[] primes, Integer[] ugly, Integer next, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 489 ******
public static Integer func_eb319ea5257e4540a1fadd324385744d(Integer n, Integer[] primes, Integer next, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_39a9b51bd09b4c5f946f06f3c71537bd(Integer n, Integer[] primes, Integer next, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 490 ******
public static Integer func_0b69e8107a9249149b571885c2125500(Integer n, Integer[] primes, Integer next, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3362bd121dbc488f887f354c675e14f3(Integer n, Integer[] primes, Integer next, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 491 ******
public static Integer func_7cc90ed359e54ff59f9295a77443e98c(Integer n, Integer[] primes, Integer next, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1dd6073114b343688e75a86c3a2eaa4e(Integer n, Integer[] primes, Integer next, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 492 ******
public static Integer func_cbd090b6f6644aa08396f1b99d9db279(Integer n, Integer[] ugly, Integer next, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b5523961848a437aa001df36948039af(Integer n, Integer[] ugly, Integer next, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 493 ******
public static Integer func_545aad0921864ae79522ba4e58566864(Integer[] ugly, Integer n, Integer next, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cf8a676c943041218516557beac2758f(Integer[] ugly, Integer n, Integer next, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 494 ******
public static Integer func_185f98a4ec1947689ceba5fae9cdde12(Integer n, Integer next, Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0e2abab131be4b03bf261fe50433fe97(Integer n, Integer next, Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 495 ******
public static Integer func_6b87152a18c44fec842e61fbde16631b(Integer n, Integer next, Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5074b29aa6934914bb1e5932f42c7415(Integer n, Integer next, Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 496 ******
public static Integer func_9b88de9b78de449a9c7c8bad590b3899(Integer n, Integer next, Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_890c22b07ce249dbb90f4a05e2577ba4(Integer n, Integer next, Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 497 ******
public static Integer func_5527192da43845479cf9a0b133d4e0b7(Integer n, Integer next, Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_50993aba446c4d9da2992947538cab91(Integer n, Integer next, Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 498 ******
public static Integer func_5d3f045ac5004bad80c90ddc30ba3516(Integer[] ugly, Integer n, Integer next, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9d3dbaa76bf24a9b84092a61166fa1f8(Integer[] ugly, Integer n, Integer next, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 499 ******
public static Integer func_0ec22b34ab724e63beb6c9c7217a5efc(Integer n, Integer[] ugly, Integer next, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5295ce099aa145259fb4f346ff33c8dd(Integer n, Integer[] ugly, Integer next, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 500 ******
public static Integer func_803d3b10caf44369b06fb2359dc50538(Integer n, Integer next, Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7f7e493bb39d4231b4c78d0744ce62fe(Integer n, Integer next, Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 501 ******
public static Integer func_b7a57dd2c0a14222aec923b650a5b028(Integer n, Integer next, Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_beb1e640e50c459786fc479417a2ac7d(Integer n, Integer next, Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 502 ******
public static Integer func_4c98e4425c4e419082ab7c555acaaf0b(Integer n, Integer next, Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d21b75749ff84b33b2d2ec8fd9f8ad6c(Integer n, Integer next, Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 503 ******
public static Integer func_3c0042dfa07c496eb3a1c5b4a503a28d(Integer n, Integer next, Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2ffb6128c0a24c8c85efd4b2c1166496(Integer n, Integer next, Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 504 ******
public static Integer func_e0f2c37f429a495b9c7736665fb8630b(Integer n, Integer[] ugly, Integer next, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_975588e706714374a67fa9880b771d50(Integer n, Integer[] ugly, Integer next, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 505 ******
public static Integer func_b292edb4cff74f53ae1ec613f3a8fc9b(Integer[] ugly, Integer n, Integer next, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_45b4c3d1570d4162bd7a41db6f4e486e(Integer[] ugly, Integer n, Integer next, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 506 ******
public static Integer func_f0b6949903644c208dd32e7b1ff9c306(Integer n, Integer next, Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4a5720ad1fa340e8af6a0074552e1931(Integer n, Integer next, Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 507 ******
public static Integer func_87a0bb94298649c2a18619d45b7ef238(Integer n, Integer next, Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_06d6dc854659480dbe2774f81ba735dc(Integer n, Integer next, Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 508 ******
public static Integer func_05e1f53ba69d4ff9b233c5c8dd30a443(Integer n, Integer next, Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f78a8a5062a54d9fb731abb263a139fb(Integer n, Integer next, Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 509 ******
public static Integer func_9b349fe1736344b38ca251486181dae2(Integer n, Integer next, Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_74d34d038f2349d88ac88b69370e232c(Integer n, Integer next, Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 510 ******
public static Integer func_b412536165d240f1bd15b74b776f4628(Integer[] ugly, Integer[] primes, Integer next, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a659ba55f61846c0ba83a1d55e11ab45(Integer[] ugly, Integer[] primes, Integer next, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 511 ******
public static Integer func_ef39d980df0d4608b51f6264b4e53d6c(Integer[] primes, Integer[] ugly, Integer next, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_747379dddfa64c6080af42b0f86bbd7f(Integer[] primes, Integer[] ugly, Integer next, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 512 ******
public static Integer func_60efb5a6e979441fa228cd8a20752534(Integer[] primes, Integer next, Integer[] ugly, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3019af3dde9e402d924641852ddf3145(Integer[] primes, Integer next, Integer[] ugly, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 513 ******
public static Integer func_57b958111646482d86fcfc7e5b9f478c(Integer[] primes, Integer next, Integer n, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_31fd6ebaa34c4be49b6035381eed9dcc(Integer[] primes, Integer next, Integer n, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 514 ******
public static Integer func_d7583688d5f24fe19d010e24c82746f9(Integer[] primes, Integer next, Integer n, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3bcf602ab27e47cd9e8816c272aea894(Integer[] primes, Integer next, Integer n, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 515 ******
public static Integer func_cbb7ad5f921f4e0b8b161491ae779f72(Integer[] primes, Integer next, Integer n, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4f1c805a061a460fa4dc937fb3324e62(Integer[] primes, Integer next, Integer n, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 516 ******
public static Integer func_8385e4e038c74c988501139513a80847(Integer[] ugly, Integer next, Integer[] primes, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_41c1d893cbf54fbea611e9a736376cd1(Integer[] ugly, Integer next, Integer[] primes, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 517 ******
public static Integer func_28dfd6a0c8f746f58eda69cdd23bcc23(Integer next, Integer[] ugly, Integer[] primes, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b47c786bd8cf4afdb6b055213dc21e2c(Integer next, Integer[] ugly, Integer[] primes, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 518 ******
public static Integer func_92cebc4f7ed44b0aad760844ec7ac0e8(Integer next, Integer[] primes, Integer[] ugly, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0f35046f23ce4c149230df3ad1fecc37(Integer next, Integer[] primes, Integer[] ugly, Integer n, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 519 ******
public static Integer func_ecdf71218fce49eabc9b63e9a3e2ad96(Integer next, Integer[] primes, Integer n, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cae8e19b532d4316bf0b70e162913c56(Integer next, Integer[] primes, Integer n, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 520 ******
public static Integer func_2942834a1c9645aaa400dcfdbe90b084(Integer next, Integer[] primes, Integer n, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c5e7690230ec4edaa525ad7c9cae26cb(Integer next, Integer[] primes, Integer n, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 521 ******
public static Integer func_8c8dbf144dcb48a285b086075460e36d(Integer next, Integer[] primes, Integer n, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_79565af3e6504996a929970735e3ef96(Integer next, Integer[] primes, Integer n, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 522 ******
public static Integer func_6c8c8220126d462a8d81c3de44b6b32f(Integer next, Integer[] ugly, Integer n, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b2a0492dc0c343c88948b2c2cd3eaf32(Integer next, Integer[] ugly, Integer n, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 523 ******
public static Integer func_0632ef32e397442f97a7df37d742180a(Integer[] ugly, Integer next, Integer n, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4db92e4cf1804f37b5050ddb2043c3a8(Integer[] ugly, Integer next, Integer n, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 524 ******
public static Integer func_c7a2ea0d9b284b89bae4077139262340(Integer next, Integer n, Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f68f001888f84c31a2c50f7eeeb75fa0(Integer next, Integer n, Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 525 ******
public static Integer func_337b16f6d29a41ecb8e3581070fa1e6f(Integer next, Integer n, Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5996ee93b73e45979f62a9fc7ba2d6ea(Integer next, Integer n, Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 526 ******
public static Integer func_87e21f179197472db93088171fd69d76(Integer next, Integer n, Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c55cf4e8549547aab956165b89e073cf(Integer next, Integer n, Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 527 ******
public static Integer func_6ee0531b49074fb59440e7a7e86343a0(Integer next, Integer n, Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c43fe0737e5c4057b34c2816c52013e3(Integer next, Integer n, Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 528 ******
public static Integer func_507ed3c91b3f412a91fe15d2e0d0075a(Integer[] ugly, Integer next, Integer n, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8731b5e63a94478ca6254712c8fb758f(Integer[] ugly, Integer next, Integer n, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 529 ******
public static Integer func_e9dfdce78a754dd194cda60dc4057fb0(Integer next, Integer[] ugly, Integer n, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_087b5c354b0144b09ffd0823e490daae(Integer next, Integer[] ugly, Integer n, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 530 ******
public static Integer func_c925a5b9a8744985b5adfc39948b3cd3(Integer next, Integer n, Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_25575b8f23e54192b989edef52becc10(Integer next, Integer n, Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 531 ******
public static Integer func_f69846f0e32d40998b836f3aa436c805(Integer next, Integer n, Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_bde76a6c62484d7dabfd0ed3a715790d(Integer next, Integer n, Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 532 ******
public static Integer func_88788b9053014a4dbf7f7e54efbde7bf(Integer next, Integer n, Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_005ca471addf496fabb9ae5f08d2f560(Integer next, Integer n, Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 533 ******
public static Integer func_d24b359e4ccc4a9b9e726ee096f37393(Integer next, Integer n, Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cf42ff8b075348eba7a1d6b1aac6bf16(Integer next, Integer n, Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 534 ******
public static Integer func_9839923f0fbc4bd7ad260ef97a2aae38(Integer[] ugly, Integer next, Integer n, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5b50096eda5346c981dc53be95560541(Integer[] ugly, Integer next, Integer n, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 535 ******
public static Integer func_b5868caa8e7e415cb813d93a6e49b279(Integer next, Integer[] ugly, Integer n, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9604dde632d746d4b89be3f0572c4ca4(Integer next, Integer[] ugly, Integer n, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 536 ******
public static Integer func_a9e24c3b8b2c423eb8ddebd7245edc52(Integer next, Integer n, Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f6a2c86ce35a468497d51997371016aa(Integer next, Integer n, Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 537 ******
public static Integer func_ccbe7bfde623424a8e488a600ad38c56(Integer next, Integer n, Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5d5b62a860f24cfbbed87041e0639200(Integer next, Integer n, Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 538 ******
public static Integer func_b3fa98a22d134e05a66b5bf2af43ae1d(Integer next, Integer n, Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_51bcf159530f48b1869b3549984ca764(Integer next, Integer n, Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 539 ******
public static Integer func_a9c37290b6a94dd49be10fc586a989df(Integer next, Integer n, Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ff2fc40d25964d3380ad2c74bdf00b7c(Integer next, Integer n, Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 540 ******
public static Integer func_ddf2dd8c137f4536b5a8971c5771efae(Integer[] ugly, Integer[] primes, Integer next, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2886a6c528944f1a949e2fa454b9a425(Integer[] ugly, Integer[] primes, Integer next, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 541 ******
public static Integer func_0ce0c9e64b32463b97a42c608f68e56a(Integer[] primes, Integer[] ugly, Integer next, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2dc6cd4a185a4d9b8fe392e7a1d4cc61(Integer[] primes, Integer[] ugly, Integer next, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 542 ******
public static Integer func_03cec3a5ff854434b787754d7e569775(Integer[] primes, Integer next, Integer[] ugly, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_193e5ac6a27f4dc6a26c4f958abec242(Integer[] primes, Integer next, Integer[] ugly, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 543 ******
public static Integer func_cc9d1cf5ffe4475ea0220bd25d6f9d3d(Integer[] primes, Integer next, Integer[] val, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_70488b749a9c447ab92ec0df457313d8(Integer[] primes, Integer next, Integer[] val, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 544 ******
public static Integer func_67b36ef533674834ab0e44f491bc77d1(Integer[] primes, Integer next, Integer[] val, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_66bbd18a69274ea7bc70733f643b1602(Integer[] primes, Integer next, Integer[] val, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 545 ******
public static Integer func_1dcdbf5313d1483296bb5cc1320146ca(Integer[] primes, Integer next, Integer[] val, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_79ba56ca05f446e7b090d52fc33540b1(Integer[] primes, Integer next, Integer[] val, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 546 ******
public static Integer func_577affd899e3481e885e8ecd0316621a(Integer[] ugly, Integer next, Integer[] primes, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ecbd771ba4994a01b587e39fc43f8888(Integer[] ugly, Integer next, Integer[] primes, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 547 ******
public static Integer func_f3f9cc6a047146ec9252a2c41f05ac89(Integer next, Integer[] ugly, Integer[] primes, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fbcc8c026cef44d591f5a3d464617c25(Integer next, Integer[] ugly, Integer[] primes, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 548 ******
public static Integer func_ff1dc0aba22641a9973fef83c2b687b6(Integer next, Integer[] primes, Integer[] val, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8a125101149242f18af8257e8d7afc4c(Integer next, Integer[] primes, Integer[] val, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 549 ******
public static Integer func_c012ad178c60458c8e44d37c45124b7c(Integer next, Integer[] primes, Integer[] ugly, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cae89ab5f62b4de6b8d3ab8b6bf04f25(Integer next, Integer[] primes, Integer[] ugly, Integer[] val, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 550 ******
public static Integer func_504496483d354a5c9194f68a628cf040(Integer next, Integer[] primes, Integer[] val, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_57380b01f9444982a3e7bb612f564ece(Integer next, Integer[] primes, Integer[] val, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 551 ******
public static Integer func_41c4d45352694f64ba6b2385cebec734(Integer next, Integer[] primes, Integer[] val, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_368d957ec9ec45a0805de5ead015d2e5(Integer next, Integer[] primes, Integer[] val, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 552 ******
public static Integer func_6c5dc6db2f084986bd3649238947be0a(Integer[] ugly, Integer next, Integer[] val, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c3415ce70ff44ccd92b0f808cbbc8313(Integer[] ugly, Integer next, Integer[] val, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 553 ******
public static Integer func_8a5de0682f4f4d6cb2c675edbfdb1f99(Integer next, Integer[] ugly, Integer[] val, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f26f0042893241d09985a2b750d860bf(Integer next, Integer[] ugly, Integer[] val, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 554 ******
public static Integer func_f27c90b2b06541a09bfd7db4d427deae(Integer next, Integer[] val, Integer[] ugly, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0228fd03d5ac469fa8bb12dd2a925535(Integer next, Integer[] val, Integer[] ugly, Integer[] primes, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 555 ******
public static Integer func_ba7328ae34cc492b915e2b3040a967e7(Integer next, Integer[] val, Integer[] primes, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9f1ac4cf518c4c7b8ece50a761d3b826(Integer next, Integer[] val, Integer[] primes, Integer[] ugly, Integer n, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 556 ******
public static Integer func_3af84ce4160849a19ba1aab98e4fe7f8(Integer next, Integer[] val, Integer[] primes, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1cecbe460dcc43e18e9830a093366db6(Integer next, Integer[] val, Integer[] primes, Integer n, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 557 ******
public static Integer func_dd8fbc235ba645dabcff63ac597896e0(Integer next, Integer[] val, Integer[] primes, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_61ebee67f9a344b3a43169574bc70ac8(Integer next, Integer[] val, Integer[] primes, Integer n, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 558 ******
public static Integer func_d794cc9fd190426ebf51b8692fa06274(Integer next, Integer[] ugly, Integer[] val, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_812ffccc3413471e956ad884886cea8e(Integer next, Integer[] ugly, Integer[] val, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 559 ******
public static Integer func_bc8382a05aac445f8f8013a6c8fc7abe(Integer[] ugly, Integer next, Integer[] val, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_83d0ec0471ff4eac8adf22e2ab1d0c88(Integer[] ugly, Integer next, Integer[] val, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 560 ******
public static Integer func_2a48dc77a0414a71a78cd0ee96c9b237(Integer next, Integer[] val, Integer n, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d58ece6a6a8147d89cc8e366ca40e444(Integer next, Integer[] val, Integer n, Integer[] ugly, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 561 ******
public static Integer func_c396c3640d7d4d86831a3cb28e84bcc2(Integer next, Integer[] val, Integer[] ugly, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_995f325d028b41a49b07d9f9ee9265b5(Integer next, Integer[] val, Integer[] ugly, Integer n, Integer[] primes, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 562 ******
public static Integer func_2a5a53e14ec7482fb46baafa95695611(Integer next, Integer[] val, Integer n, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_656da953d7e9470c9076f7af15b86884(Integer next, Integer[] val, Integer n, Integer[] primes, Integer[] ugly, Integer[] index){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 563 ******
public static Integer func_9d9f5248390b415baa54b92b9960337f(Integer next, Integer[] val, Integer n, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3e106a57dd5347dc95c573b278ee0fb4(Integer next, Integer[] val, Integer n, Integer[] primes, Integer[] index, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 564 ******
public static Integer func_ecf515a0187e4824983043ee7785e4a5(Integer[] ugly, Integer next, Integer[] val, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4ed3734e925c4df9bafe8922923bb5c3(Integer[] ugly, Integer next, Integer[] val, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 565 ******
public static Integer func_e423f78567464f05abd936651a43e4c4(Integer next, Integer[] ugly, Integer[] val, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8bdf97253ceb42db8e02882eba80f16b(Integer next, Integer[] ugly, Integer[] val, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 566 ******
public static Integer func_5277a85f034c4a5e9a9dea25a38c16ea(Integer next, Integer[] val, Integer[] ugly, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c073b1d3d10c4352aa8331a1fff27ef7(Integer next, Integer[] val, Integer[] ugly, Integer n, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 567 ******
public static Integer func_703f5017d14647e79660dcdf2709a3de(Integer next, Integer[] val, Integer n, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_86facb7a0dfe432aa6f2c788bd995d6e(Integer next, Integer[] val, Integer n, Integer[] ugly, Integer[] index, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 568 ******
public static Integer func_164eb1439cbd4469bcc2c8f95d2c99b6(Integer next, Integer[] val, Integer n, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_534e300fdc9540299c50c412d022a0ea(Integer next, Integer[] val, Integer n, Integer[] index, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 569 ******
public static Integer func_9dba2dc39af34890b64bd8489e9ca3a4(Integer next, Integer[] val, Integer n, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e46874c5a9674d84902ea6e5fa23c80b(Integer next, Integer[] val, Integer n, Integer[] index, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 570 ******
public static Integer func_1753bdc11e2b4f1faa7aa4ce24143daa(Integer[] ugly, Integer[] primes, Integer next, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_995fed6cebaf4375991c17bcfa2e4213(Integer[] ugly, Integer[] primes, Integer next, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 571 ******
public static Integer func_a1970b8c9fe745c9bd800a3d2175070f(Integer[] primes, Integer[] ugly, Integer next, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a1c3b9e4d6aa44ff9efcd47c69ee73f2(Integer[] primes, Integer[] ugly, Integer next, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 572 ******
public static Integer func_a288af898cd14fd5aa600b096160ce00(Integer[] primes, Integer next, Integer[] ugly, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b378d490acaf476cba43691d933b9a52(Integer[] primes, Integer next, Integer[] ugly, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 573 ******
public static Integer func_8edadedcca584cadb619fc3138df0e1c(Integer[] primes, Integer next, Integer[] val, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_08e12832865746338d6f44c17e9b358b(Integer[] primes, Integer next, Integer[] val, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 574 ******
public static Integer func_cd5f18df36b046539752d065b9d0629f(Integer[] primes, Integer next, Integer[] val, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d10cd249f7984a3fb865f78d79aaaf0a(Integer[] primes, Integer next, Integer[] val, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 575 ******
public static Integer func_324dcc8c63ae4a3f935666aadf13e0c0(Integer[] primes, Integer next, Integer[] val, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_885c75dbdf32425894e8d319fd50e31c(Integer[] primes, Integer next, Integer[] val, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 576 ******
public static Integer func_4198743d38f34ce0afabca3cd28f0aa2(Integer[] ugly, Integer next, Integer[] primes, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8381c1a926584eaab812f0134f809843(Integer[] ugly, Integer next, Integer[] primes, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 577 ******
public static Integer func_456cd9e72fb542d6b27731f1d7001b22(Integer next, Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_86bfeb1200e44015a652a1066ba228da(Integer next, Integer[] ugly, Integer[] primes, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 578 ******
public static Integer func_e21b810875b34af59c40987793942a94(Integer next, Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a0762893778b4d56a4050aae7524cee0(Integer next, Integer[] primes, Integer[] ugly, Integer[] val, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 579 ******
public static Integer func_f4f28e7a0257459bb895fd2938f331e4(Integer next, Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e9594c3098e145d793c0aa7cf533f2b3(Integer next, Integer[] primes, Integer[] val, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 580 ******
public static Integer func_2f434c369f04426f995a22df45bc2dad(Integer next, Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e0d92292a153486395759234976cdf8f(Integer next, Integer[] primes, Integer[] val, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 581 ******
public static Integer func_33d682f1d7a247349664fdf43098af4b(Integer next, Integer[] primes, Integer[] val, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_85c38537ddfd4de7bd24a7dde676ac0c(Integer next, Integer[] primes, Integer[] val, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 582 ******
public static Integer func_b47a6e87e94b494a8c6b259aaf1c5547(Integer[] ugly, Integer next, Integer[] val, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f4857f5d054a47228d5a243e4979ee52(Integer[] ugly, Integer next, Integer[] val, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 583 ******
public static Integer func_5aa6cb9ca3bb41c0b4a7e8794cd5159c(Integer next, Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4b51645cfbb8444f83d25db348da3e31(Integer next, Integer[] ugly, Integer[] val, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 584 ******
public static Integer func_9d3d64dc1c464e7b871b8e35f9131de1(Integer next, Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8bf3cf3a92db432a99403ef9d0d9eb31(Integer next, Integer[] val, Integer[] ugly, Integer[] primes, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 585 ******
public static Integer func_96c07fd061544b5f905b6070d23422a5(Integer next, Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3430438af4ab4141b0e8ac8af8851fe0(Integer next, Integer[] val, Integer[] primes, Integer[] ugly, Integer[] index, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 586 ******
public static Integer func_e576ae4c86f74b47a274b5820784a257(Integer next, Integer[] val, Integer[] primes, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3f2d8b4498e24563940013b252ad22dd(Integer next, Integer[] val, Integer[] primes, Integer[] index, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 587 ******
public static Integer func_d382dcb866b1456893c1c30511f33ecc(Integer next, Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0be3024f7a7c431cbba38e9c31f0c918(Integer next, Integer[] val, Integer[] primes, Integer[] index, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 588 ******
public static Integer func_f5634a26a3d8450ea3f6cbaa55a1550d(Integer[] ugly, Integer next, Integer[] val, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8861d712ee0a4211ab82dff41264dd9f(Integer[] ugly, Integer next, Integer[] val, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 589 ******
public static Integer func_c9fe630161224ab0a231ea7dd296866b(Integer next, Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_343ed3c1a7c645209dcf9e2a0500cbd7(Integer next, Integer[] ugly, Integer[] val, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 590 ******
public static Integer func_2d26d29da215405f838c9e6ecbcbaee2(Integer next, Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e4b7d0d6f1f04feaa2bf9a0d6dbecf60(Integer next, Integer[] val, Integer[] index, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 591 ******
public static Integer func_c9636d867831476788aaf8ef52837ccc(Integer next, Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cff579cc31aa47e7b74f62bf503fd2b1(Integer next, Integer[] val, Integer[] ugly, Integer[] index, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 592 ******
public static Integer func_6b5b4a6771ba4a36b4ab3abbcad72240(Integer next, Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a9a101bc39784b5c9044e1b9fb7d15b8(Integer next, Integer[] val, Integer[] index, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 593 ******
public static Integer func_dda0e477cf5a40ffb9a92115d661b2ed(Integer next, Integer[] val, Integer[] index, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_022d5831e256489098e2623fbc1abe36(Integer next, Integer[] val, Integer[] index, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 594 ******
public static Integer func_382711f49ebf466eb8e16c3ba9ea11c6(Integer[] ugly, Integer next, Integer[] val, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3b1370a284f543ee97f8db1706628ca9(Integer[] ugly, Integer next, Integer[] val, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 595 ******
public static Integer func_66dc8a002cda4c6faa6d3a8130331096(Integer next, Integer[] ugly, Integer[] val, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8d6992b2b26c4dab89a3282748580daf(Integer next, Integer[] ugly, Integer[] val, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 596 ******
public static Integer func_3acadc3a8e1f451797add17164e16e92(Integer next, Integer[] val, Integer[] ugly, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_129f3ed014d04d08a4c358b2ea4bc58d(Integer next, Integer[] val, Integer[] ugly, Integer[] index, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 597 ******
public static Integer func_b79e6ec95596480698dbaef1bece24d2(Integer next, Integer[] val, Integer[] index, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5b7d2f79811446a0b2eca371e52f424e(Integer next, Integer[] val, Integer[] index, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 598 ******
public static Integer func_18d7f15850934005a60b58286035eee6(Integer next, Integer[] val, Integer[] index, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1bc6fdab7b5c42cf9ed2a627514b5a25(Integer next, Integer[] val, Integer[] index, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 599 ******
public static Integer func_acf423ff894d4e088c9cd6b923431d16(Integer next, Integer[] val, Integer[] index, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_516dfda87dd84eb39aeb011a230a5902(Integer next, Integer[] val, Integer[] index, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 600 ******
public static Integer func_e78471d5c0d04722a712bdcf777d3c65(Integer[] ugly, Integer[] primes, Integer n, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e3a827275329449888ceef75485a2c8c(Integer[] ugly, Integer[] primes, Integer n, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 601 ******
public static Integer func_daa277a4e0cc4df1a5e806d288f827bb(Integer[] primes, Integer[] ugly, Integer n, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0952d903f425421488578c82ade20f15(Integer[] primes, Integer[] ugly, Integer n, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 602 ******
public static Integer func_8d47beb231894ce1b443d3b72d2f0d9f(Integer[] primes, Integer n, Integer next, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_679d8804e3684936b14e8024491002e0(Integer[] primes, Integer n, Integer next, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 603 ******
public static Integer func_bb0488d3c1024e948e0791582f5b5a56(Integer[] primes, Integer n, Integer[] ugly, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d518a90157a54798a9469ebe8bfdc42b(Integer[] primes, Integer n, Integer[] ugly, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 604 ******
public static Integer func_733157d0351a4760b396c243ab10d433(Integer[] primes, Integer n, Integer next, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9f0345ec06654f318e858094f7542b8f(Integer[] primes, Integer n, Integer next, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 605 ******
public static Integer func_78460f1c8a8040269f1d76c011647e14(Integer[] primes, Integer n, Integer next, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9a3373b7332247168fd3bcd17c95b26f(Integer[] primes, Integer n, Integer next, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 606 ******
public static Integer func_2b9bdee556f646d3bf81711699c971f0(Integer n, Integer[] ugly, Integer[] primes, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fa5c0e7f80ae473aa08ccc99983724a1(Integer n, Integer[] ugly, Integer[] primes, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 607 ******
public static Integer func_56ed2830fc3c42e794bae41d5d83fccf(Integer[] ugly, Integer n, Integer[] primes, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7df26eeaa17d4cad82ba20dcc8217630(Integer[] ugly, Integer n, Integer[] primes, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 608 ******
public static Integer func_3a88d96419314b9f918cfd19ae88ec2f(Integer n, Integer[] primes, Integer[] ugly, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5d0187dfe77a4bc4bef08b15b4f3f5c7(Integer n, Integer[] primes, Integer[] ugly, Integer next, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 609 ******
public static Integer func_4c14af536dc849c49cecfe1fd782f8a7(Integer n, Integer[] primes, Integer next, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4e1184715b6145e387f99a5ac5f2f9da(Integer n, Integer[] primes, Integer next, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 610 ******
public static Integer func_a31e1ac6901c4bd99cd493f29c914b50(Integer n, Integer[] primes, Integer next, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0f228cd6af1a4e7bba0c3f612437bdb7(Integer n, Integer[] primes, Integer next, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 611 ******
public static Integer func_1ea884d3ccb044ffb6f6e7b4af6441f0(Integer n, Integer[] primes, Integer next, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_21a8624391614435becde0ee732cc394(Integer n, Integer[] primes, Integer next, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 612 ******
public static Integer func_c9520e03e5c04d47b03c921adbc7af91(Integer[] ugly, Integer n, Integer next, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_94c0f6dbc1df4c73892eee83bed07dae(Integer[] ugly, Integer n, Integer next, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 613 ******
public static Integer func_ec94c61fac88445ba5035d5ddd988cb9(Integer n, Integer[] ugly, Integer next, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f518da13b76a485b9bff6de8d0f7dde3(Integer n, Integer[] ugly, Integer next, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 614 ******
public static Integer func_450eb708a1cd41cf920d6d16219dac53(Integer n, Integer next, Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1d04bf88e30a4ada81a0d58099fdff88(Integer n, Integer next, Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 615 ******
public static Integer func_d9bd43e61f274ebc95883558c2836f39(Integer n, Integer next, Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1fed3e3758c94d50a4b7b1a8903f2006(Integer n, Integer next, Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 616 ******
public static Integer func_92d6cf688eb448b9bde72b72977595ff(Integer n, Integer next, Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d96b35b38c9148f2bcc2464e0639261c(Integer n, Integer next, Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 617 ******
public static Integer func_dba1fffd55c34daf9e1b2a30322f41b7(Integer n, Integer next, Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4be9de8be9154f08babdc7074a7c32e3(Integer n, Integer next, Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 618 ******
public static Integer func_f1970290188e44398c9e4458aec0ea23(Integer[] ugly, Integer n, Integer next, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c21ba68159814c3ba28d2e2e5d782d7c(Integer[] ugly, Integer n, Integer next, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 619 ******
public static Integer func_a09f7e5ea1b74df4a065fd1d67b4e668(Integer n, Integer[] ugly, Integer next, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0f2f2a023f8643b2b0de7b1ff8f2c681(Integer n, Integer[] ugly, Integer next, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 620 ******
public static Integer func_841ca0e5b7c94ecd821e698e9835eb13(Integer n, Integer next, Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f3904d38d0c84bee92cb4f0e4c9552f5(Integer n, Integer next, Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 621 ******
public static Integer func_59e5eab651af4f74b1ff0f4390fbafcf(Integer n, Integer next, Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4b4e6d9730b849fdaf86a1b2ec4b4817(Integer n, Integer next, Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 622 ******
public static Integer func_0c6f7ff4d5ab40b5b349725b9b757bed(Integer n, Integer next, Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4f86d90b04fe4b9da5ed6bb702c5e654(Integer n, Integer next, Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 623 ******
public static Integer func_52ce5db5a0594d1d9f4cc89adeb0d842(Integer n, Integer next, Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4090f84512774610b0fbfa01fc8539d2(Integer n, Integer next, Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 624 ******
public static Integer func_e07281b4caa74681a0d19be770561cc6(Integer[] ugly, Integer n, Integer next, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2390cb9fba224e71ade2849c9a1c21f2(Integer[] ugly, Integer n, Integer next, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 625 ******
public static Integer func_8a610ec0e59049b8bcf56e2511d1b9ce(Integer n, Integer next, Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_86e617a65a394f5480b723848881a255(Integer n, Integer next, Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 626 ******
public static Integer func_b802a88121a34942b481e98ed8e535f9(Integer n, Integer[] ugly, Integer next, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e71ef23e1ab340b08fe09fe960a01367(Integer n, Integer[] ugly, Integer next, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 627 ******
public static Integer func_13771cc782054f4a8529c1dbe41fc00a(Integer n, Integer next, Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f0649491983745bb93cf47f8e1b257b1(Integer n, Integer next, Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 628 ******
public static Integer func_cc2abfa1e8fb475382ff037ce81fcc8b(Integer n, Integer next, Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5ed5236cbf9a4c76adc73d3ba97222e1(Integer n, Integer next, Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 629 ******
public static Integer func_a63247ee330c4ac793591575b0ee03ff(Integer[] ugly, Integer[] primes, Integer next, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2b71fb541f7743e5993e6d6eec6fee8d(Integer[] ugly, Integer[] primes, Integer next, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 630 ******
public static Integer func_03675bea88174b3dbcf54f8853ad54e7(Integer n, Integer next, Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cd4397f378c048acbf9550c672fed998(Integer n, Integer next, Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 631 ******
public static Integer func_2c8f9fb97d074da1aebb4d8d3b8928df(Integer[] primes, Integer[] ugly, Integer next, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_508f37d7928b4c22833dceccbd457f87(Integer[] primes, Integer[] ugly, Integer next, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 632 ******
public static Integer func_3ce5ec1e876c45deb667a5c105f7132d(Integer[] primes, Integer next, Integer[] ugly, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_06781b7159e949abac6e3becb9f524fd(Integer[] primes, Integer next, Integer[] ugly, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 633 ******
public static Integer func_b5c4cd3e9d8c4e9f96faba05fc5fe4b3(Integer[] primes, Integer next, Integer n, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_72b1818da951461291aa62c54b1bc7e3(Integer[] primes, Integer next, Integer n, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 634 ******
public static Integer func_853ae71363ea4ffbba27bf107e1e3dec(Integer[] primes, Integer next, Integer n, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1a912eec0b2e4483b0c91b80dad26b5a(Integer[] primes, Integer next, Integer n, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 635 ******
public static Integer func_b2d01960e4694ae2aac2f16162b8adf7(Integer[] primes, Integer next, Integer n, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a9b1fb065836430bbec4861868dfc3a6(Integer[] primes, Integer next, Integer n, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 636 ******
public static Integer func_c1122e4ea6f0496e9e4349180b980e4a(Integer[] ugly, Integer next, Integer[] primes, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5e51d25f96cc4dcf9f533aac14aaf20a(Integer[] ugly, Integer next, Integer[] primes, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 637 ******
public static Integer func_d6d016e594f84611b2ac91e1dd933f16(Integer next, Integer[] ugly, Integer[] primes, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a44339a9cad74e74a9b41e7b2d39ceac(Integer next, Integer[] ugly, Integer[] primes, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 638 ******
public static Integer func_52375a2d363b419cadebb9cbdb9a5c18(Integer next, Integer[] primes, Integer[] ugly, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8dd5b17bc32e4b4db9cc68d077d291ce(Integer next, Integer[] primes, Integer[] ugly, Integer n, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 639 ******
public static Integer func_00685d83a4b441bc8529f64f34e0b931(Integer next, Integer[] primes, Integer n, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f7a0108f542942b5b1687d4fe026f964(Integer next, Integer[] primes, Integer n, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 640 ******
public static Integer func_4cda0b0e04c24663856d338b25343efe(Integer next, Integer[] primes, Integer n, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_471077e0a44144beafa6279447c168ba(Integer next, Integer[] primes, Integer n, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 641 ******
public static Integer func_2e324e22f0cd4789985695e073b9d17c(Integer next, Integer[] primes, Integer n, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4bd75e1c374a49ddbb2eeead0576830a(Integer next, Integer[] primes, Integer n, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 642 ******
public static Integer func_1c0d0375e4154be9bd10b7b114658dec(Integer[] ugly, Integer next, Integer n, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a86a2982e8ce45f3bcd22736caab86ef(Integer[] ugly, Integer next, Integer n, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 643 ******
public static Integer func_255e928342444148847d4fe8a2a326d4(Integer next, Integer[] ugly, Integer n, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3dedc9b7e1fa432f89a849db6253f408(Integer next, Integer[] ugly, Integer n, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 644 ******
public static Integer func_228e238297564b84a28a4cf1b19c60bf(Integer next, Integer n, Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1f0d751d442c4778a93a509d1776c13c(Integer next, Integer n, Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 645 ******
public static Integer func_4349175f9f3c4bdaa19027f6a1413d68(Integer next, Integer n, Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6936d4e41ccf4072a3e9220a366029ed(Integer next, Integer n, Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 646 ******
public static Integer func_f8796e227b354996a175a878effb7e84(Integer next, Integer n, Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_932b73f9185a44d1a459e0fc3a7466f6(Integer next, Integer n, Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 647 ******
public static Integer func_9a58dc8c7a1e431bb954aa9837018e0e(Integer next, Integer n, Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b1ee93f8497c4e8f92718a15f0511316(Integer next, Integer n, Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 648 ******
public static Integer func_c1bcf93a306e4009904b91e8f870a0bf(Integer[] ugly, Integer next, Integer n, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_714b2b22abcd4340a9d0d7d62988b432(Integer[] ugly, Integer next, Integer n, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 649 ******
public static Integer func_b9c59a8707a942fdadea00bfb8f7a16d(Integer next, Integer[] ugly, Integer n, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_b39d87fbf0cb4812b040723184f6e701(Integer next, Integer[] ugly, Integer n, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 650 ******
public static Integer func_4ddeafc94cba4c999f237ef1a2a41ed5(Integer next, Integer n, Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_fd37f8509b444932a4da1494062fd3be(Integer next, Integer n, Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 651 ******
public static Integer func_31b85d60b85a4de8a6c517ef52d0f45d(Integer next, Integer n, Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3ff78a6c6c6d42bead27caf9073653eb(Integer next, Integer n, Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 652 ******
public static Integer func_a063237f975241818524308c801ec72b(Integer next, Integer n, Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_0e0ffea8b9dd42f2ad1bd5330bf9e2fc(Integer next, Integer n, Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 653 ******
public static Integer func_73d58a1113a544e49a9b41b56904a796(Integer next, Integer n, Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5efd6535b1d84010b7b42d70cf1ab64b(Integer next, Integer n, Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 654 ******
public static Integer func_cf837a574fc14dc08731b236e75a4177(Integer[] ugly, Integer next, Integer n, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_55cae2b4741e46dab0ed1e89f6d65b25(Integer[] ugly, Integer next, Integer n, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 655 ******
public static Integer func_f37dcedf865347778a1185d19ac7286c(Integer next, Integer[] ugly, Integer n, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_89af4faf2c934f14bd684c7ed9b1c09f(Integer next, Integer[] ugly, Integer n, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 656 ******
public static Integer func_66d8b0c77a104e76aa41581cc2ef4561(Integer next, Integer n, Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_12038158c494408aa86f976f64ae5eed(Integer next, Integer n, Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 657 ******
public static Integer func_03233d41d921446999f4d0dfdd132701(Integer next, Integer n, Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ed159460a2934e95be067b0dfe5d34c4(Integer next, Integer n, Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 658 ******
public static Integer func_ba55614669cc4c098519f848c526dd61(Integer next, Integer n, Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9b2f3845f1134883b8497a0c12aba2b4(Integer next, Integer n, Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 659 ******
public static Integer func_26c67347bae048f2b17bf1ab83089f2e(Integer next, Integer n, Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_183d901bd8c045fdba5cc7faaa2905bc(Integer next, Integer n, Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 660 ******
public static Integer func_060dc61d7d4d4b90808f191ecb209990(Integer[] ugly, Integer[] primes, Integer next, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f6ec9a7667954440ac748fc019ef24fb(Integer[] ugly, Integer[] primes, Integer next, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 661 ******
public static Integer func_9fd95daf141444819302c95338425882(Integer[] primes, Integer[] ugly, Integer next, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ff274a5c0ba94cdd8f24e9c0fd2e0e89(Integer[] primes, Integer[] ugly, Integer next, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 662 ******
public static Integer func_aba63595600e4f67a7ac8cb036876fce(Integer[] primes, Integer next, Integer[] ugly, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_55f882afaa58410bb6129bdb64be58f7(Integer[] primes, Integer next, Integer[] ugly, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 663 ******
public static Integer func_ae51213bf07040fe96f2abea6e55714e(Integer[] primes, Integer next, Integer[] index, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5e36fcc1048f4c20a7c53df59b0af48c(Integer[] primes, Integer next, Integer[] index, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 664 ******
public static Integer func_c6b60afd2c8743239e09e3251039d267(Integer[] primes, Integer next, Integer[] index, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_06336d12bd3e4a9f9a60246133d73214(Integer[] primes, Integer next, Integer[] index, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 665 ******
public static Integer func_5e0100e5f747416eb6bfc0ffd12f75ee(Integer[] primes, Integer next, Integer[] index, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4659004a9b044af9b2ec48224ef95121(Integer[] primes, Integer next, Integer[] index, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 666 ******
public static Integer func_07e648c4f75e4be884bcbb2c6374c157(Integer[] ugly, Integer next, Integer[] primes, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d1f1fb33916548c9ba12fd218346a1ce(Integer[] ugly, Integer next, Integer[] primes, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 667 ******
public static Integer func_aafb28b1adf9432abd7f929775b399be(Integer next, Integer[] primes, Integer[] ugly, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7e81548840d1423a894ba4b51fe0c164(Integer next, Integer[] primes, Integer[] ugly, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 668 ******
public static Integer func_c86a01d6c118416c8f25b43ba091b90f(Integer next, Integer[] ugly, Integer[] primes, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_30a6665f17594a01a99e9b3d3a6929b7(Integer next, Integer[] ugly, Integer[] primes, Integer[] index, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 669 ******
public static Integer func_78cbe1f9db6648099d83740968e2c7c3(Integer next, Integer[] primes, Integer[] index, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_51da0b7b79404f998c4d395834acb6dd(Integer next, Integer[] primes, Integer[] index, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 670 ******
public static Integer func_38ec05d6715a4460a44569e1ce7c21c7(Integer next, Integer[] primes, Integer[] index, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_175c0cd2723140f5a8f768b3fe596421(Integer next, Integer[] primes, Integer[] index, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 671 ******
public static Integer func_6af21096cc104cc48811cf563bb95ac9(Integer[] ugly, Integer next, Integer[] index, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_da80c8e2534e4e7e9ecfcc63379e92c8(Integer[] ugly, Integer next, Integer[] index, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 672 ******
public static Integer func_b7a0ad571cc049cd853241c82c6c8823(Integer next, Integer[] primes, Integer[] index, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_ed7a63c6aa054a2c9fe46f353a2a7059(Integer next, Integer[] primes, Integer[] index, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 673 ******
public static Integer func_19bdc47d77fa45948e6ada09c5d29954(Integer next, Integer[] ugly, Integer[] index, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e942a3265f0042eeb04c994410e112df(Integer next, Integer[] ugly, Integer[] index, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 674 ******
public static Integer func_00a5bbda6e8544218fa591e8d4bd02c7(Integer next, Integer[] index, Integer[] ugly, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_024a4d8b22054592846bab352acfc3bc(Integer next, Integer[] index, Integer[] ugly, Integer[] primes, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 675 ******
public static Integer func_23688456984849bfaa1654c6f32ef450(Integer next, Integer[] index, Integer[] primes, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9bc00402f3414ba7b15b051912a0ba13(Integer next, Integer[] index, Integer[] primes, Integer[] ugly, Integer n, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 676 ******
public static Integer func_de307c8948a143aaa1b0632e132ffb9d(Integer next, Integer[] index, Integer[] primes, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_092938a841aa4049bd3b8d407e39ca96(Integer next, Integer[] index, Integer[] primes, Integer n, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 677 ******
public static Integer func_3c22ddab652d45c4928cf3ab33142f4e(Integer next, Integer[] index, Integer[] primes, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6f40d85fcfbd4cb4957db5f2b7020a69(Integer next, Integer[] index, Integer[] primes, Integer n, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 678 ******
public static Integer func_2e03772f63ee46e9a005f26cb892c2f4(Integer[] ugly, Integer next, Integer[] index, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_85a48905449c4ae2bafe90fef5796a4f(Integer[] ugly, Integer next, Integer[] index, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 679 ******
public static Integer func_9807d9e81de54dbf96c1547da3a2de26(Integer next, Integer[] index, Integer[] ugly, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_39558e476ab04af79faf35a11090b320(Integer next, Integer[] index, Integer[] ugly, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 680 ******
public static Integer func_65e0a4895e1747b1a9d3dc5547758cb7(Integer next, Integer[] ugly, Integer[] index, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4f7d11c10b3a4e129f885ff12b4bc317(Integer next, Integer[] ugly, Integer[] index, Integer n, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 681 ******
public static Integer func_763d8c639d654a758dab158394c5fab1(Integer next, Integer[] index, Integer n, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_589d50972b514ae68f1386aac34df1a1(Integer next, Integer[] index, Integer n, Integer[] ugly, Integer[] primes, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 682 ******
public static Integer func_87502a3b08c04dc88ac35fbbab0cafef(Integer next, Integer[] index, Integer n, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c9ac8f0a368b45669087ce03056565f1(Integer next, Integer[] index, Integer n, Integer[] primes, Integer[] ugly, Integer[] val){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 683 ******
public static Integer func_9824a39d371e4f56ae81cc99b4b81215(Integer[] ugly, Integer next, Integer[] index, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_dfaed435029947eaa6f49e09bdacc98d(Integer[] ugly, Integer next, Integer[] index, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 684 ******
public static Integer func_89c4f8b69a96481ea1269c6ad4b5640f(Integer next, Integer[] index, Integer n, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_36969986bcb34e2eaf6e03bd139523c9(Integer next, Integer[] index, Integer n, Integer[] primes, Integer[] val, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 685 ******
public static Integer func_fd22781ca5a243d484cf84555e00df35(Integer next, Integer[] ugly, Integer[] index, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_1e7a58ea29594081be0e6c5d690a0c23(Integer next, Integer[] ugly, Integer[] index, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 686 ******
public static Integer func_b2e404635fc14a00af878a9ec296c2f8(Integer next, Integer[] index, Integer[] ugly, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_640d730011bf4bd78f4a549ef225d62b(Integer next, Integer[] index, Integer[] ugly, Integer n, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 687 ******
public static Integer func_9f6c32817c4b4c63ad4b22bbaf35242a(Integer next, Integer[] index, Integer n, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_85d770c3f9094ba7ba5d07b84a677fdd(Integer next, Integer[] index, Integer n, Integer[] ugly, Integer[] val, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 688 ******
public static Integer func_69aa66c01dfc47f7b574f004aab213ac(Integer next, Integer[] index, Integer n, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_abf0af4949de48ab919226189a84be65(Integer next, Integer[] index, Integer n, Integer[] val, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 689 ******
public static Integer func_8bbe9fc76f314139890ddc477b8291dc(Integer next, Integer[] index, Integer n, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f326fb44d9c64159ac60198a72f4c053(Integer next, Integer[] index, Integer n, Integer[] val, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 690 ******
public static Integer func_dadbc5e495e14fdc89b6244be0c1e455(Integer[] ugly, Integer[] primes, Integer next, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7ca08d0a9e2c4179833688d084593d76(Integer[] ugly, Integer[] primes, Integer next, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 691 ******
public static Integer func_03696dbd6d3148f8a9336f2b374ceff1(Integer[] primes, Integer[] ugly, Integer next, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_56277fd694834e5bb1e65acc75251d36(Integer[] primes, Integer[] ugly, Integer next, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 692 ******
public static Integer func_1c4e6cbb52204217bc173e021def1e99(Integer[] primes, Integer next, Integer[] index, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_f271c8ca7d224331a751cf500c9fda9c(Integer[] primes, Integer next, Integer[] index, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 693 ******
public static Integer func_36094d3f6ce74fdd9eb76f86a4344b22(Integer[] primes, Integer next, Integer[] ugly, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_eab61af642f545c4ad9793c60f773d36(Integer[] primes, Integer next, Integer[] ugly, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 694 ******
public static Integer func_41dbac1e583b4a8a902bde72158d2eea(Integer[] primes, Integer next, Integer[] index, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e465ed485c764d4c87e507ed9e10cdfb(Integer[] primes, Integer next, Integer[] index, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 695 ******
public static Integer func_5cc18c25696b4de5b49a3143d6754e0b(Integer[] primes, Integer next, Integer[] index, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_e116b8730f0540ea84a7a1f1e58bed6f(Integer[] primes, Integer next, Integer[] index, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 696 ******
public static Integer func_a5033558b08348b69f4d65a7fc8da2ee(Integer[] ugly, Integer next, Integer[] primes, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_efd132b85f844919910d2b5de92e2224(Integer[] ugly, Integer next, Integer[] primes, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 697 ******
public static Integer func_31652fcf8b0f4763bb4dde6336981d4d(Integer next, Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c7dc2c77cc6f44bb874be7100910f4e9(Integer next, Integer[] ugly, Integer[] primes, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 698 ******
public static Integer func_909dc8ae143949ba88348dfa108c91e5(Integer next, Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2754908344234ef3b37b533ccf3169b7(Integer next, Integer[] primes, Integer[] ugly, Integer[] index, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 699 ******
public static Integer func_76f7117627474d00a089aaf4fbcb973d(Integer next, Integer[] primes, Integer[] index, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_a783bd6fbf8b45ee9b50d27abc79e5a3(Integer next, Integer[] primes, Integer[] index, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 700 ******
public static Integer func_c365d4aec7eb485bae9ff6f080a87ab6(Integer next, Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_65f60dfa935a4588b8a69b3508bee233(Integer next, Integer[] primes, Integer[] index, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 701 ******
public static Integer func_f9e0335a5c8b42228433cdb3cdd47cb6(Integer next, Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_cab8493512b2404aa17eb83763ec0522(Integer next, Integer[] primes, Integer[] index, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 702 ******
public static Integer func_765cf44c40d24944a15c5104e8a7abc8(Integer[] ugly, Integer next, Integer[] index, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_33b7730dce1b42fda3c560ace3c30095(Integer[] ugly, Integer next, Integer[] index, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 703 ******
public static Integer func_c159e232acbb4212ad79a69d8af4be1f(Integer next, Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_3a44bf933c324a21b30630596319fad0(Integer next, Integer[] ugly, Integer[] index, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 704 ******
public static Integer func_13882a85f38e4966b29b82ff11744862(Integer next, Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_d440f63f0d7f423ab8b8cfe99508cb2a(Integer next, Integer[] index, Integer[] ugly, Integer[] primes, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 705 ******
public static Integer func_1bd875d76f734108ae2cf91bf2771925(Integer next, Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9df1793dee064da79da38c14111d162b(Integer next, Integer[] index, Integer[] primes, Integer[] ugly, Integer[] val, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 706 ******
public static Integer func_e1f75975c0384d55953da299ff9de429(Integer next, Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_9234508c5f304ad2a15ec1d2f7d9ed6e(Integer next, Integer[] index, Integer[] primes, Integer[] val, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 707 ******
public static Integer func_224a84ea07fc486191a072c627e9e398(Integer next, Integer[] index, Integer[] primes, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_13a0984977a84a868db2178db080b3b1(Integer next, Integer[] index, Integer[] primes, Integer[] val, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 708 ******
public static Integer func_902b7890757f47c680afdc1c67be81f6(Integer next, Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_c2617dade0544c89a071a0139f2e7abe(Integer next, Integer[] ugly, Integer[] index, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 709 ******
public static Integer func_c109cb14b4104fab8eb1d1dc37fdabf9(Integer[] ugly, Integer next, Integer[] index, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5b9a366445e74199975ce6673659102e(Integer[] ugly, Integer next, Integer[] index, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 710 ******
public static Integer func_513408999e124e0d981aeb82bd2a3c0b(Integer next, Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_6c0b7654908144b3a3ed675c30c32e01(Integer next, Integer[] index, Integer[] ugly, Integer[] val, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 711 ******
public static Integer func_dc15a7dd58f745bc8cc07b694ac7b761(Integer next, Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_695021260a3e40e3a7a8118841c7a12f(Integer next, Integer[] index, Integer[] val, Integer[] ugly, Integer[] primes, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 712 ******
public static Integer func_3b5de6b3e61e43eda66dc51c93391621(Integer next, Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2cc333c5c2de45d8b01000d74df4e638(Integer next, Integer[] index, Integer[] val, Integer[] primes, Integer[] ugly, Integer n){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 713 ******
public static Integer func_dbc3f7378f7848d297a2af896f33646f(Integer next, Integer[] index, Integer[] val, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_2b7ea8ffc82044f484f49c8b8fa7c6a1(Integer next, Integer[] index, Integer[] val, Integer[] primes, Integer n, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 714 ******
public static Integer func_330d729e1773459292d0000c355b3143(Integer next, Integer[] ugly, Integer[] index, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_4e4bc8644ebb4c64ace534e1b2352821(Integer next, Integer[] ugly, Integer[] index, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 715 ******
public static Integer func_41f85576f1cf45bb8fe0dacb48379f65(Integer[] ugly, Integer next, Integer[] index, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_8d5392fa51014b7f9fb621ee10857ea8(Integer[] ugly, Integer next, Integer[] index, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 716 ******
public static Integer func_df6f1f0fe2164c76a5b685a92ad4fa79(Integer next, Integer[] index, Integer[] ugly, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5cb41379a4244b74b0c114f4804afcb4(Integer next, Integer[] index, Integer[] ugly, Integer[] val, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 717 ******
public static Integer func_8a7bb6ac6e3441b3a9a7011fe5bb55d2(Integer next, Integer[] index, Integer[] val, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_5fd30e86658044e88113cd61ac02e52e(Integer next, Integer[] index, Integer[] val, Integer[] ugly, Integer n, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 718 ******
public static Integer func_9e3f7f606c2444199ec688ff9b55097f(Integer next, Integer[] index, Integer[] val, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_7ab116c0bf5042b78a8f6b54b14fcf91(Integer next, Integer[] index, Integer[] val, Integer n, Integer[] ugly, Integer[] primes){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}


****** Cluster 719 ******
public static Integer func_da63f45d3a4b42cfaf4fa56916e0f20f(Integer next, Integer[] index, Integer[] val, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 43
        // 44
        ugly[i] = next;
        // 45
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 48
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 50
            next = Math.min(next, val[j]);
        }
    }
    return next;
}
public static Integer func_459c17134f2a465d825ab563f0c3e972(Integer next, Integer[] index, Integer[] val, Integer n, Integer[] primes, Integer[] ugly){
    for (int i = 0; i < n; i++) {
        // 203
        // 204
        ugly[i] = next;
        // 205
        next = Integer.MAX_VALUE;
        for (int j = 0; j < primes.length; j++) {
            // 208
            if (val[j] == ugly[i])
                val[j] = ugly[index[j]++] * primes[j];
            // 210
            next = Math.min(next, val[j]);
        }
    }
    return next;
}